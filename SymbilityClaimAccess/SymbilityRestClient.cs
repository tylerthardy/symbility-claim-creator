//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.11.1.0 (NJsonSchema v10.4.3.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"

namespace SymbilityClaimAccess
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.1.0 (NJsonSchema v10.4.3.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SymbilityRestClient 
    {
        private SymbilityApiHttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public SymbilityRestClient(SymbilityApiHttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        public string BaseUrl
        {
            get { return _httpClient.BaseAddress.ToString(); }
            set { _httpClient.BaseAddress = new System.Uri(value); }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    
    
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
        /// <summary>Get the summary of an assignment.</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to get the assignment.</param>
        /// <param name="assignmentID">The identifier of the assignment to retrieve.</param>
        /// <returns>Returns the requested assignment.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ClaimAssignment> AssignmentGetClaimAssignmentAsync(string claimID, int assignmentID)
        {
            return AssignmentGetClaimAssignmentAsync(claimID, assignmentID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the summary of an assignment.</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to get the assignment.</param>
        /// <param name="assignmentID">The identifier of the assignment to retrieve.</param>
        /// <returns>Returns the requested assignment.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ClaimAssignment> AssignmentGetClaimAssignmentAsync(string claimID, int assignmentID, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (assignmentID == null)
                throw new System.ArgumentNullException("assignmentID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/assignments/{assignmentID}");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{assignmentID}", System.Uri.EscapeDataString(ConvertToString(assignmentID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ClaimAssignment>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Unassign a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to unassign the company.</param>
        /// <param name="assignmentID">The identifier of the claim assignment to unassign from the claim. If no assignmentID is specified, all assignments
        /// from the assignee will be removed provided the assignee has no sub-assignments.</param>
        /// <param name="from_User_ID_Specification">The user responsible for removing this assignee from the claim. His name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task AssignmentRemoveClaimAssigneeAsync(string claimID, int assignmentID, string from_User_ID_Specification)
        {
            return AssignmentRemoveClaimAssigneeAsync(claimID, assignmentID, from_User_ID_Specification, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Unassign a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to unassign the company.</param>
        /// <param name="assignmentID">The identifier of the claim assignment to unassign from the claim. If no assignmentID is specified, all assignments
        /// from the assignee will be removed provided the assignee has no sub-assignments.</param>
        /// <param name="from_User_ID_Specification">The user responsible for removing this assignee from the claim. His name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task AssignmentRemoveClaimAssigneeAsync(string claimID, int assignmentID, string from_User_ID_Specification, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (assignmentID == null)
                throw new System.ArgumentNullException("assignmentID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/assignments/{assignmentID}");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{assignmentID}", System.Uri.EscapeDataString(ConvertToString(assignmentID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Conflict - The operation is temporarily not allowed because a user has ownership of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the details of an assignment.</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the details.</param>
        /// <param name="assignmentID">The globally unique identifier of the claim assignment from which to retrieve the details.</param>
        /// <param name="forms">True if the form summaries should be fetched and included in the response.</param>
        /// <param name="handwrittenNotes">True if the handwritten notes should be fetched and included in the response.</param>
        /// <param name="externalDocuments">True if the attached external documents should be fetched and included in the response.</param>
        /// <param name="diagrams">True if the diagram summaries should be fetched and included in the response.</param>
        /// <param name="estimates">True if the estimate summaries should be fetched and included in the response.</param>
        /// <param name="photoPages">True if the photo pages and photo summaries should be fetched and included in the response.</param>
        /// <returns>Returns the requested aclaim ssignment details.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetClaimAssignmentDetails> AssignmentGetClaimAssignmentDetailsAsync(string claimID, int assignmentID, bool? forms, bool? handwrittenNotes, bool? externalDocuments, bool? diagrams, bool? estimates, bool? photoPages)
        {
            return AssignmentGetClaimAssignmentDetailsAsync(claimID, assignmentID, forms, handwrittenNotes, externalDocuments, diagrams, estimates, photoPages, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the details of an assignment.</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the details.</param>
        /// <param name="assignmentID">The globally unique identifier of the claim assignment from which to retrieve the details.</param>
        /// <param name="forms">True if the form summaries should be fetched and included in the response.</param>
        /// <param name="handwrittenNotes">True if the handwritten notes should be fetched and included in the response.</param>
        /// <param name="externalDocuments">True if the attached external documents should be fetched and included in the response.</param>
        /// <param name="diagrams">True if the diagram summaries should be fetched and included in the response.</param>
        /// <param name="estimates">True if the estimate summaries should be fetched and included in the response.</param>
        /// <param name="photoPages">True if the photo pages and photo summaries should be fetched and included in the response.</param>
        /// <returns>Returns the requested aclaim ssignment details.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetClaimAssignmentDetails> AssignmentGetClaimAssignmentDetailsAsync(string claimID, int assignmentID, bool? forms, bool? handwrittenNotes, bool? externalDocuments, bool? diagrams, bool? estimates, bool? photoPages, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (assignmentID == null)
                throw new System.ArgumentNullException("assignmentID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/assignments/{assignmentID}/details?");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{assignmentID}", System.Uri.EscapeDataString(ConvertToString(assignmentID, System.Globalization.CultureInfo.InvariantCulture)));
            if (forms != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("forms") + "=").Append(System.Uri.EscapeDataString(ConvertToString(forms, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (handwrittenNotes != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("handwrittenNotes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(handwrittenNotes, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (externalDocuments != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("externalDocuments") + "=").Append(System.Uri.EscapeDataString(ConvertToString(externalDocuments, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (diagrams != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("diagrams") + "=").Append(System.Uri.EscapeDataString(ConvertToString(diagrams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (estimates != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("estimates") + "=").Append(System.Uri.EscapeDataString(ConvertToString(estimates, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (photoPages != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("photoPages") + "=").Append(System.Uri.EscapeDataString(ConvertToString(photoPages, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetClaimAssignmentDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Add a user to a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim to which to add the user.</param>
        /// <param name="assignmentID">The identifier of the claim assignment.
        /// This is a mandatory parameter for the assignee of a claim.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The identifier of the user to add to the claim.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task AssignmentAddClaimUserAsync(string claimID, int assignmentID, string from_User_ID_Specification, UserIDSpecification body)
        {
            return AssignmentAddClaimUserAsync(claimID, assignmentID, from_User_ID_Specification, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add a user to a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim to which to add the user.</param>
        /// <param name="assignmentID">The identifier of the claim assignment.
        /// This is a mandatory parameter for the assignee of a claim.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The identifier of the user to add to the claim.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task AssignmentAddClaimUserAsync(string claimID, int assignmentID, string from_User_ID_Specification, UserIDSpecification body, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (assignmentID == null)
                throw new System.ArgumentNullException("assignmentID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/assignments/{assignmentID}/users");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{assignmentID}", System.Uri.EscapeDataString(ConvertToString(assignmentID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Assign a company to a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim for which to assign the company.</param>
        /// <param name="assignmentID">The identifier of the claim assignment. This is a mandatory parameter for the assignee of a claim.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications of the assignment to create.
        /// 
        /// Use AssigneeCompanyIDSpecification to specify the company to assign the claim to.</param>
        /// <returns>Returns the created assignment.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ClaimAssignment> AssignmentAddClaimAssigneeAsync(string claimID, int assignmentID, string from_User_ID_Specification, AddClaimAssigneeSpecification body)
        {
            return AssignmentAddClaimAssigneeAsync(claimID, assignmentID, from_User_ID_Specification, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Assign a company to a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim for which to assign the company.</param>
        /// <param name="assignmentID">The identifier of the claim assignment. This is a mandatory parameter for the assignee of a claim.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications of the assignment to create.
        /// 
        /// Use AssigneeCompanyIDSpecification to specify the company to assign the claim to.</param>
        /// <returns>Returns the created assignment.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ClaimAssignment> AssignmentAddClaimAssigneeAsync(string claimID, int assignmentID, string from_User_ID_Specification, AddClaimAssigneeSpecification body, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (assignmentID == null)
                throw new System.ArgumentNullException("assignmentID");
    
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/assignments/{assignmentID}/assign");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{assignmentID}", System.Uri.EscapeDataString(ConvertToString(assignmentID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ClaimAssignment>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Assign the recommended company to a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim for which to assign the company from the assignee group.</param>
        /// <param name="assignmentID">The identifier of the claim assignment. This is a mandatory parameter for the assignee of a claim.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications of the assignment to create.
        /// 
        /// Use AssigneeGroupIDSpecification to specify the assignee group of the company to assign the claim to.</param>
        /// <returns>Returns the created assignment.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ClaimAssignment> AssignmentAddClaimAssigneeGroupAsync(string claimID, int assignmentID, string from_User_ID_Specification, AddClaimAssigneeGroupSpecification body)
        {
            return AssignmentAddClaimAssigneeGroupAsync(claimID, assignmentID, from_User_ID_Specification, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Assign the recommended company to a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim for which to assign the company from the assignee group.</param>
        /// <param name="assignmentID">The identifier of the claim assignment. This is a mandatory parameter for the assignee of a claim.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications of the assignment to create.
        /// 
        /// Use AssigneeGroupIDSpecification to specify the assignee group of the company to assign the claim to.</param>
        /// <returns>Returns the created assignment.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ClaimAssignment> AssignmentAddClaimAssigneeGroupAsync(string claimID, int assignmentID, string from_User_ID_Specification, AddClaimAssigneeGroupSpecification body, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (assignmentID == null)
                throw new System.ArgumentNullException("assignmentID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/assignments/{assignmentID}/assign-group");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{assignmentID}", System.Uri.EscapeDataString(ConvertToString(assignmentID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ClaimAssignment>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Assign the recommended user or company based on repair options rules</summary>
        /// <param name="claimID">The globally unique identifier of the claim for which to add the user or company based on repair options rules.</param>
        /// <param name="assignmentID">The identifier of the claim assignment. This is a mandatory parameter for the assignee of a claim.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications of the assignment to create.</param>
        /// <returns>Returns the created assignment.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ClaimAssignment> AssignmentAddClaimAssigneeRepairOptionsAsync(string claimID, int assignmentID, string from_User_ID_Specification, AddClaimAssigneeRepairOptionsSpecification body)
        {
            return AssignmentAddClaimAssigneeRepairOptionsAsync(claimID, assignmentID, from_User_ID_Specification, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Assign the recommended user or company based on repair options rules</summary>
        /// <param name="claimID">The globally unique identifier of the claim for which to add the user or company based on repair options rules.</param>
        /// <param name="assignmentID">The identifier of the claim assignment. This is a mandatory parameter for the assignee of a claim.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications of the assignment to create.</param>
        /// <returns>Returns the created assignment.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ClaimAssignment> AssignmentAddClaimAssigneeRepairOptionsAsync(string claimID, int assignmentID, string from_User_ID_Specification, AddClaimAssigneeRepairOptionsSpecification body, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (assignmentID == null)
                throw new System.ArgumentNullException("assignmentID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/assignments/{assignmentID}/assign-repair-options");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{assignmentID}", System.Uri.EscapeDataString(ConvertToString(assignmentID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ClaimAssignment>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Conflict - The operation is temporarily not allowed because a user has ownership of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Assign the recommended user to a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim to which to add the user.</param>
        /// <param name="assignmentID">The identifier of the claim assignment.
        /// This is a mandatory parameter for the assignee of a claim.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications for the assignment.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ClaimAssignment> AssignmentAddClaimAssigneeUserGroupAsync(string claimID, int assignmentID, string from_User_ID_Specification, AddClaimAssigneeUserGroupSpecification body)
        {
            return AssignmentAddClaimAssigneeUserGroupAsync(claimID, assignmentID, from_User_ID_Specification, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Assign the recommended user to a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim to which to add the user.</param>
        /// <param name="assignmentID">The identifier of the claim assignment.
        /// This is a mandatory parameter for the assignee of a claim.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications for the assignment.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ClaimAssignment> AssignmentAddClaimAssigneeUserGroupAsync(string claimID, int assignmentID, string from_User_ID_Specification, AddClaimAssigneeUserGroupSpecification body, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (assignmentID == null)
                throw new System.ArgumentNullException("assignmentID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/assignments/{assignmentID}/assign-group-internal");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{assignmentID}", System.Uri.EscapeDataString(ConvertToString(assignmentID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ClaimAssignment>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Assign a user to a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim to which to add the user.</param>
        /// <param name="assignmentID">The identifier of the claim assignment. This is a mandatory parameter for the assignee of a claim.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications of the assignment to create.
        /// 
        /// Use AssigneeUserIDSpecification to specify the user to who the claim will be assigned.</param>
        /// <returns>Returns the created assignment.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ClaimAssignment> AssignmentAddClaimInternalAssigneeAsync(string claimID, int assignmentID, string from_User_ID_Specification, AddClaimInternalAssigneeSpecification body)
        {
            return AssignmentAddClaimInternalAssigneeAsync(claimID, assignmentID, from_User_ID_Specification, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Assign a user to a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim to which to add the user.</param>
        /// <param name="assignmentID">The identifier of the claim assignment. This is a mandatory parameter for the assignee of a claim.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications of the assignment to create.
        /// 
        /// Use AssigneeUserIDSpecification to specify the user to who the claim will be assigned.</param>
        /// <returns>Returns the created assignment.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ClaimAssignment> AssignmentAddClaimInternalAssigneeAsync(string claimID, int assignmentID, string from_User_ID_Specification, AddClaimInternalAssigneeSpecification body, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (assignmentID == null)
                throw new System.ArgumentNullException("assignmentID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/assignments/{assignmentID}/assign-internal");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{assignmentID}", System.Uri.EscapeDataString(ConvertToString(assignmentID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ClaimAssignment>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update the status of an assignment</summary>
        /// <param name="claimID">The globally unique identifier of the claim in which to retrieve the assignment.</param>
        /// <param name="assignmentID">The identifier of the assignment for which to change the status.</param>
        /// <param name="from_User_ID_Specification">The user responsible for updating the assignment status. His name will appear in the claim journal.
        /// 
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications of the new assignment status.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task AssignmentSetClaimAssignmentStatusAsync(string claimID, int assignmentID, string from_User_ID_Specification, SetClaimAssignmentStatusSpecification body)
        {
            return AssignmentSetClaimAssignmentStatusAsync(claimID, assignmentID, from_User_ID_Specification, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update the status of an assignment</summary>
        /// <param name="claimID">The globally unique identifier of the claim in which to retrieve the assignment.</param>
        /// <param name="assignmentID">The identifier of the assignment for which to change the status.</param>
        /// <param name="from_User_ID_Specification">The user responsible for updating the assignment status. His name will appear in the claim journal.
        /// 
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications of the new assignment status.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task AssignmentSetClaimAssignmentStatusAsync(string claimID, int assignmentID, string from_User_ID_Specification, SetClaimAssignmentStatusSpecification body, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (assignmentID == null)
                throw new System.ArgumentNullException("assignmentID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/assignments/{assignmentID}/update-status");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{assignmentID}", System.Uri.EscapeDataString(ConvertToString(assignmentID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Sets the customs fields values of an assignment</summary>
        /// <param name="claimID">The globally unique identifier of the claim to which to add the user.</param>
        /// <param name="assignmentID">The identifier of the claim assignment.
        /// This is a mandatory parameter for the assignee of a claim.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications of the custom fields to be set.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task AssignmentSetClaimAssignmentCustomFieldsAsync(string claimID, int assignmentID, string from_User_ID_Specification, System.Collections.Generic.IEnumerable<CustomField> body)
        {
            return AssignmentSetClaimAssignmentCustomFieldsAsync(claimID, assignmentID, from_User_ID_Specification, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Sets the customs fields values of an assignment</summary>
        /// <param name="claimID">The globally unique identifier of the claim to which to add the user.</param>
        /// <param name="assignmentID">The identifier of the claim assignment.
        /// This is a mandatory parameter for the assignee of a claim.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications of the custom fields to be set.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task AssignmentSetClaimAssignmentCustomFieldsAsync(string claimID, int assignmentID, string from_User_ID_Specification, System.Collections.Generic.IEnumerable<CustomField> body, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (assignmentID == null)
                throw new System.ArgumentNullException("assignmentID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/assignments/{assignmentID}/update-custom-fields");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{assignmentID}", System.Uri.EscapeDataString(ConvertToString(assignmentID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Set the status of an assignment to Inspection Scheduled</summary>
        /// <param name="claimID">The globally unique identifier of the claim in which to retrieve the assignment.</param>
        /// <param name="assignmentID">The identifier of the assignment for which to change the status to inspection scheduled.</param>
        /// <param name="from_User_ID_Specification">The identifier of the user who’s changing the assignment status. His name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications of the new assignment status.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task AssignmentSetClaimAssignmentStatusInspectionScheduledAsync(string claimID, int assignmentID, string from_User_ID_Specification, SetClaimAssignmentStatusInspectionScheduledSpecification body)
        {
            return AssignmentSetClaimAssignmentStatusInspectionScheduledAsync(claimID, assignmentID, from_User_ID_Specification, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Set the status of an assignment to Inspection Scheduled</summary>
        /// <param name="claimID">The globally unique identifier of the claim in which to retrieve the assignment.</param>
        /// <param name="assignmentID">The identifier of the assignment for which to change the status to inspection scheduled.</param>
        /// <param name="from_User_ID_Specification">The identifier of the user who’s changing the assignment status. His name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications of the new assignment status.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task AssignmentSetClaimAssignmentStatusInspectionScheduledAsync(string claimID, int assignmentID, string from_User_ID_Specification, SetClaimAssignmentStatusInspectionScheduledSpecification body, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (assignmentID == null)
                throw new System.ArgumentNullException("assignmentID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/assignments/{assignmentID}/update-inspection-scheduled-status");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{assignmentID}", System.Uri.EscapeDataString(ConvertToString(assignmentID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Set the status of an assignment to Job Scheduled</summary>
        /// <param name="claimID">The globally unique identifier of the claim in which to retrieve the assignment.</param>
        /// <param name="assignmentID">The identifier of the assignment for which to change the status to job scheduled.</param>
        /// <param name="from_User_ID_Specification">The identifier of the user who’s changing the assignment status. His name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications of the new assignment status.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task AssignmentSetClaimAssignmentStatusJobScheduledAsync(string claimID, int assignmentID, string from_User_ID_Specification, SetClaimAssignmentStatusJobScheduledSpecification body)
        {
            return AssignmentSetClaimAssignmentStatusJobScheduledAsync(claimID, assignmentID, from_User_ID_Specification, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Set the status of an assignment to Job Scheduled</summary>
        /// <param name="claimID">The globally unique identifier of the claim in which to retrieve the assignment.</param>
        /// <param name="assignmentID">The identifier of the assignment for which to change the status to job scheduled.</param>
        /// <param name="from_User_ID_Specification">The identifier of the user who’s changing the assignment status. His name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications of the new assignment status.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task AssignmentSetClaimAssignmentStatusJobScheduledAsync(string claimID, int assignmentID, string from_User_ID_Specification, SetClaimAssignmentStatusJobScheduledSpecification body, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (assignmentID == null)
                throw new System.ArgumentNullException("assignmentID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/assignments/{assignmentID}/update-job-scheduled-status");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{assignmentID}", System.Uri.EscapeDataString(ConvertToString(assignmentID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Request an authentication token</summary>
        /// <returns>OK - Returns the authentication token</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AuthenticationResponseDto> AuthenticationAuthenticateAsync(string authorization, Body body)
        {
            return AuthenticationAuthenticateAsync(authorization, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Request an authentication token</summary>
        /// <returns>OK - Returns the authentication token</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AuthenticationResponseDto> AuthenticationAuthenticateAsync(string authorization, Body body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/authentication/token");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var dictionary_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, string>>(json_, _settings.Value);
                    var content_ = new System.Net.Http.FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/x-www-form-urlencoded");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthenticationResponseDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthenticationErrorResponseDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<AuthenticationErrorResponseDto>("Bad Request - The client could not be authenticated", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized - Invalid authorization scheme", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the summary of a claim</summary>
        /// <param name="claimID">The identifier of the claim from which to retrieve the summary.</param>
        /// <returns>Returns the requested claim summary.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Claim> ClaimGetClaimAsync(string claimID)
        {
            return ClaimGetClaimAsync(claimID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the summary of a claim</summary>
        /// <param name="claimID">The identifier of the claim from which to retrieve the summary.</param>
        /// <returns>Returns the requested claim summary.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Claim> ClaimGetClaimAsync(string claimID, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Claim>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the details of a claim.</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the details.</param>
        /// <param name="forms">True if the form summaries should be fetched and included in the response.</param>
        /// <param name="orphanFormsOnly">True if the forms fetched are not associated with any assignments.</param>
        /// <param name="handwrittenNotes">True if the handwritten notes should be fetched and included in the response.</param>
        /// <param name="orphanHandwrittenNotesOnly">True if the handwritten notes fetched are not associated to any assignments.</param>
        /// <param name="externalDocuments">True if the attached external documents should be fetched and included in the response.</param>
        /// <param name="orphanExternalDocumentsOnly">True if the external documents fetched are not associated with any assignments.</param>
        /// <param name="diagrams">True if the diagram summaries should be fetched and included in the response.</param>
        /// <param name="orphanDiagramsOnly">True if the diagrams fetched are not associated with any assignments.</param>
        /// <param name="estimates">True if the estimate summaries should be fetched and included in the response.</param>
        /// <param name="mergeEstimates">True if the supplements/revisions should be merged with the root estimate.</param>
        /// <param name="photoPages">True if the photo pages and photo summaries should be fetched and included in the response.</param>
        /// <param name="orphanPhotoPagesOnly">True if the photo pages fetched are not associated with any assignments.</param>
        /// <param name="voiceAnnotations">True if the voice annotation summaries should be fetched and included in the response.</param>
        /// <param name="journalEntries">True if the journal entries should be fetched and included in the response.</param>
        /// <param name="uploadStatus">True if the claim upload status should be fetched and included in the response.</param>
        /// <param name="payments">True if the claim payments should be fetched and included in the response.</param>
        /// <returns>Returns the requested claim details.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetClaimDetails> ClaimGetClaimDetailsAsync(string claimID, bool? forms, bool? orphanFormsOnly, bool? handwrittenNotes, bool? orphanHandwrittenNotesOnly, bool? externalDocuments, bool? orphanExternalDocumentsOnly, bool? diagrams, bool? orphanDiagramsOnly, bool? estimates, bool? mergeEstimates, bool? photoPages, bool? orphanPhotoPagesOnly, bool? voiceAnnotations, bool? journalEntries, bool? uploadStatus, bool? payments)
        {
            return ClaimGetClaimDetailsAsync(claimID, forms, orphanFormsOnly, handwrittenNotes, orphanHandwrittenNotesOnly, externalDocuments, orphanExternalDocumentsOnly, diagrams, orphanDiagramsOnly, estimates, mergeEstimates, photoPages, orphanPhotoPagesOnly, voiceAnnotations, journalEntries, uploadStatus, payments, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the details of a claim.</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the details.</param>
        /// <param name="forms">True if the form summaries should be fetched and included in the response.</param>
        /// <param name="orphanFormsOnly">True if the forms fetched are not associated with any assignments.</param>
        /// <param name="handwrittenNotes">True if the handwritten notes should be fetched and included in the response.</param>
        /// <param name="orphanHandwrittenNotesOnly">True if the handwritten notes fetched are not associated to any assignments.</param>
        /// <param name="externalDocuments">True if the attached external documents should be fetched and included in the response.</param>
        /// <param name="orphanExternalDocumentsOnly">True if the external documents fetched are not associated with any assignments.</param>
        /// <param name="diagrams">True if the diagram summaries should be fetched and included in the response.</param>
        /// <param name="orphanDiagramsOnly">True if the diagrams fetched are not associated with any assignments.</param>
        /// <param name="estimates">True if the estimate summaries should be fetched and included in the response.</param>
        /// <param name="mergeEstimates">True if the supplements/revisions should be merged with the root estimate.</param>
        /// <param name="photoPages">True if the photo pages and photo summaries should be fetched and included in the response.</param>
        /// <param name="orphanPhotoPagesOnly">True if the photo pages fetched are not associated with any assignments.</param>
        /// <param name="voiceAnnotations">True if the voice annotation summaries should be fetched and included in the response.</param>
        /// <param name="journalEntries">True if the journal entries should be fetched and included in the response.</param>
        /// <param name="uploadStatus">True if the claim upload status should be fetched and included in the response.</param>
        /// <param name="payments">True if the claim payments should be fetched and included in the response.</param>
        /// <returns>Returns the requested claim details.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetClaimDetails> ClaimGetClaimDetailsAsync(string claimID, bool? forms, bool? orphanFormsOnly, bool? handwrittenNotes, bool? orphanHandwrittenNotesOnly, bool? externalDocuments, bool? orphanExternalDocumentsOnly, bool? diagrams, bool? orphanDiagramsOnly, bool? estimates, bool? mergeEstimates, bool? photoPages, bool? orphanPhotoPagesOnly, bool? voiceAnnotations, bool? journalEntries, bool? uploadStatus, bool? payments, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/details?");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            if (forms != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("forms") + "=").Append(System.Uri.EscapeDataString(ConvertToString(forms, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orphanFormsOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orphanFormsOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orphanFormsOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (handwrittenNotes != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("handwrittenNotes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(handwrittenNotes, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orphanHandwrittenNotesOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orphanHandwrittenNotesOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orphanHandwrittenNotesOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (externalDocuments != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("externalDocuments") + "=").Append(System.Uri.EscapeDataString(ConvertToString(externalDocuments, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orphanExternalDocumentsOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orphanExternalDocumentsOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orphanExternalDocumentsOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (diagrams != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("diagrams") + "=").Append(System.Uri.EscapeDataString(ConvertToString(diagrams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orphanDiagramsOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orphanDiagramsOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orphanDiagramsOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (estimates != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("estimates") + "=").Append(System.Uri.EscapeDataString(ConvertToString(estimates, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mergeEstimates != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mergeEstimates") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mergeEstimates, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (photoPages != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("photoPages") + "=").Append(System.Uri.EscapeDataString(ConvertToString(photoPages, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orphanPhotoPagesOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orphanPhotoPagesOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orphanPhotoPagesOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (voiceAnnotations != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("voiceAnnotations") + "=").Append(System.Uri.EscapeDataString(ConvertToString(voiceAnnotations, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (journalEntries != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("journalEntries") + "=").Append(System.Uri.EscapeDataString(ConvertToString(journalEntries, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (uploadStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("uploadStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(uploadStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (payments != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("payments") + "=").Append(System.Uri.EscapeDataString(ConvertToString(payments, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetClaimDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Add a journal entry to a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim for which to add the journal entry.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The journal entry information.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ClaimAddClaimJournalEntryAsync(string claimID, string from_User_ID_Specification, JournalEntrySpecification body)
        {
            return ClaimAddClaimJournalEntryAsync(claimID, from_User_ID_Specification, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add a journal entry to a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim for which to add the journal entry.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The journal entry information.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ClaimAddClaimJournalEntryAsync(string claimID, string from_User_ID_Specification, JournalEntrySpecification body, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/journal-entries");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the status of a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to get the status.</param>
        /// <returns>Returns the claim status.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ClaimStatus> ClaimGetClaimStatusAsync(string claimID)
        {
            return ClaimGetClaimStatusAsync(claimID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the status of a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to get the status.</param>
        /// <returns>Returns the claim status.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ClaimStatus> ClaimGetClaimStatusAsync(string claimID, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/claim-status");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ClaimStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update the status of a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim for which to change the status.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The new status for the claim.</param>
        /// <returns>Returns the claim status.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ClaimStatus> ClaimSetClaimStatusAsync(string claimID, string from_User_ID_Specification, ClaimStatus? body)
        {
            return ClaimSetClaimStatusAsync(claimID, from_User_ID_Specification, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update the status of a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim for which to change the status.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The new status for the claim.</param>
        /// <returns>Returns the claim status.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ClaimStatus> ClaimSetClaimStatusAsync(string claimID, string from_User_ID_Specification, ClaimStatus? body, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/claim-status");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ClaimStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create a new claim</summary>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user.
        /// 
        /// If no user is specified or if it's invalid, Symbility will use the first administrator it finds in the originator
        /// company as the claim creator.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications of the claim to create.</param>
        /// <returns>Returns the created claim.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Claim> ClaimCreateClaimAsync(string from_User_ID_Specification, ClaimSpecification body)
        {
            return ClaimCreateClaimAsync(from_User_ID_Specification, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a new claim</summary>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user.
        /// 
        /// If no user is specified or if it's invalid, Symbility will use the first administrator it finds in the originator
        /// company as the claim creator.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications of the claim to create.</param>
        /// <returns>Returns the created claim.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Claim> ClaimCreateClaimAsync(string from_User_ID_Specification, ClaimSpecification body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Claim>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Remove a user from a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to unassign the company.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The identifier of the user to remove from the claim.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ClaimRemoveClaimUserAsync(string claimID, string from_User_ID_Specification, UserIDSpecification body)
        {
            return ClaimRemoveClaimUserAsync(claimID, from_User_ID_Specification, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Remove a user from a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to unassign the company.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The identifier of the user to remove from the claim.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ClaimRemoveClaimUserAsync(string claimID, string from_User_ID_Specification, UserIDSpecification body, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/remove-user");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim to update.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications of the claim fields to update.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ClaimUpdateClaimAsync(string claimID, string from_User_ID_Specification, ClaimUpdateSpecification body)
        {
            return ClaimUpdateClaimAsync(claimID, from_User_ID_Specification, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim to update.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications of the claim fields to update.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ClaimUpdateClaimAsync(string claimID, string from_User_ID_Specification, ClaimUpdateSpecification body, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/update");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Add coverages to a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim for which to add the coverages.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The list of coverages to add.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ClaimAddClaimCoveragesAsync(string claimID, string from_User_ID_Specification, System.Collections.Generic.IEnumerable<ClaimCoverage> body)
        {
            return ClaimAddClaimCoveragesAsync(claimID, from_User_ID_Specification, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add coverages to a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim for which to add the coverages.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The list of coverages to add.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ClaimAddClaimCoveragesAsync(string claimID, string from_User_ID_Specification, System.Collections.Generic.IEnumerable<ClaimCoverage> body, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/coverages");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get claim coverages</summary>
        /// <param name="claimID">The globally unique identifier of the claim for which to retrieve the coverages.</param>
        /// <returns>Returns the requested claim coverages.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClaimCoverage>> ClaimGetClaimCoveragesAsync(string claimID)
        {
            return ClaimGetClaimCoveragesAsync(claimID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get claim coverages</summary>
        /// <param name="claimID">The globally unique identifier of the claim for which to retrieve the coverages.</param>
        /// <returns>Returns the requested claim coverages.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClaimCoverage>> ClaimGetClaimCoveragesAsync(string claimID, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/coverages");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ClaimCoverage>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Create a new estimate</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to unassign the company.</param>
        /// <param name="assignmentID">The identifier of the assignment to which to add the estimate to.  This parameter is mandatory.</param>
        /// <param name="from_User_ID_Specification">The user responsible for creating the estimate.  This information is not mandatory.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications of the estimate to create.
        ///             
        /// Use EstimateSpecification to specify the estimate information.
        /// 
        /// Use CustomDiagramSpecification[] to specify the information of custom diagrams.</param>
        /// <returns>Returns the created claim and diagrams (if any).</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CreateClaimEstimate> ClaimCreateClaimEstimateAsync(string claimID, int assignmentID, string from_User_ID_Specification, CreateClaimEstimateSpecification body)
        {
            return ClaimCreateClaimEstimateAsync(claimID, assignmentID, from_User_ID_Specification, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a new estimate</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to unassign the company.</param>
        /// <param name="assignmentID">The identifier of the assignment to which to add the estimate to.  This parameter is mandatory.</param>
        /// <param name="from_User_ID_Specification">The user responsible for creating the estimate.  This information is not mandatory.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications of the estimate to create.
        ///             
        /// Use EstimateSpecification to specify the estimate information.
        /// 
        /// Use CustomDiagramSpecification[] to specify the information of custom diagrams.</param>
        /// <returns>Returns the created claim and diagrams (if any).</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CreateClaimEstimate> ClaimCreateClaimEstimateAsync(string claimID, int assignmentID, string from_User_ID_Specification, CreateClaimEstimateSpecification body, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (assignmentID == null)
                throw new System.ArgumentNullException("assignmentID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/estimates?");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("assignmentID") + "=").Append(System.Uri.EscapeDataString(ConvertToString(assignmentID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateClaimEstimate>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Import a diagram into a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim to which to import the diagram.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The diagram import information.</param>
        /// <returns>Returns the imported diagrams.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Diagram>> DiagramImportClaimDiagramAsync(string claimID, string from_User_ID_Specification, AddDiagamImportSpecification body)
        {
            return DiagramImportClaimDiagramAsync(claimID, from_User_ID_Specification, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Import a diagram into a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim to which to import the diagram.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The diagram import information.</param>
        /// <returns>Returns the imported diagrams.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Diagram>> DiagramImportClaimDiagramAsync(string claimID, string from_User_ID_Specification, AddDiagamImportSpecification body, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/diagrams");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Diagram>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a diagram</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the diagram.</param>
        /// <param name="diagramID">The identifier of the diagram to retrieve.</param>
        /// <returns>Returns the requested diagram without bytes.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Diagram> DiagramGetClaimDiagramAsync(string claimID, int diagramID)
        {
            return DiagramGetClaimDiagramAsync(claimID, diagramID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a diagram</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the diagram.</param>
        /// <param name="diagramID">The identifier of the diagram to retrieve.</param>
        /// <returns>Returns the requested diagram without bytes.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Diagram> DiagramGetClaimDiagramAsync(string claimID, int diagramID, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (diagramID == null)
                throw new System.ArgumentNullException("diagramID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/diagrams/{diagramID}");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{diagramID}", System.Uri.EscapeDataString(ConvertToString(diagramID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Diagram>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a diagram as PNG</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the diagram.</param>
        /// <param name="diagramID">The identifier of the diagram to retrieve.</param>
        /// <param name="dimensions">True to display the dimensions in the diagram.</param>
        /// <returns>Returns the requested diagram bytes.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FileResponse> DiagramGetClaimDiagramBytesAsync(string claimID, int diagramID, bool? dimensions)
        {
            return DiagramGetClaimDiagramBytesAsync(claimID, diagramID, dimensions, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a diagram as PNG</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the diagram.</param>
        /// <param name="diagramID">The identifier of the diagram to retrieve.</param>
        /// <param name="dimensions">True to display the dimensions in the diagram.</param>
        /// <returns>Returns the requested diagram bytes.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<FileResponse> DiagramGetClaimDiagramBytesAsync(string claimID, int diagramID, bool? dimensions, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (diagramID == null)
                throw new System.ArgumentNullException("diagramID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/diagrams/{diagramID}/image?");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{diagramID}", System.Uri.EscapeDataString(ConvertToString(diagramID, System.Globalization.CultureInfo.InvariantCulture)));
            if (dimensions != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dimensions") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dimensions, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("image/png"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_); 
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal Server Error - Unexpected error.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get an estimate</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the estimate.</param>
        /// <param name="estimateID">The identifier of the estimate to retrieve.</param>
        /// <param name="mergedView">True if the supplements/revisions should be merged with the root estimate.</param>
        /// <returns>Returns the requested estimate with estimate items.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Estimate> EstimateGetClaimEstimateAsync(string claimID, int estimateID, bool? mergedView)
        {
            return EstimateGetClaimEstimateAsync(claimID, estimateID, mergedView, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get an estimate</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the estimate.</param>
        /// <param name="estimateID">The identifier of the estimate to retrieve.</param>
        /// <param name="mergedView">True if the supplements/revisions should be merged with the root estimate.</param>
        /// <returns>Returns the requested estimate with estimate items.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Estimate> EstimateGetClaimEstimateAsync(string claimID, int estimateID, bool? mergedView, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (estimateID == null)
                throw new System.ArgumentNullException("estimateID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/estimates/{estimateID}?");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{estimateID}", System.Uri.EscapeDataString(ConvertToString(estimateID, System.Globalization.CultureInfo.InvariantCulture)));
            if (mergedView != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mergedView") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mergedView, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Estimate>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update an estimate</summary>
        /// <param name="claimID">The globally unique identifier of the claim for which to change the status.</param>
        /// <param name="estimateID">The identifier of the estimate.</param>
        /// <param name="body">The specifications of the estimate to update.</param>
        /// <returns>Returns the requested estimate with estimate items.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UpdateClaimEstimate> EstimateUpdateClaimEstimateAsync(string claimID, int estimateID, string from_User_ID_Specification, UpdateClaimEstimateSpecification body)
        {
            return EstimateUpdateClaimEstimateAsync(claimID, estimateID, from_User_ID_Specification, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update an estimate</summary>
        /// <param name="claimID">The globally unique identifier of the claim for which to change the status.</param>
        /// <param name="estimateID">The identifier of the estimate.</param>
        /// <param name="body">The specifications of the estimate to update.</param>
        /// <returns>Returns the requested estimate with estimate items.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<UpdateClaimEstimate> EstimateUpdateClaimEstimateAsync(string claimID, int estimateID, string from_User_ID_Specification, UpdateClaimEstimateSpecification body, System.Threading.CancellationToken cancellationToken)
        {
            if (estimateID == null)
                throw new System.ArgumentNullException("estimateID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/estimates/{estimateID}/update");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{estimateID}", System.Uri.EscapeDataString(ConvertToString(estimateID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateClaimEstimate>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update the status of an estimate</summary>
        /// <param name="claimID">The globally unique identifier of the claim for which to change the status.</param>
        /// <param name="estimateID">The identifier of the estimate.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The new status for the estimate.</param>
        /// <returns>Returns the modified estimate status.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EstimateStatus> EstimateSetEstimateStatusAsync(string claimID, int estimateID, string from_User_ID_Specification, EstimateStatus? body)
        {
            return EstimateSetEstimateStatusAsync(claimID, estimateID, from_User_ID_Specification, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update the status of an estimate</summary>
        /// <param name="claimID">The globally unique identifier of the claim for which to change the status.</param>
        /// <param name="estimateID">The identifier of the estimate.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The new status for the estimate.</param>
        /// <returns>Returns the modified estimate status.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EstimateStatus> EstimateSetEstimateStatusAsync(string claimID, int estimateID, string from_User_ID_Specification, EstimateStatus? body, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (estimateID == null)
                throw new System.ArgumentNullException("estimateID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/estimates/{estimateID}/estimate-status");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{estimateID}", System.Uri.EscapeDataString(ConvertToString(estimateID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EstimateStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Finalize an estimate</summary>
        /// <param name="claimID">The globally unique identifier of the claim for which to change the status.</param>
        /// <param name="estimateID">The identifier of the estimate.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The estimate finalization information.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task EstimateSetEstimateFinalizationAsync(string claimID, int estimateID, string from_User_ID_Specification, SetEstimateFinalizationSpecification body)
        {
            return EstimateSetEstimateFinalizationAsync(claimID, estimateID, from_User_ID_Specification, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Finalize an estimate</summary>
        /// <param name="claimID">The globally unique identifier of the claim for which to change the status.</param>
        /// <param name="estimateID">The identifier of the estimate.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The estimate finalization information.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task EstimateSetEstimateFinalizationAsync(string claimID, int estimateID, string from_User_ID_Specification, SetEstimateFinalizationSpecification body, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (estimateID == null)
                throw new System.ArgumentNullException("estimateID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/estimates/{estimateID}/finalize");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{estimateID}", System.Uri.EscapeDataString(ConvertToString(estimateID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Attach an external document to a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim to which the document must be attached.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The external document information, including name and the actual content of the document.</param>
        /// <returns>Returns the created external document without bytes.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ExternalDocument> ExternalDocumentAddClaimExternalDocumentAsync(string claimID, string from_User_ID_Specification, AddClaimExternalDocumentSpecification body)
        {
            return ExternalDocumentAddClaimExternalDocumentAsync(claimID, from_User_ID_Specification, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Attach an external document to a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim to which the document must be attached.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The external document information, including name and the actual content of the document.</param>
        /// <returns>Returns the created external document without bytes.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ExternalDocument> ExternalDocumentAddClaimExternalDocumentAsync(string claimID, string from_User_ID_Specification, AddClaimExternalDocumentSpecification body, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/documents");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ExternalDocument>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get an external document</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the external document.</param>
        /// <param name="documentID">The identifier of the external document to retrieve.</param>
        /// <returns>Returns the requested external document without bytes.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ExternalDocument> ExternalDocumentGetClaimExternalDocumentAsync(string claimID, int documentID)
        {
            return ExternalDocumentGetClaimExternalDocumentAsync(claimID, documentID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get an external document</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the external document.</param>
        /// <param name="documentID">The identifier of the external document to retrieve.</param>
        /// <returns>Returns the requested external document without bytes.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ExternalDocument> ExternalDocumentGetClaimExternalDocumentAsync(string claimID, int documentID, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (documentID == null)
                throw new System.ArgumentNullException("documentID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/documents/{documentID}");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{documentID}", System.Uri.EscapeDataString(ConvertToString(documentID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ExternalDocument>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get an external document file</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the external document.</param>
        /// <param name="documentID">The identifier of the external document to retrieve.</param>
        /// <returns>Returns the requested external document bytes.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FileResponse> ExternalDocumentGetClaimExternalDocumentBytesAsync(string claimID, int documentID)
        {
            return ExternalDocumentGetClaimExternalDocumentBytesAsync(claimID, documentID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get an external document file</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the external document.</param>
        /// <param name="documentID">The identifier of the external document to retrieve.</param>
        /// <returns>Returns the requested external document bytes.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<FileResponse> ExternalDocumentGetClaimExternalDocumentBytesAsync(string claimID, int documentID, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (documentID == null)
                throw new System.ArgumentNullException("documentID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/documents/{documentID}/content");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{documentID}", System.Uri.EscapeDataString(ConvertToString(documentID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_); 
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal Server Error - Unexpected error.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a form</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the form.</param>
        /// <param name="formID">The identifier of the form to retrieve.</param>
        /// <returns>Returns the requested form without bytes.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Form> FormGetClaimFormAsync(string claimID, int formID)
        {
            return FormGetClaimFormAsync(claimID, formID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a form</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the form.</param>
        /// <param name="formID">The identifier of the form to retrieve.</param>
        /// <returns>Returns the requested form without bytes.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Form> FormGetClaimFormAsync(string claimID, int formID, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (formID == null)
                throw new System.ArgumentNullException("formID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/forms/{formID}");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{formID}", System.Uri.EscapeDataString(ConvertToString(formID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Form>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a form as PDF</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the form.</param>
        /// <param name="formID">The identifier of the form to retrieve.</param>
        /// <returns>Returns the requested form bytes.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FileResponse> FormGetClaimFormBytesAsync(string claimID, int formID)
        {
            return FormGetClaimFormBytesAsync(claimID, formID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a form as PDF</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the form.</param>
        /// <param name="formID">The identifier of the form to retrieve.</param>
        /// <returns>Returns the requested form bytes.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<FileResponse> FormGetClaimFormBytesAsync(string claimID, int formID, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (formID == null)
                throw new System.ArgumentNullException("formID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/forms/{formID}/document");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{formID}", System.Uri.EscapeDataString(ConvertToString(formID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/pdf"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_); 
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal Server Error - Unexpected error.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a handwritten note</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the diagram.</param>
        /// <param name="handwrittenNoteID">The identifier of the handwritten note to retrieve.</param>
        /// <returns>Returns the requested handwritten note without bytes.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<HandwrittenNote> HandwrittenNoteGetClaimHandwrittenNoteAsync(string claimID, int handwrittenNoteID)
        {
            return HandwrittenNoteGetClaimHandwrittenNoteAsync(claimID, handwrittenNoteID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a handwritten note</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the diagram.</param>
        /// <param name="handwrittenNoteID">The identifier of the handwritten note to retrieve.</param>
        /// <returns>Returns the requested handwritten note without bytes.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HandwrittenNote> HandwrittenNoteGetClaimHandwrittenNoteAsync(string claimID, int handwrittenNoteID, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (handwrittenNoteID == null)
                throw new System.ArgumentNullException("handwrittenNoteID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/handwritten-notes/{handwrittenNoteID}");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{handwrittenNoteID}", System.Uri.EscapeDataString(ConvertToString(handwrittenNoteID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HandwrittenNote>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a handwritten note as PDF</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the diagram.</param>
        /// <param name="handwrittenNoteID">The identifier of the handwritten note to retrieve.</param>
        /// <returns>Returns the requested handwritten note bytes.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FileResponse> HandwrittenNoteGetClaimHandwrittenNoteBytesAsync(string claimID, int handwrittenNoteID)
        {
            return HandwrittenNoteGetClaimHandwrittenNoteBytesAsync(claimID, handwrittenNoteID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a handwritten note as PDF</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the diagram.</param>
        /// <param name="handwrittenNoteID">The identifier of the handwritten note to retrieve.</param>
        /// <returns>Returns the requested handwritten note bytes.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<FileResponse> HandwrittenNoteGetClaimHandwrittenNoteBytesAsync(string claimID, int handwrittenNoteID, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (handwrittenNoteID == null)
                throw new System.ArgumentNullException("handwrittenNoteID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/handwritten-notes/{handwrittenNoteID}/document");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{handwrittenNoteID}", System.Uri.EscapeDataString(ConvertToString(handwrittenNoteID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/pdf"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_); 
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal Server Error - Unexpected error.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update the status of a payment</summary>
        /// <param name="claimID">The globally unique identifier of the claim in which to retrieve the payment.</param>
        /// <param name="paymentID">The identifier of the payment for which to change the status.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The new status for the payment.</param>
        /// <returns>Returns the modified payment status.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ClaimPaymentStatus> PaymentSetClaimPaymentStatusAsync(string claimID, int paymentID, string from_User_ID_Specification, ClaimPaymentStatus? body)
        {
            return PaymentSetClaimPaymentStatusAsync(claimID, paymentID, from_User_ID_Specification, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update the status of a payment</summary>
        /// <param name="claimID">The globally unique identifier of the claim in which to retrieve the payment.</param>
        /// <param name="paymentID">The identifier of the payment for which to change the status.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The new status for the payment.</param>
        /// <returns>Returns the modified payment status.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ClaimPaymentStatus> PaymentSetClaimPaymentStatusAsync(string claimID, int paymentID, string from_User_ID_Specification, ClaimPaymentStatus? body, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (paymentID == null)
                throw new System.ArgumentNullException("paymentID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/payments/{paymentID}/payment-status");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{paymentID}", System.Uri.EscapeDataString(ConvertToString(paymentID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ClaimPaymentStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Conflict - The operation is temporarily not allowed because a user has ownership of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Add a photo to a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim for which to add the photos.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be 
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications of the photo to create.</param>
        /// <returns>Returns the created photo without bytes.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Photo> PhotoAddClaimPhotoAsync(string claimID, string from_User_ID_Specification, AddClaimPhotoSpecification body)
        {
            return PhotoAddClaimPhotoAsync(claimID, from_User_ID_Specification, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add a photo to a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim for which to add the photos.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be 
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications of the photo to create.</param>
        /// <returns>Returns the created photo without bytes.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Photo> PhotoAddClaimPhotoAsync(string claimID, string from_User_ID_Specification, AddClaimPhotoSpecification body, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/photos");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Photo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a photo</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the photo.</param>
        /// <param name="photoID">The identifier of the photo to retrieve.</param>
        /// <returns>Returns the requested photo without bytes.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Photo> PhotoGetClaimPhotoAsync(string claimID, int photoID)
        {
            return PhotoGetClaimPhotoAsync(claimID, photoID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a photo</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the photo.</param>
        /// <param name="photoID">The identifier of the photo to retrieve.</param>
        /// <returns>Returns the requested photo without bytes.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Photo> PhotoGetClaimPhotoAsync(string claimID, int photoID, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (photoID == null)
                throw new System.ArgumentNullException("photoID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/photos/{photoID}");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{photoID}", System.Uri.EscapeDataString(ConvertToString(photoID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Photo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a photo file</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the photo.</param>
        /// <param name="photoID">The identifier of the photo to retrieve.</param>
        /// <returns>Returns the requested photo bytes.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FileResponse> PhotoGetClaimPhotoBytesAsync(string claimID, int photoID)
        {
            return PhotoGetClaimPhotoBytesAsync(claimID, photoID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a photo file</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the photo.</param>
        /// <param name="photoID">The identifier of the photo to retrieve.</param>
        /// <returns>Returns the requested photo bytes.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<FileResponse> PhotoGetClaimPhotoBytesAsync(string claimID, int photoID, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (photoID == null)
                throw new System.ArgumentNullException("photoID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/photos/{photoID}/image");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{photoID}", System.Uri.EscapeDataString(ConvertToString(photoID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("image/jpeg"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_); 
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal Server Error - Unexpected error.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Add a prefilled questionnaire to a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim to add the questionnaire to.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be 
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The questionnaire information including prefilled answers.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task QuestionnaireAddClaimQuestionnaireAsync(string claimID, string from_User_ID_Specification, AddClaimQuestionnaireSpecification body)
        {
            return QuestionnaireAddClaimQuestionnaireAsync(claimID, from_User_ID_Specification, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add a prefilled questionnaire to a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim to add the questionnaire to.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user, his name will appear in the claim journal.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be 
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The questionnaire information including prefilled answers.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task QuestionnaireAddClaimQuestionnaireAsync(string claimID, string from_User_ID_Specification, AddClaimQuestionnaireSpecification body, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/questionnaires");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Add a task to a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim to which to add a task.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user.
        /// 
        /// If no user is specified or if it's invalid, Symbility will use the first administrator it finds in the originator
        /// company as the task creator.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications of the task to create.</param>
        /// <returns>Returns the created task.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Task> TaskCreateClaimTaskAsync(string claimID, string from_User_ID_Specification, TaskSpecification body)
        {
            return TaskCreateClaimTaskAsync(claimID, from_User_ID_Specification, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add a task to a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim to which to add a task.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user.
        /// 
        /// If no user is specified or if it's invalid, Symbility will use the first administrator it finds in the originator
        /// company as the task creator.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications of the task to create.</param>
        /// <returns>Returns the created task.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Task> TaskCreateClaimTaskAsync(string claimID, string from_User_ID_Specification, TaskSpecification body, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/tasks");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Task>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the list of tasks for a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the tasks.</param>
        /// <returns>Returns the list of tasks for the claim.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> TaskGetClaimTaskListAsync(string claimID)
        {
            return TaskGetClaimTaskListAsync(claimID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the list of tasks for a claim</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the tasks.</param>
        /// <returns>Returns the list of tasks for the claim.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> TaskGetClaimTaskListAsync(string claimID, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/tasks");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Task>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a task</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the task.</param>
        /// <param name="taskID">The identifier of the task to retrieve.</param>
        /// <returns>Returns the requested task.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Task> TaskGetClaimTaskAsync(string claimID, int taskID)
        {
            return TaskGetClaimTaskAsync(claimID, taskID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a task</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the task.</param>
        /// <param name="taskID">The identifier of the task to retrieve.</param>
        /// <returns>Returns the requested task.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Task> TaskGetClaimTaskAsync(string claimID, int taskID, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (taskID == null)
                throw new System.ArgumentNullException("taskID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/tasks/{taskID}");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{taskID}", System.Uri.EscapeDataString(ConvertToString(taskID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Task>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Delete a task</summary>
        /// <param name="claimID">The globally unique identifier of the claim for which the task needs to be deleted.</param>
        /// <param name="taskID">The identifier of the task to delete.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task TaskDeleteClaimTaskAsync(string claimID, int taskID, string from_User_ID_Specification)
        {
            return TaskDeleteClaimTaskAsync(claimID, taskID, from_User_ID_Specification, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a task</summary>
        /// <param name="claimID">The globally unique identifier of the claim for which the task needs to be deleted.</param>
        /// <param name="taskID">The identifier of the task to delete.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task TaskDeleteClaimTaskAsync(string claimID, int taskID, string from_User_ID_Specification, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (taskID == null)
                throw new System.ArgumentNullException("taskID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/tasks/{taskID}");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{taskID}", System.Uri.EscapeDataString(ConvertToString(taskID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Add a task to a claim using a template</summary>
        /// <param name="claimID">The globally unique identifier of the claim to which to add a task.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user.
        /// 
        /// If no user is specified or if it's invalid, Symbility will use the first administrator it finds in the originator
        /// company as the task creator.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The code of the task template.</param>
        /// <returns>Returns the created task.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Task> TaskCreateClaimTaskFromTemplateAsync(string claimID, string from_User_ID_Specification, string body)
        {
            return TaskCreateClaimTaskFromTemplateAsync(claimID, from_User_ID_Specification, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add a task to a claim using a template</summary>
        /// <param name="claimID">The globally unique identifier of the claim to which to add a task.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user.
        /// 
        /// If no user is specified or if it's invalid, Symbility will use the first administrator it finds in the originator
        /// company as the task creator.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The code of the task template.</param>
        /// <returns>Returns the created task.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Task> TaskCreateClaimTaskFromTemplateAsync(string claimID, string from_User_ID_Specification, string body, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/tasks/create-from-template");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Task>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update a task</summary>
        /// <param name="claimID">The globally unique identifier of the claim for which the task needs to be updated.</param>
        /// <param name="taskID">The identifier of the task to update.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications of task fields to update.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task TaskUpdateClaimTaskAsync(string claimID, int taskID, string from_User_ID_Specification, TaskUpdateSpecification body)
        {
            return TaskUpdateClaimTaskAsync(claimID, taskID, from_User_ID_Specification, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update a task</summary>
        /// <param name="claimID">The globally unique identifier of the claim for which the task needs to be updated.</param>
        /// <param name="taskID">The identifier of the task to update.</param>
        /// <param name="from_User_ID_Specification">Perform the operation on behalf of this user.
        /// 
        /// This parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be
        /// considered empty.
        ///             
        /// This parameter is a string parameter and must be specified as: `{ "UserID": "&lt;UserID&gt;", "UserIDType": "&lt;UserIDType&gt;" }`
        /// 
        /// &lt;b&gt;UserID&lt;/b&gt;: The unique user identifier.
        /// 
        /// &lt;b&gt;UserIDType&lt;/b&gt;: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or
        /// (the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).</param>
        /// <param name="body">The specifications of task fields to update.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task TaskUpdateClaimTaskAsync(string claimID, int taskID, string from_User_ID_Specification, TaskUpdateSpecification body, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (taskID == null)
                throw new System.ArgumentNullException("taskID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/tasks/{taskID}/update");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{taskID}", System.Uri.EscapeDataString(ConvertToString(taskID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (from_User_ID_Specification != null)
                        request_.Headers.TryAddWithoutValidation("From-User-ID-Specification", ConvertToString(from_User_ID_Specification, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a voice annotation</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the voice annotation.</param>
        /// <param name="annotationID">The identifier of the voice annotation to retrieve.</param>
        /// <returns>Returns the requested voice annotation without bytes.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<VoiceAnnotation> VoiceAnnotationGetClaimVoiceAnnotationAsync(string claimID, int annotationID)
        {
            return VoiceAnnotationGetClaimVoiceAnnotationAsync(claimID, annotationID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a voice annotation</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the voice annotation.</param>
        /// <param name="annotationID">The identifier of the voice annotation to retrieve.</param>
        /// <returns>Returns the requested voice annotation without bytes.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<VoiceAnnotation> VoiceAnnotationGetClaimVoiceAnnotationAsync(string claimID, int annotationID, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (annotationID == null)
                throw new System.ArgumentNullException("annotationID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/voice-annotations/{annotationID}");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{annotationID}", System.Uri.EscapeDataString(ConvertToString(annotationID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VoiceAnnotation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResultDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<ResultDetail>>("Internal Server Error - Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a voice annotation file</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the voice annotation.</param>
        /// <param name="annotationID">The identifier of the voice annotation to retrieve.</param>
        /// <returns>Returns the requested voice annotation file.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FileResponse> VoiceAnnotationGetClaimVoiceAnnotationBytesAsync(string claimID, int annotationID)
        {
            return VoiceAnnotationGetClaimVoiceAnnotationBytesAsync(claimID, annotationID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a voice annotation file</summary>
        /// <param name="claimID">The globally unique identifier of the claim from which to retrieve the voice annotation.</param>
        /// <param name="annotationID">The identifier of the voice annotation to retrieve.</param>
        /// <returns>Returns the requested voice annotation file.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<FileResponse> VoiceAnnotationGetClaimVoiceAnnotationBytesAsync(string claimID, int annotationID, System.Threading.CancellationToken cancellationToken)
        {
            if (claimID == null)
                throw new System.ArgumentNullException("claimID");
    
            if (annotationID == null)
                throw new System.ArgumentNullException("annotationID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v03_04/claims/{claimID}/voice-annotations/{annotationID}/recording");
            urlBuilder_.Replace("{claimID}", System.Uri.EscapeDataString(ConvertToString(claimID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{annotationID}", System.Uri.EscapeDataString(ConvertToString(annotationID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("audio/wav"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_); 
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request - The body of the request is invalid and must be fixed before resending the request.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Too Many Requests - The account has sent too many concurrent requests in a given amount of time.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal Server Error - Unexpected error.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }
    
    /// <summary>This type represents the type of claim assignment.
    /// 
    /// **Internal**: The claim assignment is to an internal user.
    /// 
    /// **External**: The claim assignment is to another company.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ClaimAssignmentType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Internal")]
        Internal = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"External")]
        External = 1,
    
    }
    
    /// <summary>This type represents the claim assignment status values that the Symbility API supports.
    /// 
    /// **None**: The claim is not assigned to a company.
    /// 
    /// **AssignmentSent**: The claim assignment has been sent.
    /// 
    /// **AssignmentReceived**: The claim assignment has been received.
    /// 
    /// **InsuredContacted**: The insured has been contacted.
    /// 
    /// **InspectionPerformed**: The inspection has been performed.
    /// 
    /// **InspectionScheduled**: The inspection has been scheduled.
    /// 
    /// **MitigationWorkStarted**: The mitigation work has started.
    /// 
    /// **MitigationWorkCompleted**: The mitigation work has been completed.
    /// 
    /// **EstimateReadyForReview**: One or many estimates have been marked Ready for Review.
    /// 
    /// **EstimateCompleted**: One or many estimates have been completed.
    /// 
    /// **EstimateApproved**: One or many estimates have been approved.
    /// 
    /// **JobScheduled**: The job's start and completion dates have been scheduled.
    /// 
    /// **JobNotSold**: The claim assignment has been marked Job Not Sold.
    /// 
    /// **JobStarted**: The job has been started. 
    /// 
    /// **JobCompleted**: The job has been completed.
    /// 
    /// **AssignmentCompleted**: The claim assignment has been completed.
    /// 
    /// **AssignmentCancelled**: The claim assignment has been cancelled.
    /// 
    /// **AssignmentDeclined**: The claim assignment has been declined.
    /// 
    /// **AssignmentReopened**: The claim assignment has been reopened.
    /// 
    /// **Multiple**: The claim has multiple claim assignment statuses.
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ClaimAssignmentStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NotAssigned")]
        NotAssigned = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AssignmentSent")]
        AssignmentSent = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AssignmentReceived")]
        AssignmentReceived = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InsuredContacted")]
        InsuredContacted = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InspectionScheduled")]
        InspectionScheduled = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InspectionPerformed")]
        InspectionPerformed = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EstimateCompleted")]
        EstimateCompleted = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EstimateApproved")]
        EstimateApproved = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JobScheduled")]
        JobScheduled = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JobStarted")]
        JobStarted = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JobCompleted")]
        JobCompleted = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AssignmentCompleted")]
        AssignmentCompleted = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AssignmentCancelled")]
        AssignmentCancelled = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AssignmentDeclined")]
        AssignmentDeclined = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AssignmentReopened")]
        AssignmentReopened = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Multiple")]
        Multiple = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MitigationWorkStarted")]
        MitigationWorkStarted = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MitigationWorkCompleted")]
        MitigationWorkCompleted = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EstimateReadyForReview")]
        EstimateReadyForReview = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JobNotSold")]
        JobNotSold = 21,
    
    }
    
    /// <summary>This type represents the company type values that the Symbility API supports.
    /// 
    /// **InsuranceCompany**: The company is an insurance company.
    /// 
    /// **IndependentAdjuster**: The company is an independent adjuster.
    /// 
    /// **Contractor**: The company is a contractor.
    /// 
    /// **IntermediaryClaimManagementCompany**: The company is an intermediary - claim management company.
    /// 
    /// **IntermediaryContractorNetwork**: The company is an intermediary - contractor network.
    /// 
    /// **IntermediaryIndependentAdjuster**: The company is an intermediary - independent adjuster.
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CompanyType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"InsuranceCompany")]
        InsuranceCompany = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IndependentAdjuster")]
        IndependentAdjuster = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Contractor")]
        Contractor = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IntermediaryClaimManagementCompany")]
        IntermediaryClaimManagementCompany = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IntermediaryContractorNetwork")]
        IntermediaryContractorNetwork = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IntermediaryIndependentAdjuster")]
        IntermediaryIndependentAdjuster = 6,
    
    }
    
    /// <summary>This type represents the state and province values that the Symbility API supports.
    /// 
    /// **STATE VALUES – UNITED STATES**: Alabama, Alaska, Arizona, Arkansas, California, Colorado, Connecticut, Delaware, DistrictOfColumbia, 
    /// Florida, Georgia, Hawaii, Idaho, Illinois, Indiana, Iowa, Kansas, Kentucky, Louisiana, Maine, Maryland, Massachusetts, Michigan, Minnesota, 
    /// Mississippi, Missouri, Montana, Nebraska, Nevada, NewHampshire, NewJersey, NewMexico, NewYork, NorthCarolina, NorthDakota, Ohio, Oklahoma, 
    /// Oregon, Pennsylvania, PuertoRico, RhodeIsland, SouthCarolina, SouthDakota, Tennessee, Texas, Utah, Vermont, Virginia, Washington, WestVirginia, 
    /// Wisconsin, Wyoming, VirginIslands
    /// 
    /// **PROVINCE VALUES – CANADA**: Alberta, BritishColumbia, Manitoba, NewBrunswick, Newfoundland, NorthwestTerritories, NovaScotia, Nunavut, 
    /// Ontario, PrinceEdwardIsland, Quebec, Saskatchewan, YukonTerritory
    /// 
    /// **COUNTY VALUES – UNITED KINGDOM**: 
    /// 
    /// **General**: UnitedKingdomNone
    /// 
    /// **England**: Bedfordshire, Berkshire, Buckinghamshire, Cambridgeshire, Cheshire, Cornwall, Cumberland, Derbyshire, Devon, Dorset, Durham,
    /// EastRidingOfYorkshire, Essex, Gloucestershire, Hampshire, Herefordshire, Hertfordshire, Huntingdonshire, IsleOfWight, Kent, Lancashire, 
    /// Leicestershire, Lincolnshire, Middlesex, Norfolk, NorthRidingOfYorkshire, Northamptonshire, Northumberland, Nottinghamshire, Oxfordshire, 
    /// Rutland, Shropshire, Somerset, Staffordshire, Suffolk, Surrey, Sussex, Warwickshire, WestRidingOfYorkshire, Westmorland, Wiltshire, 
    /// Worcestershire, Yorkshire, West Midlands
    /// 
    /// **Northern Ireland**: Antrim, Armagh, Down, Fermanagh, Londonderry, Tyrone
    /// 
    /// **Wales**: Anglesey, Breconshire, Caernarfonshire, Cardiganshire, Carmarthenshire, Denbighshire, Flintshire, Glamorgan, Merioneth, 
    /// Monmouthshire, Montgomeryshire, Pembrokeshire, Radnorshire
    /// 
    /// **Scotland**: Aberdeenshire, AngusForfarshire, Argyll, Ayrshire, Banffshire, Berwickshire, Bute, Caithness, Clackmannanshire, Dumfriesshire,
    /// Dunbartonshire, EastLothian, Fife, InvernessShire, Kincardineshire, KinrossShire, Kirkcudbrightshire, Lanarkshire, Midloathian, Moray, 
    /// Nairnshire, Orkney, Peeblesshire, Perthshire, Renfrewshire, RossAndCromarty, Roxburghshire, Selkirkshire, Shetland, Stirlingshire, 
    /// Sutherland, WestLothian, Wigtownshire
    /// 
    /// **PROVINCE VALUES – SOUTH AFRICA**: SouthAfricaNone, EasternCape, FreeState, Gauteng, KwaZuluNatal, Limpopo, Mpumalanga, NorthWest, NorthernCape, WesternCape
    /// 
    /// **PROVINCE VALUES – GERMANY**: GermanyNone
    /// 
    /// **COUNTY VALUES – AUSTRALIA**: AustralianCapitalTerritory, NewSouthWales, NorthenTerritory, Queensland, southAustralia, Tasmania, Victoria, Westernaustralia
    /// 
    /// **PROVINCE VALUES – NETHERLANDS**: Drenthe, Flevoland, Friesland, Gelderland, Groningen, LimburgNE, NoordBrabant, NoordHolland, Overijssel, Utrecht, Zeeland, ZuidHolland
    /// 
    /// **DISTRICT VALUES – LUXEMBOURG**: Diekirch, Grevenmacher, Luxembourg
    /// 
    /// **PROVINCE VALUES – TURKEY**: Adana, Adiyaman, Afyonkarahisar, Agri, Aksaray, Amasya, Ankara, Antalya, Ardahan, Artvin, Aydin, Balikesir, 
    /// Bartin, Batman, Bayburt, Bilecik, Bingol, Bitlis, Bolu, Burdur, Bursa, Canakkale, Cankiri, Corum, Denizli, Diyarbakir, Duzce, Edirne, Elazig, 
    /// Erzincan, Erzurum, Eskisehir, Gaziantep, Giresum, Gumushane, Hakkari, Hatay, Igdir, Isparta, Istanbul, Izmir, Kahramanmaras, Karabuk, Karaman, 
    /// Kars, Kastamonu, Kayseri, Kilis, Kirikkale, Kirklareli, Kirsehir, Kocaeli, Konya, Kutahya, Malatya, Manisa, Mardin, Mersin, Mugla, Mus, Nevsehir, 
    /// Nigde, Ordu, Osmaniye, Rize, Sakarya, Samsun, Sanliurfa, Siirt, Sinop, Sirnak, Sivas, Tekirdag, Tokat, Trabzon, Tunceli, Usak, Van, Yalova, Yozgat, Zonguldak
    /// 
    /// **PROVINCE VALUES – JAPAN**: Aichi, Akita, Aomori, Chiba, Ehime, Fukui, Fukushima, Gifu, Gumma, Hiroshima, Hokkaido, Hyogo, Ibaraki, Ishikawa,
    /// Iwate, Kagawa, Kagoshima, Kanagawa, Kochi, Kumamoto, Kyoto, Mie, Miyagi, Miyazaki, Nagano, Nagasaki, Nara, Niigata, Oita, Okayama, Okinawa, Osaka, 
    /// Saga, Saitama, Shiga, Shimane, Shizuoka, Tochigi, Tokushima, Tokyo, Tottori, Toyama, Wakayama, Yamagata, Yamaguchi, Yamanashi
    /// 
    /// **PROVINCE VALUES – SPAIN**: Andalusia, Aragon, Asturias, BalearicIslands, BasqueCountry, CanaryIslands, Cantabria, CastileandLeon, CastileLaMancha, 
    /// Catalonia, Ceuta, Extremadura, Galicia, LaRioja, Madrid, Melilla, Murcia, Navarra, Valencia, SpainNone
    /// 
    /// **DEPARTMENT VALUES – FRANCE**: Ain, Aisne, Allier, AlpesDeHautProvence, HautesAlpes, AlpesMaritimes, Ardeche, Ardennes, Ariege, Aube, Aude, 
    /// Aveyron, BouchesDuRhone, Calvadaos, Cantal, Charente, CharentreMaritime, Cher, Correze, CorseDuSud, HauteCorse, CodeDor, CotesDArmor, Creuse, 
    /// Dordogne, Doubs, Drome, Eure, EureEtLoir, Finisete, Gard, HauteGaronne, Gers, Gironde, Herault, IlleEtVilaine, Indre, IndreEtLoire, Isere, Jura, 
    /// Landes, LoirEtCher, Loire, HaureLoire, LoireAtlantique, Loiret, Lot, LotEtGaronne, Lozere, MaineEtLoire, Manche, Marne, HauteMare, Mayenne,
    /// MeurtheEtMoselle, Meuse, Morbihan, Moselle, Nievre, Nord, Oise, Orne, PasDeCalais, PuyDeDome, PyreneesAtlantiques, HautesPyrenees, PyreneesOrientales, 
    /// BasRhin, HautRhin, Rhone, HaureSaone, SaoneEtLoire, Sarthe, Savoie, HauteSavoie, Paris, SeineMaritime, SeineEtMarne, Yvelines, DeuxSevres, Somme, Tarn, 
    /// TarnEtGaronne, Var, Vaucluse, Vendee, Vienne, HauteVienne, Vosges, Yonne, TerritoireDeBelfort, Essonne, HautsDeSeine, SeineSaintDenis, ValDeMarne, ValDOise,
    /// Gaudelope, Martinique, Guyane, LaReuinion, Mayotte, FranceNone
    /// 
    /// **COUNTY VALUES – IRELAND**: Carlow, Cavan, Clarke, Cork, Donegal, Dublin, Galway, Kerry, Kildare, Kilkenny, Laois, Leitrim, Limerick, LongFord, 
    /// Louth, Mayo, Meath, Monaghan, Offaly, Roscommon, Sligo, Tipperary, Waterford, Wastmeath, Wexford, Wicklow
    /// 
    /// **STATE VALUES – POLAND**: Greater Poland, Holy Cross, Kuyavian-Pomerianian, Lesser Poland, Lódz, Lower Silesian, Lublin, Lubusz, Masovian, Opole, 
    /// Podlaskie, Pomerianian, Silesian, Subcarpathian, Warmiam-Masurian, West Pomeranian
    /// 
    /// **COUNTY VALUES – BELGIUM**: Antwerpen, BelgiumNone, Crussels Hoofdstedlijk Gewest, Henegouwen, Limburg, Luik, Luxemburg, Namen, Oost-Vlaanderen, 
    /// Vlaams Brabant, Waals Brabant, West-Vlaanderen
    /// 
    /// **STATE VALUES – NEW ZEALAND**: NewZealandNone
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum State
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Alabama")]
        Alabama = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Alaska")]
        Alaska = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Arizona")]
        Arizona = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Arkansas")]
        Arkansas = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"California")]
        California = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Colorado")]
        Colorado = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Connecticut")]
        Connecticut = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Delaware")]
        Delaware = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DistrictOfColumbia")]
        DistrictOfColumbia = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Florida")]
        Florida = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Georgia")]
        Georgia = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Hawaii")]
        Hawaii = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Idaho")]
        Idaho = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Illinois")]
        Illinois = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Indiana")]
        Indiana = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Iowa")]
        Iowa = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kansas")]
        Kansas = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kentucky")]
        Kentucky = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Louisiana")]
        Louisiana = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Maine")]
        Maine = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Maryland")]
        Maryland = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Massachusetts")]
        Massachusetts = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Michigan")]
        Michigan = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Minnesota")]
        Minnesota = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mississippi")]
        Mississippi = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Missouri")]
        Missouri = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Montana")]
        Montana = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nebraska")]
        Nebraska = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nevada")]
        Nevada = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NewHampshire")]
        NewHampshire = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NewJersey")]
        NewJersey = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NewMexico")]
        NewMexico = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NewYork")]
        NewYork = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NorthCarolina")]
        NorthCarolina = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NorthDakota")]
        NorthDakota = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ohio")]
        Ohio = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Oklahoma")]
        Oklahoma = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Oregon")]
        Oregon = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pennsylvania")]
        Pennsylvania = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RhodeIsland")]
        RhodeIsland = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SouthCarolina")]
        SouthCarolina = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SouthDakota")]
        SouthDakota = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tennessee")]
        Tennessee = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Texas")]
        Texas = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Utah")]
        Utah = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Vermont")]
        Vermont = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Virginia")]
        Virginia = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Washington")]
        Washington = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WestVirginia")]
        WestVirginia = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Wisconsin")]
        Wisconsin = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Wyoming")]
        Wyoming = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PuertoRico")]
        PuertoRico = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VirginIslands")]
        VirginIslands = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Alberta")]
        Alberta = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BritishColumbia")]
        BritishColumbia = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Manitoba")]
        Manitoba = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NewBrunswick")]
        NewBrunswick = 56,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Newfoundland")]
        Newfoundland = 57,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NorthwestTerritories")]
        NorthwestTerritories = 58,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NovaScotia")]
        NovaScotia = 59,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nunavut")]
        Nunavut = 60,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ontario")]
        Ontario = 61,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PrinceEdwardIsland")]
        PrinceEdwardIsland = 62,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Quebec")]
        Quebec = 63,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Saskatchewan")]
        Saskatchewan = 64,
    
        [System.Runtime.Serialization.EnumMember(Value = @"YukonTerritory")]
        YukonTerritory = 65,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UnitedKingdomNone")]
        UnitedKingdomNone = 66,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bedfordshire")]
        Bedfordshire = 67,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Berkshire")]
        Berkshire = 68,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Buckinghamshire")]
        Buckinghamshire = 69,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cambridgeshire")]
        Cambridgeshire = 70,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cheshire")]
        Cheshire = 71,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cornwall")]
        Cornwall = 72,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cumberland")]
        Cumberland = 73,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Derbyshire")]
        Derbyshire = 74,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Devon")]
        Devon = 75,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dorset")]
        Dorset = 76,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Durham")]
        Durham = 77,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EastRidingOfYorkshire")]
        EastRidingOfYorkshire = 78,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Essex")]
        Essex = 79,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gloucestershire")]
        Gloucestershire = 80,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Hampshire")]
        Hampshire = 81,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Herefordshire")]
        Herefordshire = 82,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Hertfordshire")]
        Hertfordshire = 83,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Huntingdonshire")]
        Huntingdonshire = 84,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IsleOfWight")]
        IsleOfWight = 85,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kent")]
        Kent = 86,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lancashire")]
        Lancashire = 87,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Leicestershire")]
        Leicestershire = 88,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lincolnshire")]
        Lincolnshire = 89,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Middlesex")]
        Middlesex = 90,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Norfolk")]
        Norfolk = 91,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NorthRidingOfYorkshire")]
        NorthRidingOfYorkshire = 92,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Northamptonshire")]
        Northamptonshire = 93,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Northumberland")]
        Northumberland = 94,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nottinghamshire")]
        Nottinghamshire = 95,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Oxfordshire")]
        Oxfordshire = 96,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rutland")]
        Rutland = 97,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Shropshire")]
        Shropshire = 98,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Somerset")]
        Somerset = 99,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Staffordshire")]
        Staffordshire = 100,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Suffolk")]
        Suffolk = 101,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Surrey")]
        Surrey = 102,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sussex")]
        Sussex = 103,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Warwickshire")]
        Warwickshire = 104,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WestRidingOfYorkshire")]
        WestRidingOfYorkshire = 105,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Westmorland")]
        Westmorland = 106,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Wiltshire")]
        Wiltshire = 107,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Worcestershire")]
        Worcestershire = 108,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Yorkshire")]
        Yorkshire = 109,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WestMidlands")]
        WestMidlands = 110,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Antrim")]
        Antrim = 111,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Armagh")]
        Armagh = 112,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Down")]
        Down = 113,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fermanagh")]
        Fermanagh = 114,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Londonderry")]
        Londonderry = 115,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tyrone")]
        Tyrone = 116,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Anglesey")]
        Anglesey = 117,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Breconshire")]
        Breconshire = 118,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Caernarfonshire")]
        Caernarfonshire = 119,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cardiganshire")]
        Cardiganshire = 120,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Carmarthenshire")]
        Carmarthenshire = 121,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Denbighshire")]
        Denbighshire = 122,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Flintshire")]
        Flintshire = 123,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Glamorgan")]
        Glamorgan = 124,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Merioneth")]
        Merioneth = 125,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Monmouthshire")]
        Monmouthshire = 126,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Montgomeryshire")]
        Montgomeryshire = 127,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pembrokeshire")]
        Pembrokeshire = 128,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Radnorshire")]
        Radnorshire = 129,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Aberdeenshire")]
        Aberdeenshire = 130,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AngusForfarshire")]
        AngusForfarshire = 131,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Argyll")]
        Argyll = 132,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ayrshire")]
        Ayrshire = 133,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Banffshire")]
        Banffshire = 134,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Berwickshire")]
        Berwickshire = 135,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bute")]
        Bute = 136,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Caithness")]
        Caithness = 137,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Clackmannanshire")]
        Clackmannanshire = 138,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dumfriesshire")]
        Dumfriesshire = 139,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dunbartonshire")]
        Dunbartonshire = 140,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EastLothian")]
        EastLothian = 141,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fife")]
        Fife = 142,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InvernessShire")]
        InvernessShire = 143,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kincardineshire")]
        Kincardineshire = 144,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KinrossShire")]
        KinrossShire = 145,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kirkcudbrightshire")]
        Kirkcudbrightshire = 146,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lanarkshire")]
        Lanarkshire = 147,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Midloathian")]
        Midloathian = 148,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Moray")]
        Moray = 149,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nairnshire")]
        Nairnshire = 150,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Orkney")]
        Orkney = 151,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Peeblesshire")]
        Peeblesshire = 152,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Perthshire")]
        Perthshire = 153,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Renfrewshire")]
        Renfrewshire = 154,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RossAndCromarty")]
        RossAndCromarty = 155,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Roxburghshire")]
        Roxburghshire = 156,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Selkirkshire")]
        Selkirkshire = 157,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Shetland")]
        Shetland = 158,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Stirlingshire")]
        Stirlingshire = 159,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sutherland")]
        Sutherland = 160,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WestLothian")]
        WestLothian = 161,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Wigtownshire")]
        Wigtownshire = 162,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 163,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SouthAfricaNone")]
        SouthAfricaNone = 164,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EasternCape")]
        EasternCape = 165,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FreeState")]
        FreeState = 166,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gauteng")]
        Gauteng = 167,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KwaZuluNatal")]
        KwaZuluNatal = 168,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Limpopo")]
        Limpopo = 169,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mpumalanga")]
        Mpumalanga = 170,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NorthWest")]
        NorthWest = 171,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NorthernCape")]
        NorthernCape = 172,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WesternCape")]
        WesternCape = 173,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GermanyNone")]
        GermanyNone = 174,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AustralianCapitalTerritory")]
        AustralianCapitalTerritory = 175,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NewSouthWales")]
        NewSouthWales = 176,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NorthernTerritory")]
        NorthernTerritory = 177,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Queensland")]
        Queensland = 178,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SouthAustralia")]
        SouthAustralia = 179,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tasmania")]
        Tasmania = 180,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Victoria")]
        Victoria = 181,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WesternAustralia")]
        WesternAustralia = 182,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LowerSilesian")]
        LowerSilesian = 183,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KuyavianPomeranian")]
        KuyavianPomeranian = 184,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lublin")]
        Lublin = 185,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lubusz")]
        Lubusz = 186,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lodz")]
        Lodz = 187,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LesserPoland")]
        LesserPoland = 188,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Masovian")]
        Masovian = 189,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Opole")]
        Opole = 190,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Subcarpathian")]
        Subcarpathian = 191,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Podlaskie")]
        Podlaskie = 192,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pomeranian")]
        Pomeranian = 193,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Silesian")]
        Silesian = 194,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HolyCross")]
        HolyCross = 195,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WarmianMasurian")]
        WarmianMasurian = 196,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GreaterPoland")]
        GreaterPoland = 197,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WestPomeranian")]
        WestPomeranian = 198,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BelgiumNone")]
        BelgiumNone = 199,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BrusselsHoofdstedelijkGewest")]
        BrusselsHoofdstedelijkGewest = 200,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WaalsBrabant")]
        WaalsBrabant = 201,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VlaamsBrabant")]
        VlaamsBrabant = 202,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Antwerpen")]
        Antwerpen = 203,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Limburg")]
        Limburg = 204,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Luik")]
        Luik = 205,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Namen")]
        Namen = 206,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Henegouwen")]
        Henegouwen = 207,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Luxemburg")]
        Luxemburg = 208,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WestVlaanderen")]
        WestVlaanderen = 209,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OostVlaanderen")]
        OostVlaanderen = 210,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Drenthe")]
        Drenthe = 211,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Flevoland")]
        Flevoland = 212,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Friesland")]
        Friesland = 213,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gelderland")]
        Gelderland = 214,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Groningen")]
        Groningen = 215,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LimburgNE")]
        LimburgNE = 216,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NoordBrabant")]
        NoordBrabant = 217,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NoordHolland")]
        NoordHolland = 218,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Overijssel")]
        Overijssel = 219,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Utrecht")]
        Utrecht = 220,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Zeeland")]
        Zeeland = 221,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ZuidHolland")]
        ZuidHolland = 222,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Diekirch")]
        Diekirch = 223,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Grevenmacher")]
        Grevenmacher = 224,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Luxembourg")]
        Luxembourg = 225,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TurkeyNone")]
        TurkeyNone = 226,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Adana")]
        Adana = 227,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Adiyaman")]
        Adiyaman = 228,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Afyonkarahisar")]
        Afyonkarahisar = 229,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Agri")]
        Agri = 230,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Aksaray")]
        Aksaray = 231,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Amasya")]
        Amasya = 232,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ankara")]
        Ankara = 233,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Antalya")]
        Antalya = 234,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ardahan")]
        Ardahan = 235,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Artvin")]
        Artvin = 236,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Aydin")]
        Aydin = 237,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Balikesir")]
        Balikesir = 238,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bartin")]
        Bartin = 239,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Batman")]
        Batman = 240,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bayburt")]
        Bayburt = 241,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bilecik")]
        Bilecik = 242,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bingol")]
        Bingol = 243,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bitlis")]
        Bitlis = 244,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bolu")]
        Bolu = 245,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Burdur")]
        Burdur = 246,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bursa")]
        Bursa = 247,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Canakkale")]
        Canakkale = 248,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cankiri")]
        Cankiri = 249,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Corum")]
        Corum = 250,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Denizli")]
        Denizli = 251,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Diyarbakir")]
        Diyarbakir = 252,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Duzce")]
        Duzce = 253,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Edirne")]
        Edirne = 254,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Elazig")]
        Elazig = 255,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Erzincan")]
        Erzincan = 256,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Erzurum")]
        Erzurum = 257,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Eskisehir")]
        Eskisehir = 258,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gaziantep")]
        Gaziantep = 259,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Giresun")]
        Giresun = 260,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gumushane")]
        Gumushane = 261,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Hakkari")]
        Hakkari = 262,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Hatay")]
        Hatay = 263,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Igdir")]
        Igdir = 264,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Isparta")]
        Isparta = 265,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Istanbul")]
        Istanbul = 266,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Izmir")]
        Izmir = 267,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kahramanmaras")]
        Kahramanmaras = 268,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Karabuk")]
        Karabuk = 269,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Karaman")]
        Karaman = 270,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kars")]
        Kars = 271,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kastamonu")]
        Kastamonu = 272,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kayseri")]
        Kayseri = 273,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kilis")]
        Kilis = 274,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kirikkale")]
        Kirikkale = 275,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kirklareli")]
        Kirklareli = 276,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kirsehir")]
        Kirsehir = 277,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kocaeli")]
        Kocaeli = 278,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Konya")]
        Konya = 279,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kutahya")]
        Kutahya = 280,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Malatya")]
        Malatya = 281,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Manisa")]
        Manisa = 282,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mardin")]
        Mardin = 283,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mersin")]
        Mersin = 284,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mugla")]
        Mugla = 285,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mus")]
        Mus = 286,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nevsehir")]
        Nevsehir = 287,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nigde")]
        Nigde = 288,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ordu")]
        Ordu = 289,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Osmaniye")]
        Osmaniye = 290,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rize")]
        Rize = 291,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sakarya")]
        Sakarya = 292,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Samsun")]
        Samsun = 293,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sanliurfa")]
        Sanliurfa = 294,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Siirt")]
        Siirt = 295,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sinop")]
        Sinop = 296,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sirnak")]
        Sirnak = 297,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sivas")]
        Sivas = 298,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tekirdag")]
        Tekirdag = 299,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tokat")]
        Tokat = 300,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Trabzon")]
        Trabzon = 301,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tunceli")]
        Tunceli = 302,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Usak")]
        Usak = 303,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Van")]
        Van = 304,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Yalova")]
        Yalova = 305,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Yozgat")]
        Yozgat = 306,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Zonguldak")]
        Zonguldak = 307,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JapanNone")]
        JapanNone = 308,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Aichi")]
        Aichi = 309,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Akita")]
        Akita = 310,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Aomori")]
        Aomori = 311,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Chiba")]
        Chiba = 312,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ehime")]
        Ehime = 313,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fukui")]
        Fukui = 314,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fukuoka")]
        Fukuoka = 315,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fukushima")]
        Fukushima = 316,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gifu")]
        Gifu = 317,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gumma")]
        Gumma = 318,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Hiroshima")]
        Hiroshima = 319,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Hokkaido")]
        Hokkaido = 320,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Hyogo")]
        Hyogo = 321,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ibaraki")]
        Ibaraki = 322,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ishikawa")]
        Ishikawa = 323,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Iwate")]
        Iwate = 324,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kagawa")]
        Kagawa = 325,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kagoshima")]
        Kagoshima = 326,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kanagawa")]
        Kanagawa = 327,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kochi")]
        Kochi = 328,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kumamoto")]
        Kumamoto = 329,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kyoto")]
        Kyoto = 330,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mie")]
        Mie = 331,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Miyagi")]
        Miyagi = 332,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Miyazaki")]
        Miyazaki = 333,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nagano")]
        Nagano = 334,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nagasaki")]
        Nagasaki = 335,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nara")]
        Nara = 336,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Niigata")]
        Niigata = 337,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Oita")]
        Oita = 338,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Okayama")]
        Okayama = 339,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Okinawa")]
        Okinawa = 340,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Osaka")]
        Osaka = 341,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Saga")]
        Saga = 342,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Saitama")]
        Saitama = 343,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Shiga")]
        Shiga = 344,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Shimane")]
        Shimane = 345,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Shizuoka")]
        Shizuoka = 346,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tochigi")]
        Tochigi = 347,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tokushima")]
        Tokushima = 348,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tokyo")]
        Tokyo = 349,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tottori")]
        Tottori = 350,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Toyama")]
        Toyama = 351,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Wakayama")]
        Wakayama = 352,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Yamagata")]
        Yamagata = 353,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Yamaguchi")]
        Yamaguchi = 354,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Yamanashi")]
        Yamanashi = 355,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SpainNone")]
        SpainNone = 356,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Andalusia")]
        Andalusia = 357,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Aragon")]
        Aragon = 358,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Asturias")]
        Asturias = 359,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BalearicIslands")]
        BalearicIslands = 360,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BasqueCountry")]
        BasqueCountry = 361,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CanaryIslands")]
        CanaryIslands = 362,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cantabria")]
        Cantabria = 363,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CastileandLeon")]
        CastileandLeon = 364,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CastileLaMancha")]
        CastileLaMancha = 365,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Catalonia")]
        Catalonia = 366,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ceuta")]
        Ceuta = 367,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Extremadura")]
        Extremadura = 368,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Galicia")]
        Galicia = 369,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LaRioja")]
        LaRioja = 370,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Madrid")]
        Madrid = 371,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Melilla")]
        Melilla = 372,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Murcia")]
        Murcia = 373,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Navarra")]
        Navarra = 374,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Valencia")]
        Valencia = 375,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FranceNone")]
        FranceNone = 376,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ain")]
        Ain = 377,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Aisne")]
        Aisne = 378,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Allier")]
        Allier = 379,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AlpesDeHauteProvence")]
        AlpesDeHauteProvence = 380,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HautesAlpes")]
        HautesAlpes = 381,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AlpesMaritimes")]
        AlpesMaritimes = 382,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ardeche")]
        Ardeche = 383,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ardennes")]
        Ardennes = 384,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ariege")]
        Ariege = 385,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Aube")]
        Aube = 386,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Aude")]
        Aude = 387,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Aveyron")]
        Aveyron = 388,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BouchesDuRhone")]
        BouchesDuRhone = 389,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Calvados")]
        Calvados = 390,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cantal")]
        Cantal = 391,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Charente")]
        Charente = 392,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CharenteMaritime")]
        CharenteMaritime = 393,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cher")]
        Cher = 394,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Correze")]
        Correze = 395,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CorseDuSud")]
        CorseDuSud = 396,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HauteCorse")]
        HauteCorse = 397,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CoteDOr")]
        CoteDOr = 398,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CotesDArmor")]
        CotesDArmor = 399,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Creuse")]
        Creuse = 400,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dordogne")]
        Dordogne = 401,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Doubs")]
        Doubs = 402,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Drome")]
        Drome = 403,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Eure")]
        Eure = 404,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EureEtLoir")]
        EureEtLoir = 405,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Finistere")]
        Finistere = 406,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gard")]
        Gard = 407,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HauteGaronne")]
        HauteGaronne = 408,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gers")]
        Gers = 409,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gironde")]
        Gironde = 410,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Herault")]
        Herault = 411,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IlleEtVilaine")]
        IlleEtVilaine = 412,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Indre")]
        Indre = 413,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IndreEtLoire")]
        IndreEtLoire = 414,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Isere")]
        Isere = 415,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Jura")]
        Jura = 416,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Landes")]
        Landes = 417,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LoirEtCher")]
        LoirEtCher = 418,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Loire")]
        Loire = 419,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HauteLoire")]
        HauteLoire = 420,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LoireAtlantique")]
        LoireAtlantique = 421,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Loiret")]
        Loiret = 422,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lot")]
        Lot = 423,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LotEtGaronne")]
        LotEtGaronne = 424,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lozere")]
        Lozere = 425,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MaineEtLoire")]
        MaineEtLoire = 426,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Manche")]
        Manche = 427,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Marne")]
        Marne = 428,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HauteMarne")]
        HauteMarne = 429,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mayenne")]
        Mayenne = 430,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MeurtheEtMoselle")]
        MeurtheEtMoselle = 431,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Meuse")]
        Meuse = 432,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Morbihan")]
        Morbihan = 433,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Moselle")]
        Moselle = 434,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nievre")]
        Nievre = 435,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nord")]
        Nord = 436,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Oise")]
        Oise = 437,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Orne")]
        Orne = 438,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PasDeCalais")]
        PasDeCalais = 439,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PuyDeDome")]
        PuyDeDome = 440,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PyreneesAtlantiques")]
        PyreneesAtlantiques = 441,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HautesPyrenees")]
        HautesPyrenees = 442,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PyreneesOrientales")]
        PyreneesOrientales = 443,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BasRhin")]
        BasRhin = 444,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HautRhin")]
        HautRhin = 445,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rhone")]
        Rhone = 446,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HauteSaone")]
        HauteSaone = 447,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SaoneEtLoire")]
        SaoneEtLoire = 448,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sarthe")]
        Sarthe = 449,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Savoie")]
        Savoie = 450,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HauteSavoie")]
        HauteSavoie = 451,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Paris")]
        Paris = 452,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SeineMaritime")]
        SeineMaritime = 453,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SeineEtMarne")]
        SeineEtMarne = 454,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Yvelines")]
        Yvelines = 455,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeuxSevres")]
        DeuxSevres = 456,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Somme")]
        Somme = 457,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tarn")]
        Tarn = 458,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TarnEtGaronne")]
        TarnEtGaronne = 459,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Var")]
        Var = 460,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Vaucluse")]
        Vaucluse = 461,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Vendee")]
        Vendee = 462,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Vienne")]
        Vienne = 463,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HauteVienne")]
        HauteVienne = 464,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Vosges")]
        Vosges = 465,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Yonne")]
        Yonne = 466,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TerritoireDeBelfort")]
        TerritoireDeBelfort = 467,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Essonne")]
        Essonne = 468,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HautsDeSeine")]
        HautsDeSeine = 469,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SeineSaintDenis")]
        SeineSaintDenis = 470,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValDeMarne")]
        ValDeMarne = 471,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValDOise")]
        ValDOise = 472,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Guadeloupe")]
        Guadeloupe = 473,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Martinique")]
        Martinique = 474,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Guyane")]
        Guyane = 475,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LaReunion")]
        LaReunion = 476,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mayotte")]
        Mayotte = 477,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Carlow")]
        Carlow = 478,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cavan")]
        Cavan = 479,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Clare")]
        Clare = 480,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cork")]
        Cork = 481,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Donegal")]
        Donegal = 482,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dublin")]
        Dublin = 483,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Galway")]
        Galway = 484,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kerry")]
        Kerry = 485,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kildare")]
        Kildare = 486,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kilkenny")]
        Kilkenny = 487,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Laois")]
        Laois = 488,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Leitrim")]
        Leitrim = 489,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Limerick")]
        Limerick = 490,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LongFord")]
        LongFord = 491,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Louth")]
        Louth = 492,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mayo")]
        Mayo = 493,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Meath")]
        Meath = 494,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Monaghan")]
        Monaghan = 495,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Offaly")]
        Offaly = 496,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Roscommon")]
        Roscommon = 497,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sligo")]
        Sligo = 498,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tipperary")]
        Tipperary = 499,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Waterford")]
        Waterford = 500,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Westmeath")]
        Westmeath = 501,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Wexford")]
        Wexford = 502,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Wicklow")]
        Wicklow = 503,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NewZealandNone")]
        NewZealandNone = 504,
    
    }
    
    /// <summary>This type represents the country values that the Symbility API supports.
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Country
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UnitedStates")]
        UnitedStates = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Canada")]
        Canada = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UnitedKingdom")]
        UnitedKingdom = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"France")]
        France = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Germany")]
        Germany = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SouthAfrica")]
        SouthAfrica = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Australia")]
        Australia = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Poland")]
        Poland = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Belgium")]
        Belgium = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Netherlands")]
        Netherlands = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Luxembourg")]
        Luxembourg = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Turkey")]
        Turkey = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Japan")]
        Japan = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Spain")]
        Spain = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ireland")]
        Ireland = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NewZealand")]
        NewZealand = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 16,
    
    }
    
    /// <summary>This type represents an address when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Address 
    {
        /// <summary>The first line of the street address.</summary>
        [Newtonsoft.Json.JsonProperty("Line1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Line1 { get; set; }
    
        /// <summary>The second line of the street address.</summary>
        [Newtonsoft.Json.JsonProperty("Line2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Line2 { get; set; }
    
        /// <summary>The city.</summary>
        [Newtonsoft.Json.JsonProperty("City", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string City { get; set; }
    
        /// <summary>This type represents the state and province values that the Symbility API supports.
        /// 
        /// **STATE VALUES – UNITED STATES**: Alabama, Alaska, Arizona, Arkansas, California, Colorado, Connecticut, Delaware, DistrictOfColumbia, 
        /// Florida, Georgia, Hawaii, Idaho, Illinois, Indiana, Iowa, Kansas, Kentucky, Louisiana, Maine, Maryland, Massachusetts, Michigan, Minnesota, 
        /// Mississippi, Missouri, Montana, Nebraska, Nevada, NewHampshire, NewJersey, NewMexico, NewYork, NorthCarolina, NorthDakota, Ohio, Oklahoma, 
        /// Oregon, Pennsylvania, PuertoRico, RhodeIsland, SouthCarolina, SouthDakota, Tennessee, Texas, Utah, Vermont, Virginia, Washington, WestVirginia, 
        /// Wisconsin, Wyoming, VirginIslands
        /// 
        /// **PROVINCE VALUES – CANADA**: Alberta, BritishColumbia, Manitoba, NewBrunswick, Newfoundland, NorthwestTerritories, NovaScotia, Nunavut, 
        /// Ontario, PrinceEdwardIsland, Quebec, Saskatchewan, YukonTerritory
        /// 
        /// **COUNTY VALUES – UNITED KINGDOM**: 
        /// 
        /// **General**: UnitedKingdomNone
        /// 
        /// **England**: Bedfordshire, Berkshire, Buckinghamshire, Cambridgeshire, Cheshire, Cornwall, Cumberland, Derbyshire, Devon, Dorset, Durham,
        /// EastRidingOfYorkshire, Essex, Gloucestershire, Hampshire, Herefordshire, Hertfordshire, Huntingdonshire, IsleOfWight, Kent, Lancashire, 
        /// Leicestershire, Lincolnshire, Middlesex, Norfolk, NorthRidingOfYorkshire, Northamptonshire, Northumberland, Nottinghamshire, Oxfordshire, 
        /// Rutland, Shropshire, Somerset, Staffordshire, Suffolk, Surrey, Sussex, Warwickshire, WestRidingOfYorkshire, Westmorland, Wiltshire, 
        /// Worcestershire, Yorkshire, West Midlands
        /// 
        /// **Northern Ireland**: Antrim, Armagh, Down, Fermanagh, Londonderry, Tyrone
        /// 
        /// **Wales**: Anglesey, Breconshire, Caernarfonshire, Cardiganshire, Carmarthenshire, Denbighshire, Flintshire, Glamorgan, Merioneth, 
        /// Monmouthshire, Montgomeryshire, Pembrokeshire, Radnorshire
        /// 
        /// **Scotland**: Aberdeenshire, AngusForfarshire, Argyll, Ayrshire, Banffshire, Berwickshire, Bute, Caithness, Clackmannanshire, Dumfriesshire,
        /// Dunbartonshire, EastLothian, Fife, InvernessShire, Kincardineshire, KinrossShire, Kirkcudbrightshire, Lanarkshire, Midloathian, Moray, 
        /// Nairnshire, Orkney, Peeblesshire, Perthshire, Renfrewshire, RossAndCromarty, Roxburghshire, Selkirkshire, Shetland, Stirlingshire, 
        /// Sutherland, WestLothian, Wigtownshire
        /// 
        /// **PROVINCE VALUES – SOUTH AFRICA**: SouthAfricaNone, EasternCape, FreeState, Gauteng, KwaZuluNatal, Limpopo, Mpumalanga, NorthWest, NorthernCape, WesternCape
        /// 
        /// **PROVINCE VALUES – GERMANY**: GermanyNone
        /// 
        /// **COUNTY VALUES – AUSTRALIA**: AustralianCapitalTerritory, NewSouthWales, NorthenTerritory, Queensland, southAustralia, Tasmania, Victoria, Westernaustralia
        /// 
        /// **PROVINCE VALUES – NETHERLANDS**: Drenthe, Flevoland, Friesland, Gelderland, Groningen, LimburgNE, NoordBrabant, NoordHolland, Overijssel, Utrecht, Zeeland, ZuidHolland
        /// 
        /// **DISTRICT VALUES – LUXEMBOURG**: Diekirch, Grevenmacher, Luxembourg
        /// 
        /// **PROVINCE VALUES – TURKEY**: Adana, Adiyaman, Afyonkarahisar, Agri, Aksaray, Amasya, Ankara, Antalya, Ardahan, Artvin, Aydin, Balikesir, 
        /// Bartin, Batman, Bayburt, Bilecik, Bingol, Bitlis, Bolu, Burdur, Bursa, Canakkale, Cankiri, Corum, Denizli, Diyarbakir, Duzce, Edirne, Elazig, 
        /// Erzincan, Erzurum, Eskisehir, Gaziantep, Giresum, Gumushane, Hakkari, Hatay, Igdir, Isparta, Istanbul, Izmir, Kahramanmaras, Karabuk, Karaman, 
        /// Kars, Kastamonu, Kayseri, Kilis, Kirikkale, Kirklareli, Kirsehir, Kocaeli, Konya, Kutahya, Malatya, Manisa, Mardin, Mersin, Mugla, Mus, Nevsehir, 
        /// Nigde, Ordu, Osmaniye, Rize, Sakarya, Samsun, Sanliurfa, Siirt, Sinop, Sirnak, Sivas, Tekirdag, Tokat, Trabzon, Tunceli, Usak, Van, Yalova, Yozgat, Zonguldak
        /// 
        /// **PROVINCE VALUES – JAPAN**: Aichi, Akita, Aomori, Chiba, Ehime, Fukui, Fukushima, Gifu, Gumma, Hiroshima, Hokkaido, Hyogo, Ibaraki, Ishikawa,
        /// Iwate, Kagawa, Kagoshima, Kanagawa, Kochi, Kumamoto, Kyoto, Mie, Miyagi, Miyazaki, Nagano, Nagasaki, Nara, Niigata, Oita, Okayama, Okinawa, Osaka, 
        /// Saga, Saitama, Shiga, Shimane, Shizuoka, Tochigi, Tokushima, Tokyo, Tottori, Toyama, Wakayama, Yamagata, Yamaguchi, Yamanashi
        /// 
        /// **PROVINCE VALUES – SPAIN**: Andalusia, Aragon, Asturias, BalearicIslands, BasqueCountry, CanaryIslands, Cantabria, CastileandLeon, CastileLaMancha, 
        /// Catalonia, Ceuta, Extremadura, Galicia, LaRioja, Madrid, Melilla, Murcia, Navarra, Valencia, SpainNone
        /// 
        /// **DEPARTMENT VALUES – FRANCE**: Ain, Aisne, Allier, AlpesDeHautProvence, HautesAlpes, AlpesMaritimes, Ardeche, Ardennes, Ariege, Aube, Aude, 
        /// Aveyron, BouchesDuRhone, Calvadaos, Cantal, Charente, CharentreMaritime, Cher, Correze, CorseDuSud, HauteCorse, CodeDor, CotesDArmor, Creuse, 
        /// Dordogne, Doubs, Drome, Eure, EureEtLoir, Finisete, Gard, HauteGaronne, Gers, Gironde, Herault, IlleEtVilaine, Indre, IndreEtLoire, Isere, Jura, 
        /// Landes, LoirEtCher, Loire, HaureLoire, LoireAtlantique, Loiret, Lot, LotEtGaronne, Lozere, MaineEtLoire, Manche, Marne, HauteMare, Mayenne,
        /// MeurtheEtMoselle, Meuse, Morbihan, Moselle, Nievre, Nord, Oise, Orne, PasDeCalais, PuyDeDome, PyreneesAtlantiques, HautesPyrenees, PyreneesOrientales, 
        /// BasRhin, HautRhin, Rhone, HaureSaone, SaoneEtLoire, Sarthe, Savoie, HauteSavoie, Paris, SeineMaritime, SeineEtMarne, Yvelines, DeuxSevres, Somme, Tarn, 
        /// TarnEtGaronne, Var, Vaucluse, Vendee, Vienne, HauteVienne, Vosges, Yonne, TerritoireDeBelfort, Essonne, HautsDeSeine, SeineSaintDenis, ValDeMarne, ValDOise,
        /// Gaudelope, Martinique, Guyane, LaReuinion, Mayotte, FranceNone
        /// 
        /// **COUNTY VALUES – IRELAND**: Carlow, Cavan, Clarke, Cork, Donegal, Dublin, Galway, Kerry, Kildare, Kilkenny, Laois, Leitrim, Limerick, LongFord, 
        /// Louth, Mayo, Meath, Monaghan, Offaly, Roscommon, Sligo, Tipperary, Waterford, Wastmeath, Wexford, Wicklow
        /// 
        /// **STATE VALUES – POLAND**: Greater Poland, Holy Cross, Kuyavian-Pomerianian, Lesser Poland, Lódz, Lower Silesian, Lublin, Lubusz, Masovian, Opole, 
        /// Podlaskie, Pomerianian, Silesian, Subcarpathian, Warmiam-Masurian, West Pomeranian
        /// 
        /// **COUNTY VALUES – BELGIUM**: Antwerpen, BelgiumNone, Crussels Hoofdstedlijk Gewest, Henegouwen, Limburg, Luik, Luxemburg, Namen, Oost-Vlaanderen, 
        /// Vlaams Brabant, Waals Brabant, West-Vlaanderen
        /// 
        /// **STATE VALUES – NEW ZEALAND**: NewZealandNone
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public State State { get; set; }
    
        /// <summary>This type represents the country values that the Symbility API supports.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("Country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Country Country { get; set; }
    
        /// <summary>The zip code or postal code.</summary>
        [Newtonsoft.Json.JsonProperty("ZipCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ZipCode { get; set; }
    
        /// <summary>The latitude of the address.</summary>
        [Newtonsoft.Json.JsonProperty("Latitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Latitude { get; set; }
    
        /// <summary>The longitude of the address.</summary>
        [Newtonsoft.Json.JsonProperty("Longitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Longitude { get; set; }
    
    
    }
    
    /// <summary>This type represents the user group values that the Symbility API supports.
    /// 
    /// **Administrator**: The user is an administrator.
    ///             
    /// **PowerUser**: The user is a power user.
    /// 
    /// **Standard**: The user is a standard user.
    /// 
    /// **Junior**: The user is a junior user.
    /// 
    /// **Restricted**: The user is a restricted user.
    /// 
    /// **Guest**: The user is a guest user.
    /// 
    /// **TechnicalAdmin**: The user is a technical admin. 
    /// 
    /// **StandardAnalytics**: The user is a standard analytics / standard reports user.
    /// 
    /// **Deployment**: The user is a deployment user.
    /// 
    /// **SupplierManager**: The user is a supplier manager.
    /// 
    /// **ConfigurationAdmin**: The user is a configuration admin.
    /// 
    /// **ReadOnly**: The user is a read only user.
    /// 
    /// **ITHelpdesk**: The user is an IT Helpdesk user.
    /// 
    /// **OperationalManager**: The user is an operational manager.
    /// 
    /// **StandardAdmin**: The user is a standard admin.
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum UserGroup
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Administrator")]
        Administrator = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PowerUser")]
        PowerUser = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Standard")]
        Standard = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Junior")]
        Junior = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Restricted")]
        Restricted = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Guest")]
        Guest = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TechnicalAdmin")]
        TechnicalAdmin = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"StandardAnalytics")]
        StandardAnalytics = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Deployment")]
        Deployment = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SupplierManager")]
        SupplierManager = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ConfigurationAdmin")]
        ConfigurationAdmin = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ReadOnly")]
        ReadOnly = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ITHelpdesk")]
        ITHelpdesk = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OperationalManager")]
        OperationalManager = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"StandardAdmin")]
        StandardAdmin = 15,
    
    }
    
    /// <summary>This type represents the claim user role values that the Symbility API supports.
    /// 
    /// **None**: The user has no role.
    /// 
    /// **Creator**: The user is the creator of the claim.
    /// 
    /// **Participant**: The user is participating in the claim.
    /// 
    /// **GuestParticipant**: The user is a guest and is participating in the claim. 
    /// 
    /// **Assignee**: The user is an assignee in the claim.
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ClaimUserRole
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Creator")]
        Creator = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Participant")]
        Participant = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GuestParticipant")]
        GuestParticipant = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Assignee")]
        Assignee = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 4,
    
    }
    
    /// <summary>This type represents the user assignments status that the Symbility API supports.
    /// 
    /// **AcceptingAssignments**: Assignment status set to "accepting assignments"
    /// 
    /// **NotAcceptingAssignments**: Assignment status set to "not accepting assignments"
    /// 
    /// **AcceptingOnlyManualAssignment**: Assignment status set to "accepting only manual assignments"
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum UserAssigneeStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"AcceptingAssignments")]
        AcceptingAssignments = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NotAcceptingAssignments")]
        NotAcceptingAssignments = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AcceptingOnlyManualAssignment")]
        AcceptingOnlyManualAssignment = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 3,
    
    }
    
    /// <summary>This type represents a user when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class User 
    {
        /// <summary>The login name of the user on Claims Connect.</summary>
        [Newtonsoft.Json.JsonProperty("LoginName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string LoginName { get; set; }
    
        /// <summary>The title of the user (only applies to insured guest users).</summary>
        [Newtonsoft.Json.JsonProperty("Title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Title { get; set; }
    
        /// <summary>The first name of the user.</summary>
        [Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string FirstName { get; set; }
    
        /// <summary>The last name of the user.</summary>
        [Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string LastName { get; set; }
    
        /// <summary>The email address of the user.</summary>
        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Email { get; set; }
    
        /// <summary>This type represents the user group values that the Symbility API supports.
        /// 
        /// **Administrator**: The user is an administrator.
        ///             
        /// **PowerUser**: The user is a power user.
        /// 
        /// **Standard**: The user is a standard user.
        /// 
        /// **Junior**: The user is a junior user.
        /// 
        /// **Restricted**: The user is a restricted user.
        /// 
        /// **Guest**: The user is a guest user.
        /// 
        /// **TechnicalAdmin**: The user is a technical admin. 
        /// 
        /// **StandardAnalytics**: The user is a standard analytics / standard reports user.
        /// 
        /// **Deployment**: The user is a deployment user.
        /// 
        /// **SupplierManager**: The user is a supplier manager.
        /// 
        /// **ConfigurationAdmin**: The user is a configuration admin.
        /// 
        /// **ReadOnly**: The user is a read only user.
        /// 
        /// **ITHelpdesk**: The user is an IT Helpdesk user.
        /// 
        /// **OperationalManager**: The user is an operational manager.
        /// 
        /// **StandardAdmin**: The user is a standard admin.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("UserGroup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserGroup UserGroup { get; set; }
    
        /// <summary>This type represents the claim user role values that the Symbility API supports.
        /// 
        /// **None**: The user has no role.
        /// 
        /// **Creator**: The user is the creator of the claim.
        /// 
        /// **Participant**: The user is participating in the claim.
        /// 
        /// **GuestParticipant**: The user is a guest and is participating in the claim. 
        /// 
        /// **Assignee**: The user is an assignee in the claim.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("Role", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ClaimUserRole Role { get; set; }
    
        /// <summary>The Symbility company ID of the head office.</summary>
        [Newtonsoft.Json.JsonProperty("HeadOfficeCompanyID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string HeadOfficeCompanyID { get; set; }
    
        /// <summary>The Symbility company ID.</summary>
        [Newtonsoft.Json.JsonProperty("CompanyID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string CompanyID { get; set; }
    
        /// <summary>The external system company code if defined in the API account.</summary>
        [Newtonsoft.Json.JsonProperty("ExternalSystemCompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ExternalSystemCompanyCode { get; set; }
    
        /// <summary>The company/branch name the user belongs to.</summary>
        [Newtonsoft.Json.JsonProperty("CompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string CompanyName { get; set; }
    
        /// <summary>The specific role of the user as defined in the Claim Defaults and Claim Participants page in Claims Connect (for
        /// example, "Adjuster", "Supervisor", "Manager", etc.).</summary>
        [Newtonsoft.Json.JsonProperty("UserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string UserRole { get; set; }
    
        /// <summary>The phone number of the user.</summary>
        [Newtonsoft.Json.JsonProperty("Phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Phone { get; set; }
    
        /// <summary>This type represents the user assignments status that the Symbility API supports.
        /// 
        /// **AcceptingAssignments**: Assignment status set to "accepting assignments"
        /// 
        /// **NotAcceptingAssignments**: Assignment status set to "not accepting assignments"
        /// 
        /// **AcceptingOnlyManualAssignment**: Assignment status set to "accepting only manual assignments"
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("AssigneeStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserAssigneeStatus AssigneeStatus { get; set; }
    
    
    }
    
    /// <summary>This type represents a company when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Company 
    {
        /// <summary>This type represents the company type values that the Symbility API supports.
        /// 
        /// **InsuranceCompany**: The company is an insurance company.
        /// 
        /// **IndependentAdjuster**: The company is an independent adjuster.
        /// 
        /// **Contractor**: The company is a contractor.
        /// 
        /// **IntermediaryClaimManagementCompany**: The company is an intermediary - claim management company.
        /// 
        /// **IntermediaryContractorNetwork**: The company is an intermediary - contractor network.
        /// 
        /// **IntermediaryIndependentAdjuster**: The company is an intermediary - independent adjuster.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("CompanyType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CompanyType CompanyType { get; set; }
    
        /// <summary>The Symbility company ID of the head office.</summary>
        [Newtonsoft.Json.JsonProperty("HeadOfficeCompanyID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string HeadOfficeCompanyID { get; set; }
    
        /// <summary>The Symbility company ID.</summary>
        [Newtonsoft.Json.JsonProperty("CompanyID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string CompanyID { get; set; }
    
        /// <summary>The external system company code if defined in the API account.</summary>
        [Newtonsoft.Json.JsonProperty("ExternalSystemCompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ExternalSystemCompanyCode { get; set; }
    
        /// <summary>The name of the company.</summary>
        [Newtonsoft.Json.JsonProperty("CompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string CompanyName { get; set; }
    
        /// <summary>The first name of the company.</summary>
        [Newtonsoft.Json.JsonProperty("ContactFirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ContactFirstName { get; set; }
    
        /// <summary>The last name of the company.</summary>
        [Newtonsoft.Json.JsonProperty("ContactLastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ContactLastName { get; set; }
    
        /// <summary>The phone number of the company.</summary>
        [Newtonsoft.Json.JsonProperty("Phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Phone { get; set; }
    
        /// <summary>The mobile phone number of the company.</summary>
        [Newtonsoft.Json.JsonProperty("MobilePhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string MobilePhone { get; set; }
    
        /// <summary>The fax number of the company.</summary>
        [Newtonsoft.Json.JsonProperty("Fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Fax { get; set; }
    
        /// <summary>The email address of the contact within the company.</summary>
        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Email { get; set; }
    
        /// <summary>The address of the company.</summary>
        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }
    
        /// <summary>The users of the company.</summary>
        [Newtonsoft.Json.JsonProperty("Users", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<User> Users { get; set; }
    
    
    }
    
    /// <summary>This type represents a CustomField when using the Symbility API.
    /// 
    /// When getting the custom field values through the Symbility API, the values will always be returned in a string format
    /// following the XML specifications for the basic data types.
    /// 
    /// When setting custom field values, the same rule must be followed.
    /// 
    /// Following is the list of custom field types supported by Claims Connect:
    /// 
    /// **Checkbox**: The field is a boolean value.
    /// Examples: "true", "false"
    /// 
    /// **Currency**: The field is a decimal value.
    /// Examples: "-35.48", "1329.33"
    /// 
    /// **Date**: The field is a date value.
    /// Examples: "2006-02-01", "2005-12-20"
    /// 
    /// **Decimal**: The field is a decimal value.
    /// Examples: "-35.48", "1329.33"
    /// 
    /// **Integer**: The field is an integer value.
    /// Examples: "342", "-5"
    /// 
    /// **List**: The field is a string value.
    /// Examples: "List element 1", "List item 2"
    /// 
    /// **Percentage**: The field is a decimal value.
    /// Examples: "0.5" (50%), "0.03" (3%)
    /// 
    /// **Time**: The field is a time value.
    /// Examples: "13:30:00", "8:15:34"
    /// 
    /// **Date**: The field is a date value.
    /// Examples: "2006-02-01", "2005-12-20"</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CustomField 
    {
        /// <summary>The name of the custom field.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Name { get; set; }
    
        /// <summary>The value of the custom field.</summary>
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Value { get; set; }
    
    
    }
    
    /// <summary>This type represents a claim assignment in the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ClaimAssignment 
    {
        /// <summary>The identifier of the assignment.</summary>
        [Newtonsoft.Json.JsonProperty("AssignmentID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AssignmentID { get; set; }
    
        /// <summary>The identifier of the assignment from which the current assignment originated. The value will be 0 for originator
        /// assignments.</summary>
        [Newtonsoft.Json.JsonProperty("ParentAssignmentID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ParentAssignmentID { get; set; }
    
        /// <summary>The type of the assignment.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Name { get; set; }
    
        /// <summary>The name of the assignment.</summary>
        [Newtonsoft.Json.JsonProperty("FriendlyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string FriendlyName { get; set; }
    
        /// <summary>The code used for selecting the assignment type.</summary>
        [Newtonsoft.Json.JsonProperty("AssignmentTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AssignmentTypeCode { get; set; }
    
        /// <summary>This type represents the type of claim assignment.
        /// 
        /// **Internal**: The claim assignment is to an internal user.
        /// 
        /// **External**: The claim assignment is to another company.</summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ClaimAssignmentType Type { get; set; }
    
        /// <summary>This type represents the claim assignment status values that the Symbility API supports.
        /// 
        /// **None**: The claim is not assigned to a company.
        /// 
        /// **AssignmentSent**: The claim assignment has been sent.
        /// 
        /// **AssignmentReceived**: The claim assignment has been received.
        /// 
        /// **InsuredContacted**: The insured has been contacted.
        /// 
        /// **InspectionPerformed**: The inspection has been performed.
        /// 
        /// **InspectionScheduled**: The inspection has been scheduled.
        /// 
        /// **MitigationWorkStarted**: The mitigation work has started.
        /// 
        /// **MitigationWorkCompleted**: The mitigation work has been completed.
        /// 
        /// **EstimateReadyForReview**: One or many estimates have been marked Ready for Review.
        /// 
        /// **EstimateCompleted**: One or many estimates have been completed.
        /// 
        /// **EstimateApproved**: One or many estimates have been approved.
        /// 
        /// **JobScheduled**: The job's start and completion dates have been scheduled.
        /// 
        /// **JobNotSold**: The claim assignment has been marked Job Not Sold.
        /// 
        /// **JobStarted**: The job has been started. 
        /// 
        /// **JobCompleted**: The job has been completed.
        /// 
        /// **AssignmentCompleted**: The claim assignment has been completed.
        /// 
        /// **AssignmentCancelled**: The claim assignment has been cancelled.
        /// 
        /// **AssignmentDeclined**: The claim assignment has been declined.
        /// 
        /// **AssignmentReopened**: The claim assignment has been reopened.
        /// 
        /// **Multiple**: The claim has multiple claim assignment statuses.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ClaimAssignmentStatus Status { get; set; }
    
        /// <summary>Notes on the assignment.</summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }
    
        /// <summary>The company the claim was assigned by.</summary>
        [Newtonsoft.Json.JsonProperty("AssignedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Company AssignedBy { get; set; }
    
        /// <summary>The company the claim is assigned to.</summary>
        [Newtonsoft.Json.JsonProperty("Assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Company Assignee { get; set; }
    
        /// <summary>The user the claim is assigned to.</summary>
        [Newtonsoft.Json.JsonProperty("InternalAssignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User InternalAssignee { get; set; }
    
        /// <summary>The date and time (UTC) the assignment was sent.</summary>
        [Newtonsoft.Json.JsonProperty("AssignmentSentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AssignmentSentDate { get; set; }
    
        /// <summary>The date and time (UTC) the assignment was received.</summary>
        [Newtonsoft.Json.JsonProperty("AssignmentReceivedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AssignmentReceivedDate { get; set; }
    
        /// <summary>The date and time (UTC) the insured was contacted as recorded by the system.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredContactedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InsuredContactedDate { get; set; }
    
        /// <summary>The date and time (UTC) the insured was contacted as entered by the user.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredContactedUserDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InsuredContactedUserDate { get; set; }
    
        /// <summary>The date and time (UTC) the inspection was scheduled as recorded by the system.</summary>
        [Newtonsoft.Json.JsonProperty("InspectionScheduledDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InspectionScheduledDate { get; set; }
    
        /// <summary>The date and time (UTC) the inspection was scheduled as entered by the user.</summary>
        [Newtonsoft.Json.JsonProperty("InspectionScheduledUserDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InspectionScheduledUserDate { get; set; }
    
        /// <summary>The date and time (UTC) when the inspection is going to be done.</summary>
        [Newtonsoft.Json.JsonProperty("InspectionAppointmentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InspectionAppointmentDate { get; set; }
    
        /// <summary>The date and time (UTC) the inspection was performed as recorded by the system.</summary>
        [Newtonsoft.Json.JsonProperty("InspectionPerformedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InspectionPerformedDate { get; set; }
    
        /// <summary>The date and time (UTC) the inspection was performed as entered by the user.</summary>
        [Newtonsoft.Json.JsonProperty("InspectionPerformedUserDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InspectionPerformedUserDate { get; set; }
    
        /// <summary>The date and time (UTC) the mitigation work was started as recorded by the system.</summary>
        [Newtonsoft.Json.JsonProperty("MitigationWorkStartedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? MitigationWorkStartedDate { get; set; }
    
        /// <summary>The date and time (UTC) the mitigation work was started as entered by the user.</summary>
        [Newtonsoft.Json.JsonProperty("MitigationWorkStartedUserDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? MitigationWorkStartedUserDate { get; set; }
    
        /// <summary>The date and time (UTC) the mitigation work was completed as entered by the system.</summary>
        [Newtonsoft.Json.JsonProperty("MitigationWorkCompletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? MitigationWorkCompletedDate { get; set; }
    
        /// <summary>The date and time (UTC) the mitigation work was completed as recorded by user.</summary>
        [Newtonsoft.Json.JsonProperty("MitigationWorkCompletedUserDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? MitigationWorkCompletedUserDate { get; set; }
    
        /// <summary>The date and time (UTC) the estimate was marked as ready for review.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateReadyForReviewDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EstimateReadyForReviewDate { get; set; }
    
        /// <summary>The date and time (UTC) the estimate was completed.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateCompletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EstimateCompletedDate { get; set; }
    
        /// <summary>The date and time (UTC) the estimate was approved.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateApprovedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EstimateApprovedDate { get; set; }
    
        /// <summary>The date and time (UTC) the job was scheduled as recorded by the system.</summary>
        [Newtonsoft.Json.JsonProperty("JobScheduledDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? JobScheduledDate { get; set; }
    
        /// <summary>The date and time (UTC) the job was scheduled as recorded by the user.</summary>
        [Newtonsoft.Json.JsonProperty("JobScheduledUserDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? JobScheduledUserDate { get; set; }
    
        /// <summary>The date and time (UTC) the assignment was marked Job Not Sold.</summary>
        [Newtonsoft.Json.JsonProperty("JobNotSoldDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? JobNotSoldDate { get; set; }
    
        /// <summary>The date and time (UTC) the job was started.</summary>
        [Newtonsoft.Json.JsonProperty("JobStartedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? JobStartedDate { get; set; }
    
        /// <summary>The date and time (UTC) the job was started as entered by the user.</summary>
        [Newtonsoft.Json.JsonProperty("JobStartedUserDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? JobStartedUserDate { get; set; }
    
        /// <summary>The date and time (UTC) the job was completed.</summary>
        [Newtonsoft.Json.JsonProperty("JobCompletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? JobCompletedDate { get; set; }
    
        /// <summary>The date and time (UTC) job was completed as entered by the user.</summary>
        [Newtonsoft.Json.JsonProperty("JobCompletedUserDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? JobCompletedUserDate { get; set; }
    
        /// <summary>The date and time (UTC) the job was scheduled to start.</summary>
        [Newtonsoft.Json.JsonProperty("JobScheduledJobStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? JobScheduledJobStartDate { get; set; }
    
        /// <summary>The date and time (UTC) the job was scheduled to complete.</summary>
        [Newtonsoft.Json.JsonProperty("JobScheduledJobCompleteDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? JobScheduledJobCompleteDate { get; set; }
    
        /// <summary>The date and time (UTC) the assignment was completed.</summary>
        [Newtonsoft.Json.JsonProperty("AssignmentCompletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AssignmentCompletedDate { get; set; }
    
        /// <summary>The date and time (UTC) the assignment was cancelled.</summary>
        [Newtonsoft.Json.JsonProperty("AssignmentCancelledDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AssignmentCancelledDate { get; set; }
    
        /// <summary>The date and time (UTC) the assignment was reopened.</summary>
        [Newtonsoft.Json.JsonProperty("AssignmentReopenedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AssignmentReopenedDate { get; set; }
    
        /// <summary>Assignments custom fields</summary>
        [Newtonsoft.Json.JsonProperty("CustomFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomField> CustomFields { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ResultDetailLevel
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ResultDetailCategory
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Authentication")]
        Authentication = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lookup")]
        Lookup = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Miscellaneous")]
        Miscellaneous = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Validation")]
        Validation = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unspecified")]
        Unspecified = 4,
    
    }
    
    /// <summary>This type represents a result detail when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ResultDetail 
    {
        /// <summary>The level of the result detail.</summary>
        [Newtonsoft.Json.JsonProperty("Level", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResultDetailLevel Level { get; set; }
    
        /// <summary>The category of the result detail.</summary>
        [Newtonsoft.Json.JsonProperty("Category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResultDetailCategory Category { get; set; }
    
        /// <summary>The error/warning number associated with this result detail (see the [list of error codes](#tag/Error-Codes) for possible values).</summary>
        [Newtonsoft.Json.JsonProperty("Number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Number { get; set; }
    
        /// <summary>String representation of the error/warning number (see the [list of error codes](#tag/Error-Codes) for possible values).</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>The error/warning message text describing in detail the issue.</summary>
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DiagramOptions : System.Collections.ObjectModel.Collection<DiagramOptionsFlags>
    {
    
    }
    
    /// <summary>This type represents the diagram type values that the Symbility API supports.
    /// 
    /// **FloorPlan**: The diagram is a floor plan.
    /// 
    /// **RoofPlan**: The diagram is a roof plan.
    /// 
    /// **ExteriorPlan**: The diagram is an exterior plan.
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DiagramType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"FloorPlan")]
        FloorPlan = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RoofPlan")]
        RoofPlan = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExteriorPlan")]
        ExteriorPlan = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 3,
    
    }
    
    /// <summary>This type represents the diagram object type values that the Symbility API supports.
    /// 
    /// **Room**: The diagram object is a room.
    /// 
    /// **Roof**: The diagram object is a roof.
    /// 
    /// **GeneralItems**: The diagram object is a general items box.
    /// 
    /// **ExteriorPlan**: The diagram object is an exterior plan.
    /// 
    /// **Staircase**: The diagram object is a staircase.
    /// 
    /// **PartialRoom**: The diagram object is a partial room.
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DiagramObjectType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Room")]
        Room = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Roof")]
        Roof = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GeneralItems")]
        GeneralItems = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExteriorPlan")]
        ExteriorPlan = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Staircase")]
        Staircase = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartialRoom")]
        PartialRoom = 6,
    
    }
    
    /// <summary>This type represents a diagram object when using the Symbility API.
    /// 
    /// A diagram object is a diagram element to which estimate items can be linked to (ex: a room, a roof, a general items
    /// box).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DiagramObject 
    {
        /// <summary>The ID of the parent diagram.</summary>
        [Newtonsoft.Json.JsonProperty("DiagramID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DiagramID { get; set; }
    
        /// <summary>The identifier of the diagram object.</summary>
        [Newtonsoft.Json.JsonProperty("DiagramObjectID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DiagramObjectID { get; set; }
    
        /// <summary>The name of the diagram object.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Name { get; set; }
    
        /// <summary>This type represents the diagram object type values that the Symbility API supports.
        /// 
        /// **Room**: The diagram object is a room.
        /// 
        /// **Roof**: The diagram object is a roof.
        /// 
        /// **GeneralItems**: The diagram object is a general items box.
        /// 
        /// **ExteriorPlan**: The diagram object is an exterior plan.
        /// 
        /// **Staircase**: The diagram object is a staircase.
        /// 
        /// **PartialRoom**: The diagram object is a partial room.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagramObjectType Type { get; set; }
    
    
    }
    
    /// <summary>This type represents a diagram when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Diagram 
    {
        /// <summary>The identifier of the diagram.</summary>
        [Newtonsoft.Json.JsonProperty("DiagramID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DiagramID { get; set; }
    
        /// <summary>The identifier of the parent diagram (if value is different than 0, indicates that the parent diagram is locked).</summary>
        [Newtonsoft.Json.JsonProperty("ParentDiagramID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ParentDiagramID { get; set; }
    
        /// <summary>The identifier of the claim assignment.</summary>
        [Newtonsoft.Json.JsonProperty("AssignmentID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AssignmentID { get; set; }
    
        /// <summary>The Symbility company ID of the head office of the author of the diagram.</summary>
        [Newtonsoft.Json.JsonProperty("AuthorHeadOfficeCompanyID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string AuthorHeadOfficeCompanyID { get; set; }
    
        /// <summary>The Symbility company ID of the author of the diagram.</summary>
        [Newtonsoft.Json.JsonProperty("AuthorCompanyID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string AuthorCompanyID { get; set; }
    
        /// <summary>The external system company code of the author if defined in the API account.</summary>
        [Newtonsoft.Json.JsonProperty("AuthorExternalSystemCompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AuthorExternalSystemCompanyCode { get; set; }
    
        /// <summary>The company name of the author of the diagram.</summary>
        [Newtonsoft.Json.JsonProperty("AuthorCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string AuthorCompanyName { get; set; }
    
        /// <summary>The name of the diagram.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Name { get; set; }
    
        /// <summary>This type represents the diagram options that the Symbility API supports. 
        /// This is a bit field, a set of flags, the DiagramOptions can be one or more of the following values.
        /// 
        /// **Locked**: The diagram is locked.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("Options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagramOptions Options { get; set; }
    
        /// <summary>This type represents the diagram type values that the Symbility API supports.
        /// 
        /// **FloorPlan**: The diagram is a floor plan.
        /// 
        /// **RoofPlan**: The diagram is a roof plan.
        /// 
        /// **ExteriorPlan**: The diagram is an exterior plan.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagramType Type { get; set; }
    
        /// <summary>The list of objects in the diagram.</summary>
        [Newtonsoft.Json.JsonProperty("DiagramObjects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DiagramObject> DiagramObjects { get; set; }
    
    
    }
    
    /// <summary>This type represents the estimate status values that the Symbility API supports.
    /// 
    /// **InProgress**: The estimate is in progress.
    /// 
    /// **ReadyForReview**: The estimate is ready for review.
    /// 
    /// **RejectedReview**: The estimate has been rejected (review).
    /// 
    /// **Completed**: The estimate has been completed.
    /// 
    /// **RejectedApproval**: The estimate has been rejected (approval).
    /// 
    /// **Approved**: The estimate has been approved. 
    /// 
    /// **Cancelled**: The estimate has been cancelled.
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum EstimateStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"InProgress")]
        InProgress = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Completed")]
        Completed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Approved")]
        Approved = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ReadyForReview")]
        ReadyForReview = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RejectedReview")]
        RejectedReview = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RejectedApproval")]
        RejectedApproval = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class EstimateOptions : System.Collections.ObjectModel.Collection<EstimateOptionsFlags>
    {
    
    }
    
    /// <summary>This type represents the types of claim minimum charge that the Symbility API supports.
    /// 
    /// **MinimumChargeOnTotal**: The minimum charge is based on the sum of all component costs.
    /// 
    /// **MinimumChargePerComponentUpToTotal**: The minimum charge is based on individual components not meeting their 
    /// component minimum charge, up to the minimum charge total.
    /// 
    /// **MinimumChargePerComponent**: The minimum charge is based on individual components not meeting their component minimum charge.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ClaimMinimumChargeType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MinimumChargeOnTotal")]
        MinimumChargeOnTotal = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MinimumChargePerComponentUpToTotal")]
        MinimumChargePerComponentUpToTotal = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MinimumChargePerComponent")]
        MinimumChargePerComponent = 2,
    
    }
    
    /// <summary>This type represents the claim minimum charge info when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ClaimMinimumCharge 
    {
        /// <summary>True to use adjustments for minimum charges.</summary>
        [Newtonsoft.Json.JsonProperty("UseMinimumChargeAdjustments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UseMinimumChargeAdjustments { get; set; } = true;
    
        /// <summary>This type represents the types of claim minimum charge that the Symbility API supports.
        /// 
        /// **MinimumChargeOnTotal**: The minimum charge is based on the sum of all component costs.
        /// 
        /// **MinimumChargePerComponentUpToTotal**: The minimum charge is based on individual components not meeting their 
        /// component minimum charge, up to the minimum charge total.
        /// 
        /// **MinimumChargePerComponent**: The minimum charge is based on individual components not meeting their component minimum charge.</summary>
        [Newtonsoft.Json.JsonProperty("MinimumChargeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ClaimMinimumChargeType MinimumChargeType { get; set; }
    
        /// <summary>True if overhead and profit are calculated on minimum charge adjustments.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyOverheadAndProfitToMinimumCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplyOverheadAndProfitToMinimumCharge { get; set; } = true;
    
        /// <summary>True if taxes are calculated on minimum charge adjustments.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTaxesToMinimumCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplyTaxesToMinimumCharge { get; set; } = true;
    
    
    }
    
    /// <summary>This type represents the claim tax info when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ClaimTaxInfo 
    {
        /// <summary>True if Tax1 is applied to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("UseTax1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UseTax1 { get; set; } = false;
    
        /// <summary>The name of Tax1.</summary>
        [Newtonsoft.Json.JsonProperty("Tax1Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string Tax1Name { get; set; }
    
        /// <summary>True if Tax1 should be applied to materials.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax1ToMaterials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplyTax1ToMaterials { get; set; } = true;
    
        /// <summary>True if Tax1 should be applied to labor.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax1ToLabor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplyTax1ToLabor { get; set; } = true;
    
        /// <summary>True if Tax1 should be applied to equipment.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax1ToEquipment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplyTax1ToEquipment { get; set; } = true;
    
        /// <summary>True if Tax1 should be applied to market conditions.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax1ToMarketConditions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplyTax1ToMarketConditions { get; set; } = true;
    
        /// <summary>True if Tax1 should be applied to market conditions.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax1ToOverheadAndProfit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplyTax1ToOverheadAndProfit { get; set; } = true;
    
        /// <summary>True if Tax1 applicability is overridden for some items in the estimate</summary>
        [Newtonsoft.Json.JsonProperty("IsTax1OverriddenForSomeItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTax1OverriddenForSomeItems { get; set; }
    
        /// <summary>True if Tax2 is applied to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("UseTax2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UseTax2 { get; set; } = false;
    
        /// <summary>The name of Tax2.</summary>
        [Newtonsoft.Json.JsonProperty("Tax2Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string Tax2Name { get; set; }
    
        /// <summary>True if Tax2 should be applied to materials.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax2ToMaterials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplyTax2ToMaterials { get; set; } = true;
    
        /// <summary>True if Tax2 should be applied to labor.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax2ToLabor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplyTax2ToLabor { get; set; } = true;
    
        /// <summary>True if Tax2 should be applied to equipment.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax2ToEquipment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplyTax2ToEquipment { get; set; } = true;
    
        /// <summary>True if Tax2 should be applied to market conditions.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax2ToMarketConditions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplyTax2ToMarketConditions { get; set; } = true;
    
        /// <summary>True if Tax2 should be applied to overhead and profit.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax2ToOverheadAndProfit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplyTax2ToOverheadAndProfit { get; set; } = true;
    
        /// <summary>True if Tax2 applicability is overridden for some items in the estimate</summary>
        [Newtonsoft.Json.JsonProperty("IsTax2OverriddenForSomeItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTax2OverriddenForSomeItems { get; set; }
    
        /// <summary>True if Tax3 is applied to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("UseTax3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UseTax3 { get; set; } = false;
    
        /// <summary>The name of Tax3.</summary>
        [Newtonsoft.Json.JsonProperty("Tax3Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string Tax3Name { get; set; }
    
        /// <summary>True if Tax3 should be applied to materials.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax3ToMaterials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplyTax3ToMaterials { get; set; } = true;
    
        /// <summary>True if Tax3 should be applied to labor.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax3ToLabor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplyTax3ToLabor { get; set; } = true;
    
        /// <summary>True if Tax3 should be applied to equipment.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax3ToEquipment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplyTax3ToEquipment { get; set; } = true;
    
        /// <summary>True if Tax3 should be applied to market conditions.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax3ToMarketConditions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplyTax3ToMarketConditions { get; set; } = true;
    
        /// <summary>True if Tax3 should be applied to overhead and profit.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax3ToOverheadAndProfit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplyTax3ToOverheadAndProfit { get; set; } = true;
    
        /// <summary>True if Tax3 applicability is overridden for some items in the estimate</summary>
        [Newtonsoft.Json.JsonProperty("IsTax3OverriddenForSomeItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTax3OverriddenForSomeItems { get; set; }
    
        /// <summary>True if Tax4 is applied to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("UseTax4", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UseTax4 { get; set; } = false;
    
        /// <summary>The name of Tax4.</summary>
        [Newtonsoft.Json.JsonProperty("Tax4Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string Tax4Name { get; set; }
    
        /// <summary>True if Tax4 should be applied to materials.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax4ToMaterials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplyTax4ToMaterials { get; set; } = true;
    
        /// <summary>True if Tax4 should be applied to labor.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax4ToLabor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplyTax4ToLabor { get; set; } = true;
    
        /// <summary>True if Tax4 should be applied to equipment.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax4ToEquipment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplyTax4ToEquipment { get; set; } = true;
    
        /// <summary>True if Tax4 should be applied to market conditions.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax4ToMarketConditions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplyTax4ToMarketConditions { get; set; } = true;
    
        /// <summary>True if Tax4 should be applied to overhead and profit.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax4ToOverheadAndProfit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplyTax4ToOverheadAndProfit { get; set; } = true;
    
        /// <summary>True if Tax4 applicability is overridden for some items in the estimate</summary>
        [Newtonsoft.Json.JsonProperty("IsTax4OverriddenForSomeItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTax4OverriddenForSomeItems { get; set; }
    
        /// <summary>True if Tax2 is calculated including the Tax1 total (cumulative taxes is possible when only two taxes are specified).</summary>
        [Newtonsoft.Json.JsonProperty("CumulativeTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CumulativeTaxes { get; set; } = true;
    
        /// <summary>The Tax1 percentage applied to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("Tax1Rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Tax1Rate { get; set; }
    
        /// <summary>The Tax2 percentage applied to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("Tax2Rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Tax2Rate { get; set; }
    
        /// <summary>The Tax3 percentage applied to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("Tax3Rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Tax3Rate { get; set; }
    
        /// <summary>The Tax4 percentage applied to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("Tax4Rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Tax4Rate { get; set; }
    
    
    }
    
    /// <summary>This type represents the claim overhead and profit info when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ClaimOverheadAndProfitInfo 
    {
        /// <summary>True if the profit is calculated including the overhead total.</summary>
        [Newtonsoft.Json.JsonProperty("CumulativeOverheadProfit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CumulativeOverheadProfit { get; set; } = true;
    
        /// <summary>True if the overhead and profit are calculated on the total cost; false if they are calculated on the actual cash value
        /// (total cost  depreciation)</summary>
        [Newtonsoft.Json.JsonProperty("CalculateOverheadProfitOnTotalCost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CalculateOverheadProfitOnTotalCost { get; set; } = true;
    
        /// <summary>The overhead percentage applied to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("OverheadRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? OverheadRate { get; set; }
    
        /// <summary>The profit percentage applied to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("ProfitRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? ProfitRate { get; set; }
    
    
    }
    
    /// <summary>This type represents an estimate subcoverage when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class EstimateSubcoverage 
    {
        /// <summary>The identifier of the subcoverage.</summary>
        [Newtonsoft.Json.JsonProperty("ClaimSubcoverageID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ClaimSubcoverageID { get; set; }
    
        /// <summary>The replacement cost amount of the subcoverage.</summary>
        [Newtonsoft.Json.JsonProperty("ReplacementCost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal ReplacementCost { get; set; }
    
        /// <summary>The total recoverable depreciation amount for the subcoverage.</summary>
        [Newtonsoft.Json.JsonProperty("TotalRecoverableDepreciation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalRecoverableDepreciation { get; set; }
    
        /// <summary>The total non-recoverable depreciation amount for the subcoverage.</summary>
        [Newtonsoft.Json.JsonProperty("TotalNonRecoverableDepreciation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalNonRecoverableDepreciation { get; set; }
    
        /// <summary>The deductible in total cost mode. (currency).</summary>
        [Newtonsoft.Json.JsonProperty("Deductible", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Deductible { get; set; }
    
        /// <summary>The deductible amount (ACV) applied to the subcoverage.</summary>
        [Newtonsoft.Json.JsonProperty("DeductibleActualCashValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal DeductibleActualCashValue { get; set; }
    
        /// <summary>The amount payable in total cost mode. (currency).</summary>
        [Newtonsoft.Json.JsonProperty("AmountPayableReplacementCost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal AmountPayableReplacementCost { get; set; }
    
        /// <summary>The amount payable (ACV) for the subcoverage.</summary>
        [Newtonsoft.Json.JsonProperty("AmountPayableActualCashValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal AmountPayableActualCashValue { get; set; }
    
        /// <summary>The additional deductible amount for the subcoverage if the depreciation is recovered.</summary>
        [Newtonsoft.Json.JsonProperty("AdditionalDeductibleIfDepreciationRecovered", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal AdditionalDeductibleIfDepreciationRecovered { get; set; }
    
        /// <summary>The amount payable for the subcoverage if the depreciation is recovered.</summary>
        [Newtonsoft.Json.JsonProperty("AmountPayableIfDepreciationRecovered", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal AmountPayableIfDepreciationRecovered { get; set; }
    
    
    }
    
    /// <summary>This type represents an estimate coverage when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class EstimateCoverage 
    {
        /// <summary>The identifier of the claim coverage.</summary>
        [Newtonsoft.Json.JsonProperty("ClaimCoverageID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ClaimCoverageID { get; set; }
    
        /// <summary>The replacement cost amount of the coverage (currency).</summary>
        [Newtonsoft.Json.JsonProperty("ReplacementCost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal ReplacementCost { get; set; }
    
        /// <summary>The total recoverable depreciation amount for the coverage (currency).</summary>
        [Newtonsoft.Json.JsonProperty("TotalRecoverableDepreciation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalRecoverableDepreciation { get; set; }
    
        /// <summary>The total non-recoverable depreciation amount for the coverage (currency).</summary>
        [Newtonsoft.Json.JsonProperty("TotalNonRecoverableDepreciation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalNonRecoverableDepreciation { get; set; }
    
        /// <summary>The deductible in total cost mode. (currency).</summary>
        [Newtonsoft.Json.JsonProperty("Deductible", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Deductible { get; set; }
    
        /// <summary>The deductible amount (ACV) applied to the coverage (currency).</summary>
        [Newtonsoft.Json.JsonProperty("DeductibleActualCashValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal DeductibleActualCashValue { get; set; }
    
        /// <summary>The amount payable in total cost mode. (currency).</summary>
        [Newtonsoft.Json.JsonProperty("AmountPayableReplacementCost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal AmountPayableReplacementCost { get; set; }
    
        /// <summary>The amount payable (ACV) for the coverage (currency).</summary>
        [Newtonsoft.Json.JsonProperty("AmountPayableActualCashValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal AmountPayableActualCashValue { get; set; }
    
        /// <summary>The additional deductible amount for the coverage if the depreciation is recovered (currency).</summary>
        [Newtonsoft.Json.JsonProperty("AdditionalDeductibleIfDepreciationRecovered", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal AdditionalDeductibleIfDepreciationRecovered { get; set; }
    
        /// <summary>The amount payable for the coverage if the depreciation is recovered (currency).</summary>
        [Newtonsoft.Json.JsonProperty("AmountPayableIfDepreciationRecovered", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal AmountPayableIfDepreciationRecovered { get; set; }
    
        /// <summary>The list of subcoverages for the current coverage.</summary>
        [Newtonsoft.Json.JsonProperty("Subcoverages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EstimateSubcoverage> Subcoverages { get; set; }
    
    
    }
    
    /// <summary>This type represents the available status of the estimate finalization in the Symbility API.
    /// 
    /// **None**: The estimate has not been finalized yet.
    /// 
    /// **CashSettled**: The estimate was settled by cash.
    /// 
    /// **Invoiced**: The estimate was invoiced.
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum EstimateFinalizationStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CashSettled")]
        CashSettled = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Invoiced")]
        Invoiced = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class EstimateItemLineType : System.Collections.ObjectModel.Collection<EstimateItemLineTypeFlags>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum EstimateItemSupplementType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Credit")]
        Credit = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Supplement")]
        Supplement = 2,
    
    }
    
    /// <summary>This type represents the unit of measures that the Symbility API supports.
    /// 
    /// **Basic values**: SquareFoot, LinearFoot, SquareYard, Each, Hour, CubicInch, CubicYard, CubicFoot, Day, Week, 
    /// Gallon, Pair, Roll, Room, Load, LinearInch, Ton, Square, SquareInch, Mile
    /// 
    /// **Grouping values**: Bag, Sroll, Section, Set, Sheet, VerticalLinearFoot, DoubleRoll, Bolt, Box, Bundle, BoardFeet, Piece\*, Minute\*
    /// 
    /// **Commercial values**: Percentage, Acre, OneHundred, LinearFeet100, SquareFeet100, Pound, LumpSum, OneThousand, BoardFeet100, LinearFeet100, 
    /// Month, SquareFeet100, Pack, SquareFootFormContactConcrete
    /// 
    /// **Metric values**: LinearCentimeter, LinearMeter, LinearKilometer, SquareCentimeter, SquareMeter, CubicMeter, LinearMillimeter
    /// 
    /// **Other values**: Number, Sum, TatamiMat, PintsPerDay, LitersPerDay, CubicFeetPerMinute, CubicMetersPerHour, SquareMeterXWeek, PieceXWeek, 
    /// KiloWattHour, MeterPerWeek, PiecePerDay
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ItemUnitOfMeasure
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SquareFoot")]
        SquareFoot = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LinearFoot")]
        LinearFoot = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SquareYard")]
        SquareYard = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Each")]
        Each = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Hour")]
        Hour = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CubicInch")]
        CubicInch = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CubicYard")]
        CubicYard = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CubicFoot")]
        CubicFoot = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gallon")]
        Gallon = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pair")]
        Pair = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Roll")]
        Roll = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Room")]
        Room = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Load")]
        Load = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LinearInch")]
        LinearInch = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ton")]
        Ton = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Square")]
        Square = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SquareInch")]
        SquareInch = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mile")]
        Mile = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bag")]
        Bag = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SRoll")]
        SRoll = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Section")]
        Section = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Set")]
        Set = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sheet")]
        Sheet = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VerticalLinearFoot")]
        VerticalLinearFoot = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DoubleRoll")]
        DoubleRoll = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bolt")]
        Bolt = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Box")]
        Box = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bundle")]
        Bundle = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BoardFeet")]
        BoardFeet = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Piece")]
        Piece = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Minute")]
        Minute = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Percentage")]
        Percentage = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Acre")]
        Acre = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OneHundred")]
        OneHundred = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LinearFeet100")]
        LinearFeet100 = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SquareFeet100")]
        SquareFeet100 = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pound")]
        Pound = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LumpSum")]
        LumpSum = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OneThousand")]
        OneThousand = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BoardFeet1000")]
        BoardFeet1000 = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LinearFeet1000")]
        LinearFeet1000 = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SquareFeet1000")]
        SquareFeet1000 = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pack")]
        Pack = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SquareFootFormContactConcrete")]
        SquareFootFormContactConcrete = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LinearCentimeter")]
        LinearCentimeter = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LinearMeter")]
        LinearMeter = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LinearKilometer")]
        LinearKilometer = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SquareCentimeter")]
        SquareCentimeter = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SquareMeter")]
        SquareMeter = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CubicMeter")]
        CubicMeter = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LinearMillimeter")]
        LinearMillimeter = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Number")]
        Number = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sum")]
        Sum = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tsubo")]
        Tsubo = 56,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Shakutsubo")]
        Shakutsubo = 57,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kilogram")]
        Kilogram = 58,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gram")]
        Gram = 59,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Milliliter")]
        Milliliter = 60,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Liter")]
        Liter = 61,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CubicCentimeter")]
        CubicCentimeter = 62,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CubicDecimeter")]
        CubicDecimeter = 63,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TatamiMat")]
        TatamiMat = 64,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PintsPerDay")]
        PintsPerDay = 65,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LitersPerDay")]
        LitersPerDay = 66,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CubicFeetPerMinute")]
        CubicFeetPerMinute = 67,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CubicMetersPerHour")]
        CubicMetersPerHour = 68,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SquareMeterXWeek")]
        SquareMeterXWeek = 69,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PieceXWeek")]
        PieceXWeek = 70,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KiloWattHour")]
        KiloWattHour = 71,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MeterPerWeek")]
        MeterPerWeek = 72,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PiecePerDay")]
        PiecePerDay = 73,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 74,
    
    }
    
    /// <summary>This type represents the item depreciation type values that the Symbility API supports.
    /// 
    /// **None**: No depreciation is calculated for the item.
    /// 
    /// **Fixed**: The depreciation is calculated based on a fixed % of the item total.
    /// 
    /// **PerYear**: The depreciation is calculated as a per year percentage.
    /// 
    /// **Flat**: The depreciation is a flat amount.
    /// 
    /// **LifeExpectancy**: The depreciation is calculated based on the useful life and current age of the item.
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ItemDepreciationType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fixed")]
        Fixed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PerYear")]
        PerYear = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Flat")]
        Flat = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LifeExpectancy")]
        LifeExpectancy = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 5,
    
    }
    
    /// <summary>This type represents the condition of an estimate item which will be affecting its depreciation.
    /// 
    /// **None**: Will be returned for older claims.
    /// 
    /// **New**: The item is in a brand new condition.
    /// 
    /// **Light**: The item has an above average condition.
    /// 
    /// **Normal**: The item has an average condition.
    /// 
    /// **Heavy**: The item has a below average condition.
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ItemDepreciationUsage
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"New")]
        New = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Light")]
        Light = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Normal")]
        Normal = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Heavy")]
        Heavy = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 5,
    
    }
    
    /// <summary>This type represents estimate item depreciation when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class EstimateItemDepreciation 
    {
        /// <summary>The type of the depreciation of the estimate item.  When updating an item, the property is not updated if not specified.</summary>
        [Newtonsoft.Json.JsonProperty("DepreciationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ItemDepreciationType? DepreciationType { get; set; }
    
        /// <summary>The age of the item in years.  Only used if DepreciationType is PerYear or LifeExpectancy.  When updating an item, the property is not updated if not specified.</summary>
        [Newtonsoft.Json.JsonProperty("DepreciationAge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? DepreciationAge { get; set; }
    
        /// <summary>The usage condition of the estimate item.  When updating an item, the property is not updated if not specified.</summary>
        [Newtonsoft.Json.JsonProperty("DepreciationUsage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ItemDepreciationUsage? DepreciationUsage { get; set; }
    
        /// <summary>The first year depreciation %.  Only used if DepreciationType is PerYear.  When updating an item, the property is not updated if not specified.</summary>
        [Newtonsoft.Json.JsonProperty("DepreciationFirstYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? DepreciationFirstYear { get; set; }
    
        /// <summary>The additional year depreciation %.  Only used if DepreciationType is PerYear.  When updating an item, the property is not updated if not specified.</summary>
        [Newtonsoft.Json.JsonProperty("DepreciationAdditionalYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? DepreciationAdditionalYear { get; set; }
    
        /// <summary>The maximum depreciation %.  Only used if DepreciationType is PerYear or LifeExpectancy.  When updating an item, the property is not updated if not specified.</summary>
        [Newtonsoft.Json.JsonProperty("DepreciationMaximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? DepreciationMaximum { get; set; }
    
        /// <summary>The useful life of the item in years.  Only used if DepreciationType is LifeExpectancy.  When updating an item, the property is not updated if not specified.</summary>
        [Newtonsoft.Json.JsonProperty("DepreciationUsefulLife", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? DepreciationUsefulLife { get; set; }
    
        /// <summary>The depreciation amount.  Only used if DepreciationType is Flat. When updating an item, the property is not updated if not specified.</summary>
        [Newtonsoft.Json.JsonProperty("DepreciationFlat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? DepreciationFlat { get; set; }
    
        /// <summary>The depreciation %.  Only used if DepreciationType is Fixed.  When updating an item, the property is not updated if not specified.</summary>
        [Newtonsoft.Json.JsonProperty("DepreciationFixed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? DepreciationFixed { get; set; }
    
        /// <summary>True if the depreciation is recoverable.  When updating an item, the property is not updated if not specified.</summary>
        [Newtonsoft.Json.JsonProperty("RecoverableDepreciation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RecoverableDepreciation { get; set; }
    
        /// <summary>True if the depreciation is applied to the unit price.  When updating an item, the property is not updated if not specified.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyDepreciationToUnitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ApplyDepreciationToUnitPrice { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ItemLink : System.Collections.ObjectModel.Collection<ItemLinkFlags>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ItemLink2 : System.Collections.ObjectModel.Collection<ItemLink2Flags>
    {
    
    }
    
    /// <summary>This type represents the estimate item contents properties of an estimate item line type when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class EstimateItemContents 
    {
        /// <summary>The description of the lost/damaged item.  When updating an item, the property is not updated if not specified.</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Description { get; set; }
    
        /// <summary>The date the lost/damaged item was purchased.  When updating an item, the property is not updated if not specified.</summary>
        [Newtonsoft.Json.JsonProperty("PurchaseDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PurchaseDate { get; set; }
    
        /// <summary>The price of the lost/damaged item at the time of purchase.  When updating an item, the property is not updated if not specified.</summary>
        [Newtonsoft.Json.JsonProperty("PurchaseCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? PurchaseCost { get; set; }
    
        /// <summary>The barcode of the lost/damaged item.  When updating an item, the property is not updated if not specified.</summary>
        [Newtonsoft.Json.JsonProperty("Barcode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Barcode { get; set; }
    
        /// <summary>The store where the lost/damaged item was purchased.  When updating an item, the property is not updated if not specified.</summary>
        [Newtonsoft.Json.JsonProperty("PurchaseSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string PurchaseSource { get; set; }
    
        /// <summary>The brand of the item replacement.  When updating an item, the property is not updated if not specified.</summary>
        [Newtonsoft.Json.JsonProperty("ReplacementBrand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ReplacementBrand { get; set; }
    
        /// <summary>The model of the item replacement.  When updating an item, the property is not updated if not specified.</summary>
        [Newtonsoft.Json.JsonProperty("ReplacementModel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ReplacementModel { get; set; }
    
        /// <summary>The description of the item replacement.  When updating an item, the property is not updated if not specified.</summary>
        [Newtonsoft.Json.JsonProperty("ReplacementDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string ReplacementDescription { get; set; }
    
        /// <summary>The source of the item replacement.  When updating an item, the property is not updated if not specified.</summary>
        [Newtonsoft.Json.JsonProperty("ReplacementSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ReplacementSource { get; set; }
    
        /// <summary>The freight cost of the replacement item.  When updating an item, the property is not updated if not specified.</summary>
        [Newtonsoft.Json.JsonProperty("FreightCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? FreightCost { get; set; }
    
    
    }
    
    /// <summary>This type represents estimate item note types when using the Symbility API.
    /// 
    /// **Manual**: The note is a manual note.
    /// 
    /// **SystemGenerated**: The note has been automatically generated by the system.
    ///             
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum EstimateItemNoteType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Manual")]
        Manual = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SystemGenerated")]
        SystemGenerated = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 2,
    
    }
    
    /// <summary>This type represents an estimate item note when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class EstimateItemNote 
    {
        /// <summary>The identifier of the estimate item note.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateItemNoteID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimateItemNoteID { get; set; }
    
        /// <summary>The note.</summary>
        [Newtonsoft.Json.JsonProperty("Note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note { get; set; }
    
        /// <summary>The type of the note.</summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EstimateItemNoteType Type { get; set; }
    
    
    }
    
    /// <summary>This type represents an estimate item when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class EstimateItem 
    {
        /// <summary>The identifier of the estimate item in the claim.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateItemID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimateItemID { get; set; }
    
        /// <summary>The identifier of the root estimate item this one is based off of. (useful when dealing with supplements)</summary>
        [Newtonsoft.Json.JsonProperty("RootCopyFromEstimateItemID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RootCopyFromEstimateItemID { get; set; }
    
        /// <summary>The identifier of the estimate item this one is directly based off of. (useful when dealing with supplements)</summary>
        [Newtonsoft.Json.JsonProperty("CopyFromEstimateItemID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CopyFromEstimateItemID { get; set; }
    
        /// <summary>A string value that can be used to identify items when they are added using the API.</summary>
        [Newtonsoft.Json.JsonProperty("ExternalReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ExternalReference { get; set; }
    
        /// <summary>The identifier of the diagram object this item is related to.</summary>
        [Newtonsoft.Json.JsonProperty("DiagramObjectID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DiagramObjectID { get; set; }
    
        /// <summary>The type of line of the estimate item.</summary>
        [Newtonsoft.Json.JsonProperty("LineType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EstimateItemLineType LineType { get; set; }
    
        /// <summary>This type represents the type of an estimate item if in a supplement when using the Symbility API.
        /// 
        /// **None**: The estimate item is a regular line item
        /// 
        /// **Credit**: The estimate item represents a credit
        /// 
        /// **Supplement**: The estimate item is a supplemental line item</summary>
        [Newtonsoft.Json.JsonProperty("SupplementType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EstimateItemSupplementType SupplementType { get; set; }
    
        /// <summary>The description of the item.</summary>
        [Newtonsoft.Json.JsonProperty("ItemDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemDescription { get; set; }
    
        /// <summary>The name of the action.</summary>
        [Newtonsoft.Json.JsonProperty("ActionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string ActionName { get; set; }
    
        /// <summary>The description of the grade.</summary>
        [Newtonsoft.Json.JsonProperty("GradeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string GradeDescription { get; set; }
    
        /// <summary>This type represents the unit of measures that the Symbility API supports.
        /// 
        /// **Basic values**: SquareFoot, LinearFoot, SquareYard, Each, Hour, CubicInch, CubicYard, CubicFoot, Day, Week, 
        /// Gallon, Pair, Roll, Room, Load, LinearInch, Ton, Square, SquareInch, Mile
        /// 
        /// **Grouping values**: Bag, Sroll, Section, Set, Sheet, VerticalLinearFoot, DoubleRoll, Bolt, Box, Bundle, BoardFeet, Piece\*, Minute\*
        /// 
        /// **Commercial values**: Percentage, Acre, OneHundred, LinearFeet100, SquareFeet100, Pound, LumpSum, OneThousand, BoardFeet100, LinearFeet100, 
        /// Month, SquareFeet100, Pack, SquareFootFormContactConcrete
        /// 
        /// **Metric values**: LinearCentimeter, LinearMeter, LinearKilometer, SquareCentimeter, SquareMeter, CubicMeter, LinearMillimeter
        /// 
        /// **Other values**: Number, Sum, TatamiMat, PintsPerDay, LitersPerDay, CubicFeetPerMinute, CubicMetersPerHour, SquareMeterXWeek, PieceXWeek, 
        /// KiloWattHour, MeterPerWeek, PiecePerDay
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("UnitOfMeasure", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ItemUnitOfMeasure UnitOfMeasure { get; set; }
    
        /// <summary>The category names including all the parent categories for the estimate item.</summary>
        [Newtonsoft.Json.JsonProperty("ItemCategoryFullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string ItemCategoryFullName { get; set; }
    
        /// <summary>The trade name for the estimate item.</summary>
        [Newtonsoft.Json.JsonProperty("ItemTradeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string ItemTradeName { get; set; }
    
        /// <summary>The identifier of the claim coverage.</summary>
        [Newtonsoft.Json.JsonProperty("ClaimCoverageID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ClaimCoverageID { get; set; }
    
        /// <summary>The identifier of the claim subcoverage.</summary>
        [Newtonsoft.Json.JsonProperty("ClaimSubcoverageID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ClaimSubcoverageID { get; set; }
    
        /// <summary>True if the estimate item is provisional.</summary>
        [Newtonsoft.Json.JsonProperty("Provisional", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Provisional { get; set; }
    
        /// <summary>True if the item should include subtractions in its quantity.</summary>
        [Newtonsoft.Json.JsonProperty("IncludeSubtractions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IncludeSubtractions { get; set; }
    
        /// <summary>The included waste percentage.</summary>
        [Newtonsoft.Json.JsonProperty("Waste", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Waste { get; set; }
    
        /// <summary>The materials component of the total amount (currency).</summary>
        [Newtonsoft.Json.JsonProperty("Materials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Materials { get; set; }
    
        /// <summary>The materials component of the unit price (currency).</summary>
        [Newtonsoft.Json.JsonProperty("UnitMaterials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal UnitMaterials { get; set; }
    
        /// <summary>The labor component of the total amount (currency).</summary>
        [Newtonsoft.Json.JsonProperty("Labor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Labor { get; set; }
    
        /// <summary>The labor component of the unit price (currency).</summary>
        [Newtonsoft.Json.JsonProperty("UnitLabor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal UnitLabor { get; set; }
    
        /// <summary>The total labor time in hours.</summary>
        [Newtonsoft.Json.JsonProperty("TotalHours", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalHours { get; set; }
    
        /// <summary>The unit labor time in hours.</summary>
        [Newtonsoft.Json.JsonProperty("UnitHours", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal UnitHours { get; set; }
    
        /// <summary>The equipment component of the total amount (currency).</summary>
        [Newtonsoft.Json.JsonProperty("Equipment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Equipment { get; set; }
    
        /// <summary>The equipment component of the unit price (currency).</summary>
        [Newtonsoft.Json.JsonProperty("UnitEquipment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal UnitEquipment { get; set; }
    
        /// <summary>The market conditions component of the total amount (currency).</summary>
        [Newtonsoft.Json.JsonProperty("MarketConditions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal MarketConditions { get; set; }
    
        /// <summary>The market conditions component of the unit price (currency).</summary>
        [Newtonsoft.Json.JsonProperty("UnitMarketConditions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal UnitMarketConditions { get; set; }
    
        /// <summary>True if Tax1 is applied to the estimate item.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplyTax1 { get; set; }
    
        /// <summary>True if Tax2 is applied to the estimate item.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplyTax2 { get; set; }
    
        /// <summary>True if Tax3 is applied to the estimate item.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplyTax3 { get; set; }
    
        /// <summary>True if Tax4 is applied to the estimate item.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax4", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplyTax4 { get; set; }
    
        /// <summary>True if the overhead and profit to the estimate item.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyOverheadAndProfit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplyOverheadAndProfit { get; set; }
    
        /// <summary>The total tax 1 applied to the estimate item.  Will be 0 for claims created before Q1 2019.</summary>
        [Newtonsoft.Json.JsonProperty("TotalTax1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalTax1 { get; set; }
    
        /// <summary>The total tax 2 applied to the estimate item.  Will be 0 for claims created before Q1 2019.</summary>
        [Newtonsoft.Json.JsonProperty("TotalTax2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalTax2 { get; set; }
    
        /// <summary>The total tax 3 applied to the estimate item.  Will be 0 for claims created before Q1 2019.</summary>
        [Newtonsoft.Json.JsonProperty("TotalTax3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalTax3 { get; set; }
    
        /// <summary>The total tax 4 applied to the estimate item.  Will be 0 for claims created before Q1 2019.</summary>
        [Newtonsoft.Json.JsonProperty("TotalTax4", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalTax4 { get; set; }
    
        /// <summary>The total overhead applied to the estimate item.  Will be 0 for claims created before Q1 2019.</summary>
        [Newtonsoft.Json.JsonProperty("TotalOverhead", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalOverhead { get; set; }
    
        /// <summary>The total profit applied to the estimate item.  Will be 0 for claims created before Q1 2019.</summary>
        [Newtonsoft.Json.JsonProperty("TotalProfit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalProfit { get; set; }
    
        /// <summary>The total tax 1 applied to the estimate item's actual cash value.  Will be 0 for claims created before Q1 2019.</summary>
        [Newtonsoft.Json.JsonProperty("TotalTax1ActualCashValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalTax1ActualCashValue { get; set; }
    
        /// <summary>The total tax 2 applied to the estimate item's actual cash value.  Will be 0 for claims created before Q1 2019.</summary>
        [Newtonsoft.Json.JsonProperty("TotalTax2ActualCashValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalTax2ActualCashValue { get; set; }
    
        /// <summary>The total tax 3 applied to the estimate item's actual cash value.  Will be 0 for claims created before Q1 2019.</summary>
        [Newtonsoft.Json.JsonProperty("TotalTax3ActualCashValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalTax3ActualCashValue { get; set; }
    
        /// <summary>The total tax 4 applied to the estimate item's actual cash value.  Will be 0 for claims created before Q1 2019.</summary>
        [Newtonsoft.Json.JsonProperty("TotalTax4ActualCashValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalTax4ActualCashValue { get; set; }
    
        /// <summary>The total overhead applied to the estimate item's actual cash value.  Will be 0 for claims created before Q1 2019.</summary>
        [Newtonsoft.Json.JsonProperty("TotalOverheadActualCashValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalOverheadActualCashValue { get; set; }
    
        /// <summary>The total profit applied to the estimate item's actual cash value.  Will be 0 for claims created before Q1 2019.</summary>
        [Newtonsoft.Json.JsonProperty("TotalProfitActualCashValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalProfitActualCashValue { get; set; }
    
        /// <summary>The calculated depreciation value of the estimate item.</summary>
        [Newtonsoft.Json.JsonProperty("TotalDepreciation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalDepreciation { get; set; }
    
        /// <summary>The depreciation of the estimate item.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateItemDepreciation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EstimateItemDepreciation EstimateItemDepreciation { get; set; }
    
        /// <summary>The links of the item.</summary>
        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ItemLink Links { get; set; }
    
        /// <summary>The links of the item.</summary>
        [Newtonsoft.Json.JsonProperty("Links2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ItemLink2 Links2 { get; set; }
    
        /// <summary>True if this estimate item is a credit.</summary>
        [Newtonsoft.Json.JsonProperty("Credit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Credit { get; set; }
    
        /// <summary>The quantity of the estimate item including waste and adjustments.</summary>
        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Quantity { get; set; }
    
        /// <summary>The materials quantity of the estimate item.</summary>
        [Newtonsoft.Json.JsonProperty("MaterialsQuantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal MaterialsQuantity { get; set; }
    
        /// <summary>The total amount of the estimate item (currency).</summary>
        [Newtonsoft.Json.JsonProperty("Total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Total { get; set; }
    
        /// <summary>The contents properties of the estimate item.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateItemContents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EstimateItemContents EstimateItemContents { get; set; }
    
        /// <summary>Notes attached to the estimate item.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateItemNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EstimateItemNote> EstimateItemNotes { get; set; }
    
    
    }
    
    /// <summary>This type represents a minimum charge estimate item when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MinimumChargeAdjustmentItem 
    {
        /// <summary>The description of the minimum charge.</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string Description { get; set; }
    
        /// <summary>The total amount of the minimum charge (currency).</summary>
        [Newtonsoft.Json.JsonProperty("Total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Total { get; set; }
    
    
    }
    
    /// <summary>This type represents an estimate when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Estimate 
    {
        /// <summary>The identifier of the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimateID { get; set; }
    
        /// <summary>The identifier of the parent estimate (if value is different than 0, indicates that this estimate is a supplement).</summary>
        [Newtonsoft.Json.JsonProperty("ParentEstimateID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ParentEstimateID { get; set; }
    
        /// <summary>The identifier of the assignment the estimate is linked to.</summary>
        [Newtonsoft.Json.JsonProperty("AssignmentID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AssignmentID { get; set; }
    
        /// <summary>The Symbility company ID of the head office of the author of the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("AuthorHeadOfficeCompanyID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string AuthorHeadOfficeCompanyID { get; set; }
    
        /// <summary>The Symbility company ID of the author of the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("AuthorCompanyID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string AuthorCompanyID { get; set; }
    
        /// <summary>The external system company code of the author if defined in the API account.</summary>
        [Newtonsoft.Json.JsonProperty("AuthorExternalSystemCompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AuthorExternalSystemCompanyCode { get; set; }
    
        /// <summary>The company name of the author of the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("AuthorCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string AuthorCompanyName { get; set; }
    
        /// <summary>The date and time (UTC) the estimate was created.</summary>
        [Newtonsoft.Json.JsonProperty("CreationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreationDate { get; set; }
    
        /// <summary>This type represents the estimate status values that the Symbility API supports.
        /// 
        /// **InProgress**: The estimate is in progress.
        /// 
        /// **ReadyForReview**: The estimate is ready for review.
        /// 
        /// **RejectedReview**: The estimate has been rejected (review).
        /// 
        /// **Completed**: The estimate has been completed.
        /// 
        /// **RejectedApproval**: The estimate has been rejected (approval).
        /// 
        /// **Approved**: The estimate has been approved. 
        /// 
        /// **Cancelled**: The estimate has been cancelled.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EstimateStatus Status { get; set; }
    
        /// <summary>If true, the estimate is an external estimate which means all calculations are assumed by the external system.  If false, the estimate is a standard estimate.</summary>
        [Newtonsoft.Json.JsonProperty("External", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool External { get; set; }
    
        /// <summary>This type represents the estimate option values that the Symbility API supports. 
        /// This is a bit field, a set of flags, the EstimateOptions can be one or more of the following values.
        /// 
        /// **None**: No flag is set.
        /// 
        /// **Contents**: The estimate is a contents estimate.
        /// 
        /// **Locked**: The estimate is locked.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("Options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EstimateOptions Options { get; set; }
    
        /// <summary>The name of the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Name { get; set; }
    
        /// <summary>The name of the parent estimate.</summary>
        [Newtonsoft.Json.JsonProperty("ParentEstimateName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string ParentEstimateName { get; set; }
    
        /// <summary>The type of the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Type { get; set; }
    
        /// <summary>The ID of the estimate's default coverage.</summary>
        [Newtonsoft.Json.JsonProperty("DefaultClaimCoverageID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DefaultClaimCoverageID { get; set; }
    
        /// <summary>Reason for the estimate supplement</summary>
        [Newtonsoft.Json.JsonProperty("SupplementReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string SupplementReason { get; set; }
    
        /// <summary>The total materials amount of the estimate (currency).</summary>
        [Newtonsoft.Json.JsonProperty("TotalMaterials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalMaterials { get; set; }
    
        /// <summary>The total labor amount of the estimate (currency).</summary>
        [Newtonsoft.Json.JsonProperty("TotalLabor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalLabor { get; set; }
    
        /// <summary>The total equipment amount of the estimate (currency).</summary>
        [Newtonsoft.Json.JsonProperty("TotalEquipment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalEquipment { get; set; }
    
        /// <summary>The total market conditions amount of the estimate (currency).</summary>
        [Newtonsoft.Json.JsonProperty("TotalMarketConditions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalMarketConditions { get; set; }
    
        /// <summary>The total freight cost of the estimate (currency).</summary>
        [Newtonsoft.Json.JsonProperty("TotalFreightCost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalFreightCost { get; set; }
    
        /// <summary>The minimum charge adjustments information.</summary>
        [Newtonsoft.Json.JsonProperty("MinimumCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClaimMinimumCharge MinimumCharge { get; set; }
    
        /// <summary>The sub total of the estimate (currency).</summary>
        [Newtonsoft.Json.JsonProperty("SubTotal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal SubTotal { get; set; }
    
        /// <summary>The tax information.</summary>
        [Newtonsoft.Json.JsonProperty("TaxInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClaimTaxInfo TaxInfo { get; set; }
    
        /// <summary>The total Tax1 amount of the estimate (currency).</summary>
        [Newtonsoft.Json.JsonProperty("TotalTax1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalTax1 { get; set; }
    
        /// <summary>The total Tax2 amount of the estimate (currency).</summary>
        [Newtonsoft.Json.JsonProperty("TotalTax2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalTax2 { get; set; }
    
        /// <summary>The total Tax3 amount of the estimate (currency).</summary>
        [Newtonsoft.Json.JsonProperty("TotalTax3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalTax3 { get; set; }
    
        /// <summary>The total Tax4 amount of the estimate (currency).</summary>
        [Newtonsoft.Json.JsonProperty("TotalTax4", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalTax4 { get; set; }
    
        /// <summary>The overhead and profit information.</summary>
        [Newtonsoft.Json.JsonProperty("OverheadAndProfitInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClaimOverheadAndProfitInfo OverheadAndProfitInfo { get; set; }
    
        /// <summary>The total overhead amount of the estimate (currency).</summary>
        [Newtonsoft.Json.JsonProperty("TotalOverhead", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalOverhead { get; set; }
    
        /// <summary>The total profit amount of the estimate (currency).</summary>
        [Newtonsoft.Json.JsonProperty("TotalProfit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalProfit { get; set; }
    
        /// <summary>The salvage allowance amount (before taxes) (currency).</summary>
        [Newtonsoft.Json.JsonProperty("SalvageAllowanceBeforeTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal SalvageAllowanceBeforeTaxes { get; set; }
    
        /// <summary>The salvage allowance amount (after taxes) (currency).</summary>
        [Newtonsoft.Json.JsonProperty("SalvageAllowanceAfterTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal SalvageAllowanceAfterTaxes { get; set; }
    
        /// <summary>The salvage recovery amount (currency).</summary>
        [Newtonsoft.Json.JsonProperty("SalvageRecovery", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal SalvageRecovery { get; set; }
    
        /// <summary>The discount amount (before taxes) (currency).</summary>
        [Newtonsoft.Json.JsonProperty("DiscountBeforeTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal DiscountBeforeTaxes { get; set; }
    
        /// <summary>The discount label (before taxes) (currency).</summary>
        [Newtonsoft.Json.JsonProperty("DiscountBeforeTaxesName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DiscountBeforeTaxesName { get; set; }
    
        /// <summary>The discount amount (after taxes) (currency).</summary>
        [Newtonsoft.Json.JsonProperty("DiscountAfterTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal DiscountAfterTaxes { get; set; }
    
        /// <summary>The discount label (after taxes) (currency).</summary>
        [Newtonsoft.Json.JsonProperty("DiscountAfterTaxesName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DiscountAfterTaxesName { get; set; }
    
        /// <summary>The total of the estimate before discount and deductible (currency).</summary>
        [Newtonsoft.Json.JsonProperty("ReplacementCost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal ReplacementCost { get; set; }
    
        /// <summary>The total recoverable depreciation amount of the estimate (currency).</summary>
        [Newtonsoft.Json.JsonProperty("TotalRecoverableDepreciation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalRecoverableDepreciation { get; set; }
    
        /// <summary>The total non-recoverable depreciation amount of the estimate (currency).</summary>
        [Newtonsoft.Json.JsonProperty("NetRecoverableDepreciation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal NetRecoverableDepreciation { get; set; }
    
        /// <summary>The net recoverable depreciation amount of the estimate after limits and deductible (currency).</summary>
        [Newtonsoft.Json.JsonProperty("TotalNonRecoverableDepreciation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalNonRecoverableDepreciation { get; set; }
    
        /// <summary>True if the claim's flat deductible is applied to the estimate..</summary>
        [Newtonsoft.Json.JsonProperty("ApplyFlatDuductible", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ApplyFlatDuductible { get; set; }
    
        /// <summary>The deductible amount (currency).</summary>
        [Newtonsoft.Json.JsonProperty("Deductible", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Deductible { get; set; }
    
        /// <summary>The estimate grand total (total cost) (currency).</summary>
        [Newtonsoft.Json.JsonProperty("AmountPayableReplacementCost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal AmountPayableReplacementCost { get; set; }
    
        /// <summary>The actual cash value of the deductible of the estimate (currency).</summary>
        [Newtonsoft.Json.JsonProperty("DeductibleActualCashValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal DeductibleActualCashValue { get; set; }
    
        /// <summary>Net estimate grand total (after depreciation) (currency).</summary>
        [Newtonsoft.Json.JsonProperty("AmountPayableActualCashValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal AmountPayableActualCashValue { get; set; }
    
        /// <summary>The additional deductible that will be applied if the depreciation is recovered on the estimate (currency).</summary>
        [Newtonsoft.Json.JsonProperty("AdditionalDeductibleIfDepreciationRecovered", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal AdditionalDeductibleIfDepreciationRecovered { get; set; }
    
        /// <summary>Net estimate if depreciation is recovered (currency).</summary>
        [Newtonsoft.Json.JsonProperty("AmountPayableIfDepreciationRecovered", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal AmountPayableIfDepreciationRecovered { get; set; }
    
        /// <summary>The coverages used in the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("Coverages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EstimateCoverage> Coverages { get; set; }
    
        /// <summary>The estimate comments.</summary>
        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comments { get; set; }
    
        /// <summary>The status of the estimate finalization.</summary>
        [Newtonsoft.Json.JsonProperty("FinalizationStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EstimateFinalizationStatus FinalizationStatus { get; set; }
    
        /// <summary>The reference number associated with the estimate finalization.</summary>
        [Newtonsoft.Json.JsonProperty("FinalizationReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string FinalizationReference { get; set; }
    
        /// <summary>The date and time (UTC) associated with the estimate finalization.</summary>
        [Newtonsoft.Json.JsonProperty("FinalizationSettlementOrInvoiceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FinalizationSettlementOrInvoiceDate { get; set; }
    
        /// <summary>The date and time (UTC) when the estimate was finalized.</summary>
        [Newtonsoft.Json.JsonProperty("FinalizationCreationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FinalizationCreationDate { get; set; }
    
        /// <summary>The list of items in the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EstimateItem> EstimateItems { get; set; }
    
        /// <summary>The minimum charges automatically applied to the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("MinimumChargeAdjustmentItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MinimumChargeAdjustmentItem> MinimumChargeAdjustmentItems { get; set; }
    
    
    }
    
    /// <summary>This type represents the photo elevations that the Symbility API supports.
    /// 
    /// **Front**: The front of the property.
    /// 
    /// **Back**: The back of the property.
    /// 
    /// **Left**: The left side of the property.
    /// 
    /// **Right**: The right side of the property.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PhotoElevation
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Front")]
        Front = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Back")]
        Back = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Left")]
        Left = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Right")]
        Right = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PhotoProperties : System.Collections.ObjectModel.Collection<PhotoPropertiesFlags>
    {
    
    }
    
    /// <summary>This type represents the structure used to create a photo when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Photo 
    {
        /// <summary>The identifier of the photo.</summary>
        [Newtonsoft.Json.JsonProperty("PhotoID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PhotoID { get; set; }
    
        /// <summary>The caption of the photo.</summary>
        [Newtonsoft.Json.JsonProperty("Caption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Caption { get; set; }
    
        /// <summary>The date and time the photo was taken.</summary>
        [Newtonsoft.Json.JsonProperty("CaptureDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CaptureDate { get; set; }
    
        /// <summary>The original filename of the photo if any.</summary>
        [Newtonsoft.Json.JsonProperty("Filename", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Filename { get; set; }
    
        /// <summary>The elevation of the photo.</summary>
        [Newtonsoft.Json.JsonProperty("Elevation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PhotoElevation Elevation { get; set; }
    
        /// <summary>Angle in degrees representing the direction of the photo.</summary>
        [Newtonsoft.Json.JsonProperty("Direction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Direction { get; set; }
    
        /// <summary>The pitch of the roof in degrees associated with the photo.</summary>
        [Newtonsoft.Json.JsonProperty("RoofAngle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RoofAngle { get; set; }
    
        /// <summary>The latitude at which the photo was taken.</summary>
        [Newtonsoft.Json.JsonProperty("Latitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Latitude { get; set; }
    
        /// <summary>The longitude at which the photo was taken.</summary>
        [Newtonsoft.Json.JsonProperty("Longitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Longitude { get; set; }
    
        /// <summary>The altitude at which the photo was taken.</summary>
        [Newtonsoft.Json.JsonProperty("Altitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Altitude { get; set; }
    
        /// <summary>The name of the area the photo is associated to.</summary>
        [Newtonsoft.Json.JsonProperty("Area", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Area { get; set; }
    
        /// <summary>The full name of the user who has taken the photo.</summary>
        [Newtonsoft.Json.JsonProperty("TakenByUserName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TakenByUserName { get; set; }
    
        /// <summary>The name of the company who has taken the photo.</summary>
        [Newtonsoft.Json.JsonProperty("TakenByCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TakenByCompanyName { get; set; }
    
        /// <summary>The properties of the photo.</summary>
        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PhotoProperties Properties { get; set; }
    
    
    }
    
    /// <summary>This type represents a photo page when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PhotoPage 
    {
        /// <summary>The identifier of the photo page.</summary>
        [Newtonsoft.Json.JsonProperty("PhotoPageID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PhotoPageID { get; set; }
    
        /// <summary>The identifier of the claim assignment.</summary>
        [Newtonsoft.Json.JsonProperty("AssignmentID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AssignmentID { get; set; }
    
        /// <summary>The Symbility company ID of the head office of the author of the photo page.</summary>
        [Newtonsoft.Json.JsonProperty("AuthorHeadOfficeCompanyID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string AuthorHeadOfficeCompanyID { get; set; }
    
        /// <summary>The Symbility company ID of the author of the photo page.</summary>
        [Newtonsoft.Json.JsonProperty("AuthorCompanyID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string AuthorCompanyID { get; set; }
    
        /// <summary>The external system company code of the author if defined in the API account.</summary>
        [Newtonsoft.Json.JsonProperty("AuthorExternalSystemCompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AuthorExternalSystemCompanyCode { get; set; }
    
        /// <summary>The company name of the author of the photo page.</summary>
        [Newtonsoft.Json.JsonProperty("AuthorCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string AuthorCompanyName { get; set; }
    
        /// <summary>The name of the photo page.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Name { get; set; }
    
        /// <summary>The photos that are in the photo page.</summary>
        [Newtonsoft.Json.JsonProperty("Photos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Photo> Photos { get; set; }
    
    
    }
    
    /// <summary>This type represents the type of form values that the Symbility API supports.
    /// 
    /// **Text**: The form value represents textual entry.
    /// 
    /// **Numeric**: The form value represents numerical value (examples: "-35.48", "1329.33").
    /// 
    /// **Percentage**: The form value represents percentage value; note that the % sign is omitted and the value is divided by 100 (examples: "0.10" means 10%, "0.075" means 7.5%).
    /// 
    /// **Currency**: The form value represents a currency value; note that the currency symbol ($, € or £) is omitted (examples: "-24.13", "2345.78").
    /// 
    /// **Boolean**: The form value represents a boolean (true/false) value, shown as a checkbox (examples: "true", "false").
    /// 
    /// **Date**: The form value represents a date value in the format YYYY-MM-DD (examples: "2008-01-21", "2008-05-14").
    /// 
    /// **Time**: The form value represents a time value in the format HH:mm:ss (examples: "13:21:10", "08:56:01").
    /// 
    /// **DateTime**: The form value represents both a date and time value in the format YYYY-MM-DDTHH:mm:ss (examples: "2008-01-21T13:21:10", "2008-05-14T08:56:01").
    /// 
    /// **Phone**: The form value represents a phone number value (examples: "(555) 555-1234" in North America, "(020) 1234-5678" in the United Kingdom).
    /// 
    /// **List**: The form value represents an entry in a predefined list of available values.
    /// 
    /// **EditableList**: The form value represents an entry in a predefined editable list of available values.
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum FormValueType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Text")]
        Text = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Numeric")]
        Numeric = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Percentage")]
        Percentage = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Currency")]
        Currency = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Boolean")]
        Boolean = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Date")]
        Date = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Time")]
        Time = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DateTime")]
        DateTime = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Phone")]
        Phone = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"List")]
        List = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EditableList")]
        EditableList = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 11,
    
    }
    
    /// <summary>This type represents a value that was filled in the form (either automatically with information from the claim or
    /// manually by the user).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FormValue 
    {
        /// <summary>This type represents the type of form values that the Symbility API supports.
        /// 
        /// **Text**: The form value represents textual entry.
        /// 
        /// **Numeric**: The form value represents numerical value (examples: "-35.48", "1329.33").
        /// 
        /// **Percentage**: The form value represents percentage value; note that the % sign is omitted and the value is divided by 100 (examples: "0.10" means 10%, "0.075" means 7.5%).
        /// 
        /// **Currency**: The form value represents a currency value; note that the currency symbol ($, € or £) is omitted (examples: "-24.13", "2345.78").
        /// 
        /// **Boolean**: The form value represents a boolean (true/false) value, shown as a checkbox (examples: "true", "false").
        /// 
        /// **Date**: The form value represents a date value in the format YYYY-MM-DD (examples: "2008-01-21", "2008-05-14").
        /// 
        /// **Time**: The form value represents a time value in the format HH:mm:ss (examples: "13:21:10", "08:56:01").
        /// 
        /// **DateTime**: The form value represents both a date and time value in the format YYYY-MM-DDTHH:mm:ss (examples: "2008-01-21T13:21:10", "2008-05-14T08:56:01").
        /// 
        /// **Phone**: The form value represents a phone number value (examples: "(555) 555-1234" in North America, "(020) 1234-5678" in the United Kingdom).
        /// 
        /// **List**: The form value represents an entry in a predefined list of available values.
        /// 
        /// **EditableList**: The form value represents an entry in a predefined editable list of available values.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FormValueType Type { get; set; }
    
        /// <summary>The name of the form value (unique through the form).</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>The string content associated with this value.
        /// 
        /// See FormValue Type for the format of the value depending on the value type.</summary>
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
        /// <summary>Indicates whether or not this form value is visible on the form.</summary>
        [Newtonsoft.Json.JsonProperty("Visible", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Visible { get; set; }
    
    
    }
    
    /// <summary>This type represents the form statuses that the Symbility API supports.
    /// 
    /// **Locked**: The form is locked (signed).
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum FormStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Locked")]
        Locked = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Form 
    {
        /// <summary>The identifier of the form.</summary>
        [Newtonsoft.Json.JsonProperty("FormID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FormID { get; set; }
    
        /// <summary>The identifier of the claim assignment.</summary>
        [Newtonsoft.Json.JsonProperty("AssignmentID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AssignmentID { get; set; }
    
        /// <summary>The name of the form.
        /// 
        /// The end-user can change this name.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Name { get; set; }
    
        /// <summary>The original name of the form.
        /// 
        /// This name is unique.</summary>
        [Newtonsoft.Json.JsonProperty("OriginalName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string OriginalName { get; set; }
    
        /// <summary>The Symbility company ID of the head office of the person who added the form to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("AuthorHeadOfficeCompanyID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string AuthorHeadOfficeCompanyID { get; set; }
    
        /// <summary>The Symbility company ID of the person who added the form to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("AuthorCompanyID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string AuthorCompanyID { get; set; }
    
        /// <summary>The external system company code of the author if defined in the API account.</summary>
        [Newtonsoft.Json.JsonProperty("AuthorExternalSystemCompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AuthorExternalSystemCompanyCode { get; set; }
    
        /// <summary>The company name of the person who added the form to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("AuthorCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string AuthorCompanyName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FormValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FormValue> FormValues { get; set; }
    
        /// <summary>The date and time (UTC) the form was last updated.</summary>
        [Newtonsoft.Json.JsonProperty("LastModificationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset LastModificationDate { get; set; }
    
        /// <summary>This type represents the form statuses that the Symbility API supports.
        /// 
        /// **Locked**: The form is locked (signed).
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("FormStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FormStatus FormStatus { get; set; }
    
    
    }
    
    /// <summary>This type represents the types of external documents that the Symbility API supports.
    /// 
    /// **Document**: The document is a standard document.
    /// 
    /// **DiagramImportSource**: The document has been used to import/generate diagrams.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ExternalDocumentType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Document")]
        Document = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DiagramImportSource")]
        DiagramImportSource = 1,
    
    }
    
    /// <summary>This type represents an external document when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ExternalDocument 
    {
        /// <summary>The identifier of the external document.</summary>
        [Newtonsoft.Json.JsonProperty("ExternalDocumentID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ExternalDocumentID { get; set; }
    
        /// <summary>The identifier of the claim assignment.</summary>
        [Newtonsoft.Json.JsonProperty("AssignmentID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AssignmentID { get; set; }
    
        /// <summary>Complete file name of the external document.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(265)]
        public string Name { get; set; }
    
        /// <summary>This type represents the types of external documents that the Symbility API supports.
        /// 
        /// **Document**: The document is a standard document.
        /// 
        /// **DiagramImportSource**: The document has been used to import/generate diagrams.</summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExternalDocumentType Type { get; set; }
    
        /// <summary>The Symbility company ID of the head office of the creator of the external document.</summary>
        [Newtonsoft.Json.JsonProperty("CreatorHeadOfficeCompanyID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string CreatorHeadOfficeCompanyID { get; set; }
    
        /// <summary>The Symbility company ID of the creator of the external document.</summary>
        [Newtonsoft.Json.JsonProperty("CreatorCompanyID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string CreatorCompanyID { get; set; }
    
        /// <summary>The external system company code of the creator if defined in the API account.</summary>
        [Newtonsoft.Json.JsonProperty("CreatorExternalSystemCompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CreatorExternalSystemCompanyCode { get; set; }
    
        /// <summary>Complete folder path of the external document.</summary>
        [Newtonsoft.Json.JsonProperty("ClaimDocumentFolderPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(265)]
        public string ClaimDocumentFolderPath { get; set; }
    
        /// <summary>The company name of the creator of the external document.</summary>
        [Newtonsoft.Json.JsonProperty("CreatorCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string CreatorCompanyName { get; set; }
    
        /// <summary>The full name (&amp;lt;first name&amp;gt;&amp;lt;space&amp;gt;&amp;lt;last name&amp;gt;) of the creator of the external document.
        /// 
        /// An insured guest user's full name includes their title(&amp;lt;title&amp;gt;&amp;lt;space&amp;gt;&amp;lt;first
        /// name&amp;gt;&amp;lt;space&amp;gt;&amp;lt;last name&amp;gt;).</summary>
        [Newtonsoft.Json.JsonProperty("CreatorUserFullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(101)]
        public string CreatorUserFullName { get; set; }
    
        /// <summary>True if the external document is shared with the originator.</summary>
        [Newtonsoft.Json.JsonProperty("ShareWithOriginator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ShareWithOriginator { get; set; } = false;
    
        /// <summary>True if the external document is shared with the assignees.</summary>
        [Newtonsoft.Json.JsonProperty("ShareWithAssignees", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ShareWithAssignees { get; set; } = false;
    
        /// <summary>True if the external document is shared with peers.</summary>
        [Newtonsoft.Json.JsonProperty("ShareWithPeers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ShareWithPeers { get; set; } = false;
    
        /// <summary>True if the external document is shared with all companies.</summary>
        [Newtonsoft.Json.JsonProperty("ShareWithAllCompanies", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ShareWithAllCompanies { get; set; } = false;
    
        /// <summary>True if the external document is shared with the insured.</summary>
        [Newtonsoft.Json.JsonProperty("ShareWithInsured", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ShareWithInsured { get; set; } = false;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class HandwrittenNote 
    {
        /// <summary>The identifier of the handwritten note.</summary>
        [Newtonsoft.Json.JsonProperty("HandwrittenNoteID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int HandwrittenNoteID { get; set; }
    
        /// <summary>The identifier of the claim assignment.</summary>
        [Newtonsoft.Json.JsonProperty("AssignmentID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AssignmentID { get; set; }
    
        /// <summary>The name of the handwritten note.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Name { get; set; }
    
        /// <summary>The Symbility company ID of the head office of the creator of the handwritten note.</summary>
        [Newtonsoft.Json.JsonProperty("CreatorHeadOfficeCompanyID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string CreatorHeadOfficeCompanyID { get; set; }
    
        /// <summary>The Symbility company ID of the creator of the handwritten note.</summary>
        [Newtonsoft.Json.JsonProperty("CreatorCompanyID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string CreatorCompanyID { get; set; }
    
        /// <summary>The external system company code of the creator if defined in the API account.</summary>
        [Newtonsoft.Json.JsonProperty("CreatorExternalSystemCompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CreatorExternalSystemCompanyCode { get; set; }
    
        /// <summary>The company name of the creator of the handwritten note.</summary>
        [Newtonsoft.Json.JsonProperty("CreatorCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string CreatorCompanyName { get; set; }
    
        /// <summary>The full name (&amp;lt;first name&amp;gt;&amp;lt;space&amp;gt;&amp;lt;last name&amp;gt;) of the creator of the handwritten note.</summary>
        [Newtonsoft.Json.JsonProperty("CreatorUserFullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(101)]
        public string CreatorUserFullName { get; set; }
    
        /// <summary>True if the handwritten note should be shared with the originator.</summary>
        [Newtonsoft.Json.JsonProperty("ShareWithOriginator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ShareWithOriginator { get; set; } = false;
    
        /// <summary>True if the handwritten note should be shared with the assignees.</summary>
        [Newtonsoft.Json.JsonProperty("ShareWithAssignees", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ShareWithAssignees { get; set; } = false;
    
        /// <summary>True if the handwritten note should be shared with peers.</summary>
        [Newtonsoft.Json.JsonProperty("ShareWithPeers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ShareWithPeers { get; set; } = false;
    
    
    }
    
    /// <summary>This type represents the details of a claim assignment when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetClaimAssignmentDetails 
    {
        /// <summary>The summary of the claim assignment.</summary>
        [Newtonsoft.Json.JsonProperty("ClaimAssignment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClaimAssignment ClaimAssignment { get; set; }
    
        /// <summary>The diagrams attached to the claim assignment.</summary>
        [Newtonsoft.Json.JsonProperty("Diagrams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Diagram> Diagrams { get; set; }
    
        /// <summary>The estimates attached to the claim assignment.</summary>
        [Newtonsoft.Json.JsonProperty("Estimates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Estimate> Estimates { get; set; }
    
        /// <summary>The photo pages attached to the claim assignment.</summary>
        [Newtonsoft.Json.JsonProperty("PhotoPages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PhotoPage> PhotoPages { get; set; }
    
        /// <summary>The forms attached to the claim assignment.</summary>
        [Newtonsoft.Json.JsonProperty("Forms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Form> Forms { get; set; }
    
        /// <summary>The external documents attached to the claim assignment.</summary>
        [Newtonsoft.Json.JsonProperty("ExternalDocuments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExternalDocument> ExternalDocuments { get; set; }
    
        /// <summary>The handwritten notes attached to the claim assignment.</summary>
        [Newtonsoft.Json.JsonProperty("HandwrittenNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HandwrittenNote> HandwrittenNotes { get; set; }
    
    
    }
    
    /// <summary>This type represents the user identifier type values that the Symbility API supports.
    /// 
    /// This type is always used in conjunction with the userID field because it defines what the userID field contains.
    /// 
    /// **None**: The user identifier is empty.
    /// 
    /// **UserFullName**: The user identifier contains the full name (&amp;lt;user first name&amp;gt;&amp;lt;space&amp;gt;&amp;lt;user last name&amp;gt;).
    /// 
    /// **UserLoginName**: The user identifier contains the login name.
    /// 
    /// **UserEmail**: The user identifier contains the email address.
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum UserIDType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UserFullName")]
        UserFullName = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UserLoginName")]
        UserLoginName = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UserEmail")]
        UserEmail = 3,
    
    }
    
    /// <summary>This type represents a user when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UserIDSpecification 
    {
        /// <summary>The unique user identifier.</summary>
        [Newtonsoft.Json.JsonProperty("UserID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserID { get; set; }
    
        /// <summary>This type represents the user identifier type values that the Symbility API supports.
        /// 
        /// This type is always used in conjunction with the userID field because it defines what the userID field contains.
        /// 
        /// **None**: The user identifier is empty.
        /// 
        /// **UserFullName**: The user identifier contains the full name (&amp;lt;user first name&amp;gt;&amp;lt;space&amp;gt;&amp;lt;user last name&amp;gt;).
        /// 
        /// **UserLoginName**: The user identifier contains the login name.
        /// 
        /// **UserEmail**: The user identifier contains the email address.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("UserIDType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserIDType UserIDType { get; set; }
    
    
    }
    
    /// <summary>This type represents the company identifier type values that the Symbility API supports.
    /// 
    /// This type is always used in conjunction with the CompanyID field because it defines what the CompanyID field contains.
    /// 
    /// **None**: The company identifier is empty.
    /// 
    /// **CompanyID**: The company identifier contains a Symbility company ID.
    /// 
    /// **ExternalSystemCompanyCode**: The company identifier contains an external system company code.
    /// 
    /// **CompanyName**: The company identifier contains the company name.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CompanyIDType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExternalSystemCompanyCode")]
        ExternalSystemCompanyCode = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CompanyName")]
        CompanyName = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CompanyID")]
        CompanyID = 3,
    
    }
    
    /// <summary>This type represents the way to uniquely identify a company using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CompanyIDSpecification 
    {
        /// <summary>The unique company identifier.</summary>
        [Newtonsoft.Json.JsonProperty("CompanyID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyID { get; set; }
    
        /// <summary>This type represents the company identifier type values that the Symbility API supports.
        /// 
        /// This type is always used in conjunction with the CompanyID field because it defines what the CompanyID field contains.
        /// 
        /// **None**: The company identifier is empty.
        /// 
        /// **CompanyID**: The company identifier contains a Symbility company ID.
        /// 
        /// **ExternalSystemCompanyCode**: The company identifier contains an external system company code.
        /// 
        /// **CompanyName**: The company identifier contains the company name.</summary>
        [Newtonsoft.Json.JsonProperty("CompanyIDType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CompanyIDType CompanyIDType { get; set; }
    
    
    }
    
    /// <summary>This type represents the company identifier type values that the Symbility API supports.
    /// 
    /// **Assignee**: The company is an assignee.
    /// 
    /// **Peer**: The company is a peer.
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CompanyRole
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Assignee")]
        Assignee = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Peer")]
        Peer = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ClaimAssignmentOption : System.Collections.ObjectModel.Collection<ClaimAssignmentOptionFlags>
    {
    
    }
    
    /// <summary>This type represents the assignee group identifier type values that the Symbility API supports.
    /// 
    /// This type is always used in conjunction with the AssigneeGroupID field because it defines what the AssigneeGroupID field contains.
    /// 
    /// **None**: The assignee group identifier is empty.
    /// 
    /// **AssigneeGroupCode**: The assignee group identifier contains the assignee group code.
    /// 
    /// **AssigneeGroupName**: The assignee group identifier contains the assignee group name.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AssigneeGroupIDType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AssigneeGroupCode")]
        AssigneeGroupCode = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AssigneeGroupName")]
        AssigneeGroupName = 2,
    
    }
    
    /// <summary>This type represents the way to uniquely identify an assignee group using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AssigneeGroupIDSpecification 
    {
        /// <summary>The unique assignee group identifier.</summary>
        [Newtonsoft.Json.JsonProperty("AssigneeGroupID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssigneeGroupID { get; set; }
    
        /// <summary>This type represents the assignee group identifier type values that the Symbility API supports.
        /// 
        /// This type is always used in conjunction with the AssigneeGroupID field because it defines what the AssigneeGroupID field contains.
        /// 
        /// **None**: The assignee group identifier is empty.
        /// 
        /// **AssigneeGroupCode**: The assignee group identifier contains the assignee group code.
        /// 
        /// **AssigneeGroupName**: The assignee group identifier contains the assignee group name.</summary>
        [Newtonsoft.Json.JsonProperty("AssigneeGroupIDType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AssigneeGroupIDType AssigneeGroupIDType { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AddClaimAssigneeSpecification 
    {
        /// <summary>The unique code of the assignment type.
        /// 
        /// If the assignmentTypeCode is empty, the default assignment type for the company will be used.
        /// 
        /// If assignmentTypeCode contains an invalid value, an error will be returned.</summary>
        [Newtonsoft.Json.JsonProperty("AssignmentTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssignmentTypeCode { get; set; }
    
        /// <summary>The identifier of the company related to the specified claimIDSpecification.
        /// 
        /// This is mostly useful in branch/head offices scenarios.
        /// 
        /// If no company is specified, Symbility will use the company of the account specified in the authentication header.</summary>
        [Newtonsoft.Json.JsonProperty("AssigneeCompanyIDSpecification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompanyIDSpecification AssigneeCompanyIDSpecification { get; set; }
    
        /// <summary>This type represents the company identifier type values that the Symbility API supports.
        /// 
        /// **Assignee**: The company is an assignee.
        /// 
        /// **Peer**: The company is a peer.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("CompanyRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CompanyRole CompanyRole { get; set; }
    
        /// <summary>This type represents the claim assignment option values that the Symbility API supports.
        /// 
        /// **None**: No option specified
        /// 
        /// **DelegatedAuthority**: Assignee has Delegated Authority
        /// 
        /// **ClaimStatusChange**: Assignee has the ability to change the claim status</summary>
        [Newtonsoft.Json.JsonProperty("ClaimAssignmentOption", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ClaimAssignmentOption ClaimAssignmentOption { get; set; }
    
        /// <summary>The notes to be added to the assignment.
        /// 
        /// If the parameter is empty, the default notes associated with the assignment type will be used.</summary>
        [Newtonsoft.Json.JsonProperty("AssignmentNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssignmentNotes { get; set; }
    
        /// <summary>This indicates whether the assignment should be the insured contact of the claim.
        /// 
        /// If the parameter is null, the insured contact will be determined by the assignment type value.</summary>
        [Newtonsoft.Json.JsonProperty("SetAssigneeAsInsuredContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SetAssigneeAsInsuredContact { get; set; }
    
        /// <summary>The identifier of the assignee group of the company to assign the claim to.
        /// 
        /// If set the parameter is set to None the assignment options will be based on some of the options of the default group for the specified assignment type.</summary>
        [Newtonsoft.Json.JsonProperty("AssigneeGroupIDSpecification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AssigneeGroupIDSpecification AssigneeGroupIDSpecification { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomField> CustomFields { get; set; }
    
    
    }
    
    /// <summary>This type represents various options when adding an assignee group using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AssigneeGroupOptions 
    {
        /// <summary>True to consider secondary coverage.</summary>
        [Newtonsoft.Json.JsonProperty("ConsiderSecondaryCoverage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ConsiderSecondaryCoverage { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AddClaimAssigneeGroupSpecification 
    {
        /// <summary>The unique code of the assignment type.
        /// 
        /// If the assignmentTypeCode is empty, the default assignment type for the company will be used.
        /// 
        /// If assignmentTypeCode contains an invalid value, an error will be returned.</summary>
        [Newtonsoft.Json.JsonProperty("AssignmentTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssignmentTypeCode { get; set; }
    
        /// <summary>The identifier of the assignee group of the company to assign the claim to.</summary>
        [Newtonsoft.Json.JsonProperty("AssigneeGroupIDSpecification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AssigneeGroupIDSpecification AssigneeGroupIDSpecification { get; set; }
    
        /// <summary>The options applied to the assignee group.</summary>
        [Newtonsoft.Json.JsonProperty("AssigneeGroupOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AssigneeGroupOptions AssigneeGroupOptions { get; set; }
    
        /// <summary>The notes to be added to the assignment.
        /// 
        /// If the parameter is empty, the default notes associated with the assignment type will be used.</summary>
        [Newtonsoft.Json.JsonProperty("AssignmentNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssignmentNotes { get; set; }
    
        /// <summary>This indicates whether the assignment should be the insured contact of the claim.
        /// 
        /// If the parameter is null, the insured contact will be determined by the assignment type value.</summary>
        [Newtonsoft.Json.JsonProperty("SetAssigneeAsInsuredContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SetAssigneeAsInsuredContact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomField> CustomFields { get; set; }
    
    
    }
    
    /// <summary>This type represents various options when assigning with repair options business rules using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AssigneeRepairOptions 
    {
        /// <summary>True to consider secondary coverage.</summary>
        [Newtonsoft.Json.JsonProperty("ConsiderSecondaryCoverage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ConsiderSecondaryCoverage { get; set; } = false;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AddClaimAssigneeRepairOptionsSpecification 
    {
        /// <summary>The identifier of the estimate to use for the assignment, it can be omitted if not needed.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EstimateID { get; set; }
    
        /// <summary>The options applied to the repair options.</summary>
        [Newtonsoft.Json.JsonProperty("AssigneeRepairOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AssigneeRepairOptions AssigneeRepairOptions { get; set; }
    
        /// <summary>The notes to be added to the assignment.
        /// 
        /// If the parameter is empty, the default notes associated with the assignment type will be used.</summary>
        [Newtonsoft.Json.JsonProperty("AssignmentNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssignmentNotes { get; set; }
    
        /// <summary>This indicates whether the assignment should be the insured contact of the claim.
        /// 
        /// If the parameter is null, the insured contact will be determined by the assignment type value.</summary>
        [Newtonsoft.Json.JsonProperty("SetAssigneeAsInsuredContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SetAssigneeAsInsuredContact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomField> CustomFields { get; set; }
    
    
    }
    
    /// <summary>This type represents the assignee user group identifier type values that the Symbility API supports.
    /// 
    /// This type is always used in conjunction with the AssigneeUserGroupID field because it defines what the AssigneeUserGroupID field contains.
    /// 
    /// **None**: The assignee user group identifier is empty.
    /// 
    /// **AssigneeUserGroupCode**: The assignee user group identifier contains the assignee user group code.
    /// 
    /// **AssigneeUserGroupName**: The assignee user group identifier contains the assignee user group name.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AssigneeUserGroupIDType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AssigneeUserGroupCode")]
        AssigneeUserGroupCode = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AssigneeUserGroupName")]
        AssigneeUserGroupName = 2,
    
    }
    
    /// <summary>This type represents the way to uniquely identify an assignee group using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AssigneeUserGroupIDSpecification 
    {
        /// <summary>The unique assignee user group identifier.</summary>
        [Newtonsoft.Json.JsonProperty("AssigneeUserGroupID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssigneeUserGroupID { get; set; }
    
        /// <summary>This type represents the assignee user group identifier type values that the Symbility API supports.
        /// 
        /// This type is always used in conjunction with the AssigneeUserGroupID field because it defines what the AssigneeUserGroupID field contains.
        /// 
        /// **None**: The assignee user group identifier is empty.
        /// 
        /// **AssigneeUserGroupCode**: The assignee user group identifier contains the assignee user group code.
        /// 
        /// **AssigneeUserGroupName**: The assignee user group identifier contains the assignee user group name.</summary>
        [Newtonsoft.Json.JsonProperty("AssigneeUserGroupIDType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AssigneeUserGroupIDType AssigneeUserGroupIDType { get; set; }
    
    
    }
    
    /// <summary>This type represents various options when adding an assignee user group using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AssigneeUserGroupOptions 
    {
        /// <summary>True to consider secondary coverage.</summary>
        [Newtonsoft.Json.JsonProperty("ConsiderSecondaryCoverage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ConsiderSecondaryCoverage { get; set; } = false;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AddClaimAssigneeUserGroupSpecification 
    {
        /// <summary>The identifier of the code used to select the claim assignment type.
        /// 
        /// If the assignmentTypeCode is empty, the default assignment type for the company will be used.
        /// 
        /// If assignmentTypeCode contains an invalid value, an error will be returned.</summary>
        [Newtonsoft.Json.JsonProperty("AssignmentTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssignmentTypeCode { get; set; }
    
        /// <summary>The identifier of the assignee user group of the company to assign the claim to.</summary>
        [Newtonsoft.Json.JsonProperty("AssigneeUserGroupIDSpecification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AssigneeUserGroupIDSpecification AssigneeUserGroupIDSpecification { get; set; }
    
        /// <summary>The options applied to the assignee user group.</summary>
        [Newtonsoft.Json.JsonProperty("AssigneeUserGroupOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AssigneeUserGroupOptions AssigneeUserGroupOptions { get; set; }
    
        /// <summary>The notes to be added to the assignment.
        /// 
        /// If the parameter is empty, the default notes associated with the assignment type will be used.</summary>
        [Newtonsoft.Json.JsonProperty("AssignmentNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssignmentNotes { get; set; }
    
        /// <summary>This indicates whether the assignment should be the insured contact of the claim.
        /// 
        /// If the parameter is null, the insured contact will be determined by the assignment type value.</summary>
        [Newtonsoft.Json.JsonProperty("SetAssigneeAsInsuredContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SetAssigneeAsInsuredContact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomField> CustomFields { get; set; }
    
    
    }
    
    /// <summary>This type represents a user's role in a claim when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ClaimUserRoleSpecification 
    {
        /// <summary>The user role label as it is configured on the claim defaults page of Claims Connect.
        /// 
        /// The default role labels for insurance companies are: Loss Taker, Dispatcher, Desk Reviewer, Reinspector, Manager,
        /// Agent, Underwriter, Adjuster, Internal Supervisor, Field Supervisor.
        /// 
        /// The default role labels for contractors and independent adjusters are: Dispatcher, Supervisor, Manager, Estimator.
        /// 
        /// If the user role label is set to an empty string, the user won't have any role.</summary>
        [Newtonsoft.Json.JsonProperty("UserRoleLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string UserRoleLabel { get; set; }
    
        /// <summary>When set to true and if the role is Adjuster/Estimator, the user will become the Primary Adjuster/Estimator.
        /// 
        /// Any other Primary Adjuster/Estimator on the claim will no longer be Primary (there can only be one Primary on a claim).</summary>
        [Newtonsoft.Json.JsonProperty("ForcePrimary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ForcePrimary { get; set; }
    
        /// <summary>When set to true and if "ForcePrimary" is true and if the role is Adjuster, the user will become primary adjuster
        /// for the assignment as well as primary adjuster for the claim.</summary>
        [Newtonsoft.Json.JsonProperty("ForceClaimPrimary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ForceClaimPrimary { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AddClaimInternalAssigneeSpecification 
    {
        /// <summary>The identifier of the code used to select the claim assignment type.
        /// 
        /// If the assignmentTypeCode is empty, the default assignment type for the company will be used.
        /// 
        /// If assignmentTypeCode contains an invalid value, an error will be returned.</summary>
        [Newtonsoft.Json.JsonProperty("AssignmentTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssignmentTypeCode { get; set; }
    
        /// <summary>The identifier of the user to who the claim will be assigned.</summary>
        [Newtonsoft.Json.JsonProperty("AssigneeUserIDSpecification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserIDSpecification AssigneeUserIDSpecification { get; set; }
    
        /// <summary>The claim role of the user to assign.
        /// 
        /// If this parameter is set to null, Symbility will use the default role setup in the user's account.
        /// 
        /// If the user role label is not found, a warning will be returned and the parameter will be considered null.</summary>
        [Newtonsoft.Json.JsonProperty("ClaimUserRoleSpecification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClaimUserRoleSpecification ClaimUserRoleSpecification { get; set; }
    
        /// <summary>The notes to be added to the assignment.
        /// 
        /// If the parameter is empty, the default notes associated with the assignment type will be used.</summary>
        [Newtonsoft.Json.JsonProperty("AssignmentNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssignmentNotes { get; set; }
    
        /// <summary>This indicates whether the assignment should be the insured contact of the claim.
        /// 
        /// If the parameter is null, the insured contact will be determined by the assignment type value.</summary>
        [Newtonsoft.Json.JsonProperty("SetAssigneeAsInsuredContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SetAssigneeAsInsuredContact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomField> CustomFields { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SetClaimAssignmentStatusSpecification 
    {
        /// <summary>This type represents the claim assignment status values that the Symbility API supports.
        /// 
        /// **None**: The claim is not assigned to a company.
        /// 
        /// **AssignmentSent**: The claim assignment has been sent.
        /// 
        /// **AssignmentReceived**: The claim assignment has been received.
        /// 
        /// **InsuredContacted**: The insured has been contacted.
        /// 
        /// **InspectionPerformed**: The inspection has been performed.
        /// 
        /// **InspectionScheduled**: The inspection has been scheduled.
        /// 
        /// **MitigationWorkStarted**: The mitigation work has started.
        /// 
        /// **MitigationWorkCompleted**: The mitigation work has been completed.
        /// 
        /// **EstimateReadyForReview**: One or many estimates have been marked Ready for Review.
        /// 
        /// **EstimateCompleted**: One or many estimates have been completed.
        /// 
        /// **EstimateApproved**: One or many estimates have been approved.
        /// 
        /// **JobScheduled**: The job's start and completion dates have been scheduled.
        /// 
        /// **JobNotSold**: The claim assignment has been marked Job Not Sold.
        /// 
        /// **JobStarted**: The job has been started. 
        /// 
        /// **JobCompleted**: The job has been completed.
        /// 
        /// **AssignmentCompleted**: The claim assignment has been completed.
        /// 
        /// **AssignmentCancelled**: The claim assignment has been cancelled.
        /// 
        /// **AssignmentDeclined**: The claim assignment has been declined.
        /// 
        /// **AssignmentReopened**: The claim assignment has been reopened.
        /// 
        /// **Multiple**: The claim has multiple claim assignment statuses.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("ClaimAssignmentStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ClaimAssignmentStatus ClaimAssignmentStatus { get; set; }
    
        /// <summary>The date/time (UTC) the assignment status change has occurred.
        /// 
        /// This parameter can be left empty and the system will take the current date.
        /// 
        /// Note that this parameter can't be in the future and can only be specified if the originator of the claim is allowing
        /// assignment status date changes and if the assignment status supports a user entered date.</summary>
        [Newtonsoft.Json.JsonProperty("EventDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EventDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SetClaimAssignmentStatusInspectionScheduledSpecification 
    {
        /// <summary>The date/time (UTC) the assignment status change (inspection scheduled) has occurred.
        /// 
        /// This parameter can be left empty and the system will take the current date.
        /// 
        /// Note that this parameter can't be in the future and can only be specified if the originator of the claim is allowing
        /// assignment status date changes and if the assignment status supports a user entered date.</summary>
        [Newtonsoft.Json.JsonProperty("EventDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EventDate { get; set; }
    
        /// <summary>The date/time (UTC) that the inspection is scheduled for.</summary>
        [Newtonsoft.Json.JsonProperty("InspectionScheduledForDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset InspectionScheduledForDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SetClaimAssignmentStatusJobScheduledSpecification 
    {
        /// <summary>The date/time (UTC) the assignment status change (job scheduled) has occurred.
        /// 
        /// This parameter can be left empty and the system will take the current date.
        /// 
        /// Note that this parameter can't be in the future and can only be specified if the originator of the claim is allowing
        /// assignment status date changes and if the assignment status supports a user entered date.</summary>
        [Newtonsoft.Json.JsonProperty("EventDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EventDate { get; set; }
    
        /// <summary>The date/time (UTC) that the job is scheduled to start.</summary>
        [Newtonsoft.Json.JsonProperty("JobScheduledStartDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset JobScheduledStartDate { get; set; }
    
        /// <summary>The date/time (UTC) that the job is scheduled to be completed.</summary>
        [Newtonsoft.Json.JsonProperty("JobScheduledCompleteDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset JobScheduledCompleteDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AuthenticationResponseDto 
    {
        /// <summary>The requested authentication token.</summary>
        [Newtonsoft.Json.JsonProperty("access_token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Access_token { get; set; }
    
        /// <summary>The number of seconds until the token expires.</summary>
        [Newtonsoft.Json.JsonProperty("expires_in", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Expires_in { get; set; }
    
        /// <summary>The type of authentication token (will be set to `Bearer`).</summary>
        [Newtonsoft.Json.JsonProperty("token_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token_type { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AuthenticationErrorResponseDto 
    {
        /// <summary>The error code. Possible values: `invalid_request`, `invalid_client`, `invalid_grant`, `unauthorized_client`, `unsupported_grant_type`, `invalid_scope`.</summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Error { get; set; }
    
        /// <summary>The detailed error description.</summary>
        [Newtonsoft.Json.JsonProperty("error_description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error_description { get; set; }
    
    
    }
    
    /// <summary>This type represents the item database types that the Symbility API supports.
    /// 
    /// **Residential**: The item database is a residential item database.
    /// 
    /// **Commercial**: The item database is a commercial item database.
    /// 
    /// **Contents**: The item database is a contents item database.
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ItemDatabaseType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Residential")]
        Residential = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Commercial")]
        Commercial = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Contents")]
        Contents = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 3,
    
    }
    
    /// <summary>This type represents the item database node types that the Symbility API supports.
    /// 
    /// **Database**: The node is the root database node.
    /// 
    /// **Version**: The node is a version node.
    /// 
    /// **Region**: The node is a region node.
    /// 
    /// **Customization**: The node is a customization node.
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ItemDatabaseNodeType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Database")]
        Database = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Version")]
        Version = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Region")]
        Region = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Customization")]
        Customization = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 4,
    
    }
    
    /// <summary>This type represents an item database node when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ItemDatabaseNode 
    {
        /// <summary>The name of the item database node.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string Name { get; set; }
    
        /// <summary>This type represents the item database node types that the Symbility API supports.
        /// 
        /// **Database**: The node is the root database node.
        /// 
        /// **Version**: The node is a version node.
        /// 
        /// **Region**: The node is a region node.
        /// 
        /// **Customization**: The node is a customization node.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ItemDatabaseNodeType Type { get; set; }
    
    
    }
    
    /// <summary>This type represents an item database when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ItemDatabase 
    {
        /// <summary>The full name of the item database.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string Name { get; set; }
    
        /// <summary>This type represents the item database types that the Symbility API supports.
        /// 
        /// **Residential**: The item database is a residential item database.
        /// 
        /// **Commercial**: The item database is a commercial item database.
        /// 
        /// **Contents**: The item database is a contents item database.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ItemDatabaseType Type { get; set; }
    
        /// <summary>The nodes hierarchy for the item database.
        /// 
        /// The first element is the root.</summary>
        [Newtonsoft.Json.JsonProperty("Nodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ItemDatabaseNode> Nodes { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ClaimType : System.Collections.ObjectModel.Collection<ClaimTypeFlags>
    {
    
    }
    
    /// <summary>This type represents the contents replacement service level specified values that the Symbility API supports.
    /// 
    /// **None**: No contents service level.
    /// 
    /// **Inventory**: Our contents partner (Alliance member) is responsible for creating the inventory of the contents to be replaced.
    /// 
    /// **Appraisal**: Our contents partner (Alliance member) is responsible for pricing the inventory of contents to be replaced.
    /// 
    /// **InventoryAndAppraisal**: Our contents partner (Alliance member) is responsible for creating and pricing the inventory of contents to be replaced.
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ClaimContentsServiceLevel
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Inventory")]
        Inventory = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Appraisal")]
        Appraisal = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InventoryAndAppraisal")]
        InventoryAndAppraisal = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 4,
    
    }
    
    /// <summary>This field represents the type of the guest/broker company.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GuestCompanyType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BrokerGeneral")]
        BrokerGeneral = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BrokerDomestic")]
        BrokerDomestic = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BrokerCommercial")]
        BrokerCommercial = 3,
    
    }
    
    /// <summary>This type represents a guest company when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GuestCompany 
    {
        /// <summary>The name of the current guest company associated with the claim.</summary>
        [Newtonsoft.Json.JsonProperty("CompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string CompanyName { get; set; }
    
        /// <summary>This field represents the type of the guest/broker company.</summary>
        [Newtonsoft.Json.JsonProperty("ParticipantGuestCompanyType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GuestCompanyType ParticipantGuestCompanyType { get; set; }
    
    
    }
    
    /// <summary>This type represents the claim status values that the Symbility API supports.
    /// 
    /// **NotAssigned**: The claim is not assigned to a company.This value is now deprecated in version 1.22 (and above) of the API.
    /// 
    /// **AssignmentSent**: The claim assignment has been sent. This value is now deprecated in version 1.22 (and above) of the API.
    /// 
    /// **AssignmentReceived**: The claim assignment has been received.This value is now deprecated in version 1.22 (and above) of the API.
    /// 
    /// **InsuredContacted**: The insured has been contacted. This value is now deprecated in version 1.22 (and above) of the API.
    /// 
    /// **InspectionPerformed**: The inspection has been performed. This value is now deprecated in version 1.22 (and above) of the API.
    /// 
    /// **EstimateCompleted**: One or many estimates have been completed. This value is now deprecated in version 1.22 (and above) of the API.
    /// 
    /// **EstimateApproved**: One or many estimates have been approved. This value is now deprecated in version 1.22 (and above) of the API.
    /// 
    /// **JobScheduled**: The job's start and completion dates have been scheduled. This value is now deprecated in version 1.22 (and above) of the API.
    /// 
    /// **JobStarted**: The job has been started. This value is now deprecated in version 1.22 (and above) of the API.
    /// 
    /// **JobPaused**: The job has been paused. This value is now deprecated in version 1.22 (and above) of the API.
    /// 
    /// **JobCompleted**: The job has been completed. This value is now deprecated in version 1.22 (and above) of the API.
    /// 
    /// **ResolvedResidential**: The residential part has been resolved.This value is now deprecated in version 1.22 (and above) of the API.
    /// 
    /// **ResolvedCommercial**: The commercial part has been resolved.This value is now deprecated in version 1.22 (and above) of the API.
    /// 
    /// **ResolvedContents**: The contents replacement part has been resolved. This value is now deprecated in version 1.22 (and above) of the API.
    /// 
    /// **Closed**: The claim is closed.
    /// 
    /// **ClosedCashedOut**: The claim is closed and cashed out.
    /// 
    /// **ClosedInvalid**: The claim is closed and invalid (except for certain companies, all diagrams, estimates, forms, photos and external documents have been deleted). 
    /// 
    /// **ClosedCanceled**: The claim is closed and canceled(except for certain companies, all diagrams, estimates, forms, photos and external documents have been deleted).
    /// 
    /// **ClosedMerged**: The claim is closed after being merged into another claim. ). This value is now deprecated in version 1.22 (and above) of the API.
    /// 
    /// **Reopened**: The claim has been reopened.
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.
    /// 
    /// **Opened**: The claim has been opened.
    /// 
    /// **Contacted**: The insured has been contacted. In the case of multiple assignments, the timestamp for this status is when the insured first gets contacted.
    /// 
    /// **Inspected**: The property has been inspected.
    /// 
    /// **In Progress**: The claim is in progress.
    /// 
    /// **At Repair**: The property is currently being repaired.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ClaimStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NotAssigned")]
        NotAssigned = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AssignmentSent")]
        AssignmentSent = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AssignmentReceived")]
        AssignmentReceived = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InsuredContacted")]
        InsuredContacted = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InspectionPerformed")]
        InspectionPerformed = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EstimateCompleted")]
        EstimateCompleted = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EstimateApproved")]
        EstimateApproved = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JobStarted")]
        JobStarted = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JobCompleted")]
        JobCompleted = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Closed")]
        Closed = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Reopened")]
        Reopened = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ClosedCashedOut")]
        ClosedCashedOut = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ClosedInvalid")]
        ClosedInvalid = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ResolvedResidential")]
        ResolvedResidential = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ResolvedCommercial")]
        ResolvedCommercial = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ResolvedContents")]
        ResolvedContents = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JobScheduled")]
        JobScheduled = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ClosedCanceled")]
        ClosedCanceled = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ClosedMerged")]
        ClosedMerged = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Contacted")]
        Contacted = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Inspected")]
        Inspected = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InProgress")]
        InProgress = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AtRepair")]
        AtRepair = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 24,
    
    }
    
    /// <summary>This field represents the type of the guest company.
    /// 
    /// **None**: No phone number specified. This value is now deprecated in version 1.3 (and above) of the API.
    /// 
    /// **Business2**: Second business phone number.
    /// 
    /// **BusinessFax**: Business fax number.
    /// 
    /// **Home2**: Second home phone number.
    /// 
    /// **HomeFax**: Home fax number.
    /// 
    /// **Other**: Other phone number.
    /// 
    /// **Pager**: Pager number.
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PhoneLabel
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Business2")]
        Business2 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BusinessFax")]
        BusinessFax = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Home2")]
        Home2 = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HomeFax")]
        HomeFax = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pager")]
        Pager = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 6,
    
    }
    
    /// <summary>This type represents the overall risk condition values that the Symbility API supports.
    /// 
    /// **Excellent**: The overall risk condition is excellent.
    /// 
    /// **Average**: The overall risk condition is average.
    /// 
    /// **Poor**: The overall risk condition is poor.
    /// 
    /// **SeeComments**: The overall risk condition is detailed in the comments section.
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ClaimOverallRiskCondition
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Excellent")]
        Excellent = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Average")]
        Average = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Poor")]
        Poor = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SeeComments")]
        SeeComments = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 5,
    
    }
    
    /// <summary>This type represents the type of deductible that the Symbility API supports.
    /// 
    /// **None**: No deductible type.
    /// 
    /// **Fixed**: The deductible will be set to a fixed type.
    /// 
    /// **Variable**: The deductible will be set to a variable type.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DeductibleType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fixed")]
        Fixed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Variable")]
        Variable = 2,
    
    }
    
    /// <summary>This type represents the type of sublimit when using the Symbility API.
    /// 
    /// **Fixed**: The sublimit is fixed.
    /// 
    /// **FixedShared**: The sublimit is fixed (shared).
    /// 
    /// **Variable**: The sublimit is variable.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SublimitType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"FixedShared")]
        FixedShared = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fixed")]
        Fixed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Variable")]
        Variable = 2,
    
    }
    
    /// <summary>This type represents a claim subcoverage when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ClaimSubcoverage 
    {
        /// <summary>The identifier of the claim coverage.  This property is ignored when creating a claim/subcoverage.</summary>
        [Newtonsoft.Json.JsonProperty("ClaimSubcoverageID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ClaimSubcoverageID { get; set; }
    
        /// <summary>Type of the subcoverage.
        /// 
        /// If the specified subcoverage type is not listed on Claims Connect, a new coverage type will be created on Claims
        /// Connect for that company.</summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>The sublimit value for the subcoverage.
        /// 
        /// The value is currency for FixedShared or Fixed SublimitType and percentage for Variable SublimitType.</summary>
        [Newtonsoft.Json.JsonProperty("Sublimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Sublimit { get; set; }
    
        /// <summary>This type represents the type of sublimit when using the Symbility API.
        /// 
        /// **Fixed**: The sublimit is fixed.
        /// 
        /// **FixedShared**: The sublimit is fixed (shared).
        /// 
        /// **Variable**: The sublimit is variable.</summary>
        [Newtonsoft.Json.JsonProperty("SublimitType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SublimitType SublimitType { get; set; }
    
        /// <summary>The minimum amount of the sublimit for the claim (currency).</summary>
        [Newtonsoft.Json.JsonProperty("SublimitMinimumAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? SublimitMinimumAmount { get; set; }
    
    
    }
    
    /// <summary>This type represents a claim coverage when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ClaimCoverage 
    {
        /// <summary>The identifier of the claim coverage.  This property is ignored when creating a claim/coverage.</summary>
        [Newtonsoft.Json.JsonProperty("ClaimCoverageID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ClaimCoverageID { get; set; }
    
        /// <summary>Name of the coverage (often the same as Type).</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Name { get; set; }
    
        /// <summary>Type of the coverage.
        /// 
        /// If the specified coverage type is not listed on Claims Connect, a new coverage type will be created on Claims Connect
        /// for that company.</summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Type { get; set; }
    
        /// <summary>True if the depreciation is recoverable by default for the coverage.</summary>
        [Newtonsoft.Json.JsonProperty("RecoverableDepreciation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RecoverableDepreciation { get; set; } = true;
    
        /// <summary>True if default coverage.</summary>
        [Newtonsoft.Json.JsonProperty("Default", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Default { get; set; } = false;
    
        /// <summary>This type represents the type of deductible that the Symbility API supports.
        /// 
        /// **None**: No deductible type.
        /// 
        /// **Fixed**: The deductible will be set to a fixed type.
        /// 
        /// **Variable**: The deductible will be set to a variable type.</summary>
        [Newtonsoft.Json.JsonProperty("DeductibleType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeductibleType DeductibleType { get; set; }
    
        /// <summary>List of subcoverages for the current coverage.
        /// 
        /// Set to null / empty if there are no subcoverages.</summary>
        [Newtonsoft.Json.JsonProperty("ClaimSubcoverages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ClaimSubcoverage> ClaimSubcoverages { get; set; }
    
        /// <summary>The reserve amount for the coverage (currency).</summary>
        [Newtonsoft.Json.JsonProperty("Reserve", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Reserve { get; set; }
    
        /// <summary>The limits amount for the coverage (currency).</summary>
        [Newtonsoft.Json.JsonProperty("Limits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Limits { get; set; }
    
        /// <summary>The deductible amount for the coverage.
        /// 
        /// Note that this field can contain either a rate or an amount (currency).</summary>
        [Newtonsoft.Json.JsonProperty("Deductible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Deductible { get; set; }
    
        /// <summary>The minimum amount of the deductible for the claim (currency).</summary>
        [Newtonsoft.Json.JsonProperty("DeductibleMinimumAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? DeductibleMinimumAmount { get; set; }
    
        /// <summary>The maximum rate of the deductible for the claim (currency).</summary>
        [Newtonsoft.Json.JsonProperty("DeductibleMaximumRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? DeductibleMaximumRate { get; set; }
    
    
    }
    
    /// <summary>This type represents an insured contact when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class InsuredContact 
    {
        /// <summary>The company set as the insured contact or the company of the user set as the insured contact.</summary>
        [Newtonsoft.Json.JsonProperty("Company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Company Company { get; set; }
    
        /// <summary>The user set as the insured contact – can be null.</summary>
        [Newtonsoft.Json.JsonProperty("User", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User User { get; set; }
    
        /// <summary>The display name of the insured contact (as seen by the insured).</summary>
        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string DisplayName { get; set; }
    
        /// <summary>The phone number of the insured contact.</summary>
        [Newtonsoft.Json.JsonProperty("Phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Phone { get; set; }
    
        /// <summary>The email address of the insured contact.</summary>
        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Email { get; set; }
    
    
    }
    
    /// <summary>This type represents the status of the claim upload from CoreLogic Mobile Claims to Claims Connect.
    /// 
    /// This type is typically used in combination with the ClaimPhotoUploadCompleted event.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ClaimUploadStatus 
    {
        /// <summary>True if all photos have been uploaded to Claims Connect or if no photos are present in the claim.
        /// 
        /// False if there is at least one photo that has not been uploaded yet.</summary>
        [Newtonsoft.Json.JsonProperty("PhotosUploaded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PhotosUploaded { get; set; } = true;
    
    
    }
    
    /// <summary>This type represents a claim question answer specified when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class QuestionAnswer 
    {
        /// <summary>The code of the question.</summary>
        [Newtonsoft.Json.JsonProperty("QuestionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuestionCode { get; set; }
    
        /// <summary>The code of the answer.</summary>
        [Newtonsoft.Json.JsonProperty("AnswerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AnswerCode { get; set; }
    
        /// <summary>The value of the answer.</summary>
        [Newtonsoft.Json.JsonProperty("AnswerValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AnswerValue { get; set; }
    
    
    }
    
    /// <summary>This type represents additional fields for the German market when using the Symbility API.
    /// 
    /// This type is only available for Germany.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GermanyAdditionalFields 
    {
        /// <summary>The number of the parallel claim.</summary>
        [Newtonsoft.Json.JsonProperty("ParallelClaimNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ParallelClaimNumber { get; set; }
    
        /// <summary>The description of the loss contact.</summary>
        [Newtonsoft.Json.JsonProperty("LossContactDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string LossContactDescription { get; set; }
    
        /// <summary>The code of the terms and condition.</summary>
        [Newtonsoft.Json.JsonProperty("TermsAndConditionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string TermsAndConditionCode { get; set; }
    
        /// <summary>The description of the terms and condition.</summary>
        [Newtonsoft.Json.JsonProperty("TermsAndConditionDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string TermsAndConditionDescription { get; set; }
    
        /// <summary>Whether or not previous claims exist.</summary>
        [Newtonsoft.Json.JsonProperty("HasPreviousClaims", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasPreviousClaims { get; set; } = false;
    
        /// <summary>The last saved date of the claim.</summary>
        [Newtonsoft.Json.JsonProperty("LastSavedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastSavedDate { get; set; }
    
        /// <summary>The last saved date of the policy.</summary>
        [Newtonsoft.Json.JsonProperty("PolicyLastChangedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PolicyLastChangedDate { get; set; }
    
    
    }
    
    /// <summary>This type represents the claim data returned by the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Claim 
    {
        /// <summary>The writing company for the claim.</summary>
        [Newtonsoft.Json.JsonProperty("WritingCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string WritingCompany { get; set; }
    
        /// <summary>When a letterhead name is specified here, the logo of that letterhead will always be used when printing the claim.
        /// 
        /// This overrides any letterhead logo selected when printing.</summary>
        [Newtonsoft.Json.JsonProperty("LetterheadLogoOverrideName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string LetterheadLogoOverrideName { get; set; }
    
        /// <summary>The item databases attached to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("ItemDatabases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ItemDatabase> ItemDatabases { get; set; }
    
        /// <summary>The claim's file number (if any), different from the claim number.</summary>
        [Newtonsoft.Json.JsonProperty("FileNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string FileNumber { get; set; }
    
        /// <summary>The loss contact name (if different than the insured name).</summary>
        [Newtonsoft.Json.JsonProperty("LossContactName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string LossContactName { get; set; }
    
        /// <summary>The loss contact phone number (if different than the insured's phone number).</summary>
        [Newtonsoft.Json.JsonProperty("LossContactPhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string LossContactPhone { get; set; }
    
        /// <summary>The internal users that are assigned to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("InternalAssignees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<User> InternalAssignees { get; set; }
    
        /// <summary>This type represents the claim type values that the Symbility API supports. This is a bit field, a set of flags.
        /// 
        /// The ClaimType can be one or more of the following values.
        /// 
        /// **Residential**: The claim concerns the structure of a residential property.
        /// 
        /// **Commercial**: The claim concerns the structure of a commercial property.
        /// 
        /// **Contents**: The claim involves contents replacement.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ClaimType Type { get; set; }
    
        /// <summary>This type represents the contents replacement service level specified values that the Symbility API supports.
        /// 
        /// **None**: No contents service level.
        /// 
        /// **Inventory**: Our contents partner (Alliance member) is responsible for creating the inventory of the contents to be replaced.
        /// 
        /// **Appraisal**: Our contents partner (Alliance member) is responsible for pricing the inventory of contents to be replaced.
        /// 
        /// **InventoryAndAppraisal**: Our contents partner (Alliance member) is responsible for creating and pricing the inventory of contents to be replaced.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("ContentsServiceLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ClaimContentsServiceLevel ContentsServiceLevel { get; set; }
    
        /// <summary>The broker/guest company for the claim.</summary>
        [Newtonsoft.Json.JsonProperty("GuestCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GuestCompany GuestCompany { get; set; }
    
        /// <summary>The date and time (UTC) when the claim was closed.</summary>
        [Newtonsoft.Json.JsonProperty("ClosedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ClosedDate { get; set; }
    
        /// <summary>This type represents the claim status values that the Symbility API supports.
        /// 
        /// **NotAssigned**: The claim is not assigned to a company.This value is now deprecated in version 1.22 (and above) of the API.
        /// 
        /// **AssignmentSent**: The claim assignment has been sent. This value is now deprecated in version 1.22 (and above) of the API.
        /// 
        /// **AssignmentReceived**: The claim assignment has been received.This value is now deprecated in version 1.22 (and above) of the API.
        /// 
        /// **InsuredContacted**: The insured has been contacted. This value is now deprecated in version 1.22 (and above) of the API.
        /// 
        /// **InspectionPerformed**: The inspection has been performed. This value is now deprecated in version 1.22 (and above) of the API.
        /// 
        /// **EstimateCompleted**: One or many estimates have been completed. This value is now deprecated in version 1.22 (and above) of the API.
        /// 
        /// **EstimateApproved**: One or many estimates have been approved. This value is now deprecated in version 1.22 (and above) of the API.
        /// 
        /// **JobScheduled**: The job's start and completion dates have been scheduled. This value is now deprecated in version 1.22 (and above) of the API.
        /// 
        /// **JobStarted**: The job has been started. This value is now deprecated in version 1.22 (and above) of the API.
        /// 
        /// **JobPaused**: The job has been paused. This value is now deprecated in version 1.22 (and above) of the API.
        /// 
        /// **JobCompleted**: The job has been completed. This value is now deprecated in version 1.22 (and above) of the API.
        /// 
        /// **ResolvedResidential**: The residential part has been resolved.This value is now deprecated in version 1.22 (and above) of the API.
        /// 
        /// **ResolvedCommercial**: The commercial part has been resolved.This value is now deprecated in version 1.22 (and above) of the API.
        /// 
        /// **ResolvedContents**: The contents replacement part has been resolved. This value is now deprecated in version 1.22 (and above) of the API.
        /// 
        /// **Closed**: The claim is closed.
        /// 
        /// **ClosedCashedOut**: The claim is closed and cashed out.
        /// 
        /// **ClosedInvalid**: The claim is closed and invalid (except for certain companies, all diagrams, estimates, forms, photos and external documents have been deleted). 
        /// 
        /// **ClosedCanceled**: The claim is closed and canceled(except for certain companies, all diagrams, estimates, forms, photos and external documents have been deleted).
        /// 
        /// **ClosedMerged**: The claim is closed after being merged into another claim. ). This value is now deprecated in version 1.22 (and above) of the API.
        /// 
        /// **Reopened**: The claim has been reopened.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.
        /// 
        /// **Opened**: The claim has been opened.
        /// 
        /// **Contacted**: The insured has been contacted. In the case of multiple assignments, the timestamp for this status is when the insured first gets contacted.
        /// 
        /// **Inspected**: The property has been inspected.
        /// 
        /// **In Progress**: The claim is in progress.
        /// 
        /// **At Repair**: The property is currently being repaired.</summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ClaimStatus Status { get; set; }
    
        /// <summary>The claim number.</summary>
        [Newtonsoft.Json.JsonProperty("Number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Number { get; set; }
    
        /// <summary>The claim globally unique identifier (Guid).</summary>
        [Newtonsoft.Json.JsonProperty("UniqueID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UniqueID { get; set; }
    
        /// <summary>The date and time (UTC) the claim was created on Claims Connect.</summary>
        [Newtonsoft.Json.JsonProperty("CreationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreationDate { get; set; }
    
        /// <summary>The date and time (UTC) of loss.</summary>
        [Newtonsoft.Json.JsonProperty("LossDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset LossDate { get; set; }
    
        /// <summary>The type of loss.</summary>
        [Newtonsoft.Json.JsonProperty("LossType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string LossType { get; set; }
    
        /// <summary>The catastrophe number.</summary>
        [Newtonsoft.Json.JsonProperty("CatastropheNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string CatastropheNumber { get; set; }
    
        /// <summary>True if the claim is a reinspection.</summary>
        [Newtonsoft.Json.JsonProperty("Reinspection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Reinspection { get; set; } = false;
    
        /// <summary>True if the claim is an emergency.</summary>
        [Newtonsoft.Json.JsonProperty("Emergency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Emergency { get; set; } = false;
    
        /// <summary>True if the claim is a secure claim.</summary>
        [Newtonsoft.Json.JsonProperty("Secure", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Secure { get; set; }
    
        /// <summary>The year the property was built.</summary>
        [Newtonsoft.Json.JsonProperty("BuiltYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BuiltYear { get; set; }
    
        /// <summary>The company name of the insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string InsuredCompanyName { get; set; }
    
        /// <summary>The title of the insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string InsuredTitle { get; set; }
    
        /// <summary>The first name of the insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredFirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string InsuredFirstName { get; set; }
    
        /// <summary>The last name of the insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredLastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string InsuredLastName { get; set; }
    
        /// <summary>The title of the second insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredTitle2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string InsuredTitle2 { get; set; }
    
        /// <summary>The first name of the second insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredFirstName2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string InsuredFirstName2 { get; set; }
    
        /// <summary>The last name of the second insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredLastName2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string InsuredLastName2 { get; set; }
    
        /// <summary>The home phone of the insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredHomePhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string InsuredHomePhone { get; set; }
    
        /// <summary>The business phone of the insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredBusinessPhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string InsuredBusinessPhone { get; set; }
    
        /// <summary>The mobile phone of the insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredMobilePhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string InsuredMobilePhone { get; set; }
    
        /// <summary>The other phone of the insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredOtherPhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string InsuredOtherPhone { get; set; }
    
        /// <summary>This field represents the type of the guest company.
        /// 
        /// **None**: No phone number specified. This value is now deprecated in version 1.3 (and above) of the API.
        /// 
        /// **Business2**: Second business phone number.
        /// 
        /// **BusinessFax**: Business fax number.
        /// 
        /// **Home2**: Second home phone number.
        /// 
        /// **HomeFax**: Home fax number.
        /// 
        /// **Other**: Other phone number.
        /// 
        /// **Pager**: Pager number.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredOtherPhoneLabel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PhoneLabel InsuredOtherPhoneLabel { get; set; }
    
        /// <summary>The email address of the insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string InsuredEmail { get; set; }
    
        /// <summary>The address of the insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address InsuredAddress { get; set; }
    
        /// <summary>The loss address (if different than the insured's address).</summary>
        [Newtonsoft.Json.JsonProperty("LossAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address LossAddress { get; set; }
    
        /// <summary>The initial loss report (multiline).</summary>
        [Newtonsoft.Json.JsonProperty("InitialLossReport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InitialLossReport { get; set; }
    
        /// <summary>The cause of the loss (multiline).</summary>
        [Newtonsoft.Json.JsonProperty("Cause", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cause { get; set; }
    
        /// <summary>The damages description (multiline).</summary>
        [Newtonsoft.Json.JsonProperty("Damages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Damages { get; set; }
    
        /// <summary>The general comments (multiline).</summary>
        [Newtonsoft.Json.JsonProperty("GeneralComments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GeneralComments { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OverallRiskCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ClaimOverallRiskCondition? OverallRiskCondition { get; set; }
    
        /// <summary>The tax information.</summary>
        [Newtonsoft.Json.JsonProperty("TaxInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClaimTaxInfo TaxInfo { get; set; }
    
        /// <summary>The overhead and profit information.</summary>
        [Newtonsoft.Json.JsonProperty("OverheadAndProfitInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClaimOverheadAndProfitInfo OverheadAndProfitInfo { get; set; }
    
        /// <summary>The contents overhead and profit information.</summary>
        [Newtonsoft.Json.JsonProperty("ContentsOverheadAndProfitInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClaimOverheadAndProfitInfo ContentsOverheadAndProfitInfo { get; set; }
    
        /// <summary>The minimum charge adjustments information.</summary>
        [Newtonsoft.Json.JsonProperty("MinimumCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClaimMinimumCharge MinimumCharge { get; set; }
    
        /// <summary>The policy number.</summary>
        [Newtonsoft.Json.JsonProperty("PolicyNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string PolicyNumber { get; set; }
    
        /// <summary>The policy type.</summary>
        [Newtonsoft.Json.JsonProperty("PolicyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string PolicyType { get; set; }
    
        /// <summary>The number of times the policy was renewed.</summary>
        [Newtonsoft.Json.JsonProperty("PolicyTimesRenewed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PolicyTimesRenewed { get; set; } = 0;
    
        /// <summary>True if without prejudice.</summary>
        [Newtonsoft.Json.JsonProperty("WithoutPrejudice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool WithoutPrejudice { get; set; } = false;
    
        /// <summary>The coverages for the claim.</summary>
        [Newtonsoft.Json.JsonProperty("Coverages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ClaimCoverage> Coverages { get; set; }
    
        /// <summary>This type represents the type of deductible that the Symbility API supports.
        /// 
        /// **None**: No deductible type.
        /// 
        /// **Fixed**: The deductible will be set to a fixed type.
        /// 
        /// **Variable**: The deductible will be set to a variable type.</summary>
        [Newtonsoft.Json.JsonProperty("DeductibleType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeductibleType DeductibleType { get; set; }
    
        /// <summary>If true, the coverage will be excluded from estimates where the total amount is less than the minimum deductible.</summary>
        [Newtonsoft.Json.JsonProperty("ExcludeCoverageIfLessThanMinimumDeductible", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ExcludeCoverageIfLessThanMinimumDeductible { get; set; } = false;
    
        /// <summary>The policy start date.</summary>
        [Newtonsoft.Json.JsonProperty("PolicyStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PolicyStartDate { get; set; }
    
        /// <summary>The policy end date.</summary>
        [Newtonsoft.Json.JsonProperty("PolicyEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PolicyEndDate { get; set; }
    
        /// <summary>The flat deductible (currency).</summary>
        [Newtonsoft.Json.JsonProperty("FlatDeductible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? FlatDeductible { get; set; }
    
        /// <summary>The minimum amount of the deductible for the claim (currency).</summary>
        [Newtonsoft.Json.JsonProperty("DeductibleMinimumAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? DeductibleMinimumAmount { get; set; }
    
        /// <summary>The maximum rate of the deductible for the claim (percentage).</summary>
        [Newtonsoft.Json.JsonProperty("DeductibleMaximumRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? DeductibleMaximumRate { get; set; }
    
        /// <summary>The custom fields for the claim.
        /// 
        /// This also includes the public custom fields of the assignees.</summary>
        [Newtonsoft.Json.JsonProperty("CustomFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomField> CustomFields { get; set; }
    
        /// <summary>The user who currently have the ownership of the claim (null if no user has ownership).</summary>
        [Newtonsoft.Json.JsonProperty("CurrentOwner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User CurrentOwner { get; set; }
    
        /// <summary>The company that created the claim.</summary>
        [Newtonsoft.Json.JsonProperty("Originator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Company Originator { get; set; }
    
        /// <summary>The insured contact for the claim.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InsuredContact InsuredContact { get; set; }
    
        /// <summary>The companies that were assigned to the claim with delegated authority.</summary>
        [Newtonsoft.Json.JsonProperty("DelegatedAuthority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Company> DelegatedAuthority { get; set; }
    
        /// <summary>The companies that were assigned to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("Assignees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Company> Assignees { get; set; }
    
        /// <summary>The users that were assigned to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("Peers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Company> Peers { get; set; }
    
        /// <summary>The upload status of the claim.</summary>
        [Newtonsoft.Json.JsonProperty("UploadStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClaimUploadStatus UploadStatus { get; set; }
    
        /// <summary>The assignments currently associated with the claim.</summary>
        [Newtonsoft.Json.JsonProperty("Assignments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ClaimAssignment> Assignments { get; set; }
    
        /// <summary>The question answers of the claim.</summary>
        [Newtonsoft.Json.JsonProperty("QuestionAnswers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QuestionAnswer> QuestionAnswers { get; set; }
    
        /// <summary>The additional fields for Germany. This property is only available for Germany.</summary>
        [Newtonsoft.Json.JsonProperty("GermanyAdditionalFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GermanyAdditionalFields GermanyAdditionalFields { get; set; }
    
        /// <summary>A string value that can be used for claim lookup.</summary>
        [Newtonsoft.Json.JsonProperty("ExternalReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ExternalReference { get; set; }
    
        /// <summary>The user being the point of contact within the claim.</summary>
        [Newtonsoft.Json.JsonProperty("ClaimContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User ClaimContact { get; set; }
    
    
    }
    
    /// <summary>This type represents a voice annotation when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class VoiceAnnotation 
    {
        /// <summary>The identifier of the voice annotation.</summary>
        [Newtonsoft.Json.JsonProperty("VoiceAnnotationID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int VoiceAnnotationID { get; set; }
    
        /// <summary>The caption of the voice annotation.</summary>
        [Newtonsoft.Json.JsonProperty("Caption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Caption { get; set; }
    
    
    }
    
    /// <summary>This type represents the journal entry type values that the Symbility API supports.
    /// 
    /// **Automatic**: The journal entry was automatically generated by the system.
    /// 
    /// **Manual**: The journal entry was added manually by a user.
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum JournalEntryType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Automatic")]
        Automatic = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Manual")]
        Manual = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 2,
    
    }
    
    /// <summary>This type represents a journal entry when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class JournalEntry 
    {
        /// <summary>The date and time (UTC) the journal entry was entered.</summary>
        [Newtonsoft.Json.JsonProperty("CreationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreationDate { get; set; }
    
        /// <summary>The journal entry text (multiline).</summary>
        [Newtonsoft.Json.JsonProperty("Entry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Entry { get; set; }
    
        /// <summary>The Symbility company ID of the head office of the author of the journal entry.</summary>
        [Newtonsoft.Json.JsonProperty("AuthorHeadOfficeCompanyID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string AuthorHeadOfficeCompanyID { get; set; }
    
        /// <summary>The Symbility company ID of the author of the journal entry.</summary>
        [Newtonsoft.Json.JsonProperty("AuthorCompanyID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string AuthorCompanyID { get; set; }
    
        /// <summary>The external system company code of the author if defined in the API account.</summary>
        [Newtonsoft.Json.JsonProperty("AuthorExternalSystemCompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AuthorExternalSystemCompanyCode { get; set; }
    
        /// <summary>The company name of the author of the journal entry.</summary>
        [Newtonsoft.Json.JsonProperty("AuthorCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string AuthorCompanyName { get; set; }
    
        /// <summary>The full name (&amp;lt;first name&amp;gt;&amp;lt;space&amp;gt;&amp;lt;last name&amp;gt;) of the author of the journal entry.
        /// An insured guest user's full name includes their title(&amp;lt;title&amp;gt;&amp;lt;space&amp;gt;&amp;lt;first
        /// name&amp;gt;&amp;lt;space&amp;gt;&amp;lt;last name&amp;gt;).</summary>
        [Newtonsoft.Json.JsonProperty("AuthorUserFullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(101)]
        public string AuthorUserFullName { get; set; }
    
        /// <summary>This type represents the journal entry type values that the Symbility API supports.
        /// 
        /// **Automatic**: The journal entry was automatically generated by the system.
        /// 
        /// **Manual**: The journal entry was added manually by a user.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JournalEntryType Type { get; set; }
    
    
    }
    
    /// <summary>This type represents the status of a payment.
    /// 
    /// **Pending**: The payment status is pending.
    /// 
    /// **Submitted**: The payment status is submitted.
    /// 
    /// **Approved**: The payment status is approved.
    /// 
    /// **Cancelled**: The payment status is cancelled.
    /// 
    /// **Rejected**: The payment status is rejected.
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ClaimPaymentStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Submitted")]
        Submitted = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Approved")]
        Approved = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rejected")]
        Rejected = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ClaimPaymentProperties : System.Collections.ObjectModel.Collection<ClaimPaymentPropertiesFlags>
    {
    
    }
    
    /// <summary>This type represents a payment made to a claim when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ClaimPayment 
    {
        /// <summary>The identifier of the payment.</summary>
        [Newtonsoft.Json.JsonProperty("PaymentID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PaymentID { get; set; }
    
        /// <summary>The date and time (UTC) the payment was created.</summary>
        [Newtonsoft.Json.JsonProperty("CreationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreationDate { get; set; }
    
        /// <summary>The Symbility company ID of the head office of the author of the payment.</summary>
        [Newtonsoft.Json.JsonProperty("AuthorHeadOfficeCompanyID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string AuthorHeadOfficeCompanyID { get; set; }
    
        /// <summary>The Symbility company ID of the author of the payment.</summary>
        [Newtonsoft.Json.JsonProperty("AuthorCompanyID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string AuthorCompanyID { get; set; }
    
        /// <summary>The external system company code of the author if defined in the API account.</summary>
        [Newtonsoft.Json.JsonProperty("AuthorExternalSystemCompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AuthorExternalSystemCompanyCode { get; set; }
    
        /// <summary>The company name of the author of the payment.</summary>
        [Newtonsoft.Json.JsonProperty("AuthorCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string AuthorCompanyName { get; set; }
    
        /// <summary>The name of the payment.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Name { get; set; }
    
        /// <summary>This type represents the status of a payment.
        /// 
        /// **Pending**: The payment status is pending.
        /// 
        /// **Submitted**: The payment status is submitted.
        /// 
        /// **Approved**: The payment status is approved.
        /// 
        /// **Cancelled**: The payment status is cancelled.
        /// 
        /// **Rejected**: The payment status is rejected.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ClaimPaymentStatus Status { get; set; }
    
        /// <summary>Total of the replacement cost value of all completed estimates (currency).</summary>
        [Newtonsoft.Json.JsonProperty("TotalReplacementCost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalReplacementCost { get; set; }
    
        /// <summary>Total of the net ACV of all completed estimates (currency).</summary>
        [Newtonsoft.Json.JsonProperty("TotalActualCashValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalActualCashValue { get; set; }
    
        /// <summary>Total of the amount payable of all completed estimates (currency).</summary>
        [Newtonsoft.Json.JsonProperty("TotalAmountPayable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalAmountPayable { get; set; }
    
        /// <summary>Total of the amount if depreciation is recovered of all completed estimates (currency).</summary>
        [Newtonsoft.Json.JsonProperty("TotalAmountPayableDepreciationRecovered", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalAmountPayableDepreciationRecovered { get; set; }
    
        /// <summary>The amount of the payment (currency).</summary>
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Amount { get; set; }
    
        /// <summary>The invoice number of the payment.</summary>
        [Newtonsoft.Json.JsonProperty("InvoiceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string InvoiceNumber { get; set; }
    
        /// <summary>The actual cash value of the deducitble of the payment (currency).</summary>
        [Newtonsoft.Json.JsonProperty("DeductibleActualCashValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal DeductibleActualCashValue { get; set; }
    
        /// <summary>The total amount of the deductible previously applied on the payment (currency).</summary>
        [Newtonsoft.Json.JsonProperty("TotalPreviousAppliedDeductible", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalPreviousAppliedDeductible { get; set; }
    
        /// <summary>The additional deductible that will be applied if the depreciation is recovered (currency).</summary>
        [Newtonsoft.Json.JsonProperty("AdditionalDeductibleIfDepreciationRecovered", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal AdditionalDeductibleIfDepreciationRecovered { get; set; }
    
        /// <summary>The amount of the payment applied to the deductible (currency).</summary>
        [Newtonsoft.Json.JsonProperty("AppliedDeductible", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal AppliedDeductible { get; set; }
    
        /// <summary>The effective payment amount (the invoice amount minus deductible and after limits) (currency).</summary>
        [Newtonsoft.Json.JsonProperty("PaymentAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal PaymentAmount { get; set; }
    
        /// <summary>The check number of the payment.</summary>
        [Newtonsoft.Json.JsonProperty("CheckNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string CheckNumber { get; set; }
    
        /// <summary>The "Paid to" of the payment.</summary>
        [Newtonsoft.Json.JsonProperty("PaidToTheOrderOf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string PaidToTheOrderOf { get; set; }
    
        /// <summary>The comments of the payment.</summary>
        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comments { get; set; }
    
        /// <summary>This type represents the properties of the payment that the Symbility API supports.
        /// 
        /// **None**: There are no properties applied to the payment.
        /// 
        /// **ApplyDeductible**: The payment should be applied towards the deductible.
        /// 
        /// **FullPayment**: The payment fully covers all estimate items of the payment.
        /// 
        /// **DepreciationRecovered**: The payment covers the recoverable depreciation of the estimate items of the payment.
        /// 
        /// **PartialPayment**: The payment partially covers the estimate items of the payment without covering their actual cash value.
        /// 
        /// **AcvPayment**: The payment covers the actual cash value of the estimate items of the payment.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ClaimPaymentProperties Properties { get; set; }
    
        /// <summary>The external documents attached to this payment.</summary>
        [Newtonsoft.Json.JsonProperty("ExternalDocuments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExternalDocument> ExternalDocuments { get; set; }
    
        /// <summary>The date and time (UTC) the payment was approved.</summary>
        [Newtonsoft.Json.JsonProperty("ApprovedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ApprovedDate { get; set; }
    
    
    }
    
    /// <summary>This type represents the details of a claim when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetClaimDetails 
    {
        /// <summary>The summary of the claim.</summary>
        [Newtonsoft.Json.JsonProperty("Claim", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Claim Claim { get; set; }
    
        /// <summary>The diagrams attached to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("Diagrams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Diagram> Diagrams { get; set; }
    
        /// <summary>The estimates attached to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("Estimates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Estimate> Estimates { get; set; }
    
        /// <summary>The photo pages attached to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("PhotoPages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PhotoPage> PhotoPages { get; set; }
    
        /// <summary>The voice annotations attached to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("VoiceAnnotations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VoiceAnnotation> VoiceAnnotations { get; set; }
    
        /// <summary>The forms attached to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("Forms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Form> Forms { get; set; }
    
        /// <summary>The journal entries attached to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("JournalEntries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JournalEntry> JournalEntries { get; set; }
    
        /// <summary>The external documents attached to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("ExternalDocuments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExternalDocument> ExternalDocuments { get; set; }
    
        /// <summary>The handwritten notes attached to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("HandwrittenNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HandwrittenNote> HandwrittenNotes { get; set; }
    
        /// <summary>The payments of the claim.</summary>
        [Newtonsoft.Json.JsonProperty("Payments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ClaimPayment> Payments { get; set; }
    
    
    }
    
    /// <summary>This type represents the journal entry structure needed to add a journal entry using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class JournalEntrySpecification 
    {
        /// <summary>The journal entry text (multiline).</summary>
        [Newtonsoft.Json.JsonProperty("Entry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Entry { get; set; }
    
        /// <summary>True if the claim participants should be notified of this manual journal entry.</summary>
        [Newtonsoft.Json.JsonProperty("NotifyParticipants", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool NotifyParticipants { get; set; } = false;
    
        /// <summary>True if the journal entry should be visible to the insured in LINK.
        /// 
        /// The insured will also receive a notification if notifications are configured in his account.</summary>
        [Newtonsoft.Json.JsonProperty("IntendedForInsured", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IntendedForInsured { get; set; }
    
    
    }
    
    /// <summary>This type represents the time zone values that the Symbility API supports.
    /// 
    /// **Special values**: UseApiAccountCompanyTimeZone, Utc</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TimeZone
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Hawaii")]
        Hawaii = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Alaska")]
        Alaska = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PacificTime")]
        PacificTime = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MountainTime")]
        MountainTime = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Arizona")]
        Arizona = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CentralTime")]
        CentralTime = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Saskatchewan")]
        Saskatchewan = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mexico")]
        Mexico = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EasternTime")]
        EasternTime = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IndianaEast")]
        IndianaEast = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AtlanticTime")]
        AtlanticTime = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Newfoundland")]
        Newfoundland = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GreenwichMeanTime")]
        GreenwichMeanTime = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GreenwichStandardTime")]
        GreenwichStandardTime = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CentralEuropeanTime")]
        CentralEuropeanTime = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RomanceTime")]
        RomanceTime = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WesternEurope")]
        WesternEurope = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SouthAfrica")]
        SouthAfrica = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GtbStandardTime")]
        GtbStandardTime = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WesternAustralia")]
        WesternAustralia = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tokyo")]
        Tokyo = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AusCentralStandardTime")]
        AusCentralStandardTime = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CentralAustralia")]
        CentralAustralia = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AusEasternStandardTime")]
        AusEasternStandardTime = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EasternAustralia")]
        EasternAustralia = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tasmania")]
        Tasmania = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Utc")]
        Utc = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UseApiAccountCompanyTimeZone")]
        UseApiAccountCompanyTimeZone = 27,
    
    }
    
    /// <summary>This type represents a writing company when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class WritingCompanySpecification 
    {
        /// <summary>The name of the writing company. If the name is empty, no writing company will be used.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Name { get; set; }
    
    
    }
    
    /// <summary>This type represents the guest/broker company identifier type values that the Symbility API supports.
    /// 
    /// **None**: The guest/broker company identifier is empty.
    /// 
    /// **Code**: The guest/broker company identifier contains the code of the company.
    /// 
    /// **Company Name**: The guest/broker company identifier contains the company name.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GuestCompanyIDType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Code")]
        Code = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CompanyName")]
        CompanyName = 2,
    
    }
    
    /// <summary>This type represents a guest company specification when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GuestCompanyIDSpecification 
    {
        /// <summary>The identifier of the guest/broker company. 
        /// 
        /// It can either represent a company name or a code which is specified in the second parameter. 
        /// 
        /// If the field is empty, no guest/broker company will be used.</summary>
        [Newtonsoft.Json.JsonProperty("GuestCompanyID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string GuestCompanyID { get; set; }
    
        /// <summary>This type represents the guest/broker company identifier type values that the Symbility API supports.
        /// 
        /// **None**: The guest/broker company identifier is empty.
        /// 
        /// **Code**: The guest/broker company identifier contains the code of the company.
        /// 
        /// **Company Name**: The guest/broker company identifier contains the company name.</summary>
        [Newtonsoft.Json.JsonProperty("ParticipantGuestCompanyIDType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GuestCompanyIDType ParticipantGuestCompanyIDType { get; set; }
    
    
    }
    
    /// <summary>This type represents the claim assignment info when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ClaimAssignmentSpecification 
    {
        /// <summary>The assignment code to be used.</summary>
        [Newtonsoft.Json.JsonProperty("ClaimAssignmentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ClaimAssignmentCode { get; set; }
    
        /// <summary>The company the claim is assigned to.</summary>
        [Newtonsoft.Json.JsonProperty("Assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompanyIDSpecification Assignee { get; set; }
    
        /// <summary>The user the claim is assigned to.</summary>
        [Newtonsoft.Json.JsonProperty("InternalAssignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserIDSpecification InternalAssignee { get; set; }
    
        /// <summary>This type represents the claim assignment option values that the Symbility API supports.
        /// 
        /// **None**: No option specified
        /// 
        /// **DelegatedAuthority**: Assignee has Delegated Authority
        /// 
        /// **ClaimStatusChange**: Assignee has the ability to change the claim status</summary>
        [Newtonsoft.Json.JsonProperty("Options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ClaimAssignmentOption Options { get; set; }
    
    
    }
    
    /// <summary>This type represents the claim structure needed to create a claim using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ClaimSpecification 
    {
        /// <summary>The date and time (UTC) of the claim creation.
        /// 
        /// By default, the system uses the current date and time, if none is specified.</summary>
        [Newtonsoft.Json.JsonProperty("CreationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreationDate { get; set; }
    
        /// <summary>The loss contact name (if different than the insured name).</summary>
        [Newtonsoft.Json.JsonProperty("LossContactName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string LossContactName { get; set; }
    
        /// <summary>The loss contact phone number (if different than the insured's phone number).</summary>
        [Newtonsoft.Json.JsonProperty("LossContactPhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string LossContactPhone { get; set; }
    
        /// <summary>This type represents the claim type values that the Symbility API supports. This is a bit field, a set of flags.
        /// 
        /// The ClaimType can be one or more of the following values.
        /// 
        /// **Residential**: The claim concerns the structure of a residential property.
        /// 
        /// **Commercial**: The claim concerns the structure of a commercial property.
        /// 
        /// **Contents**: The claim involves contents replacement.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ClaimType Type { get; set; }
    
        /// <summary>This type represents the contents replacement service level specified values that the Symbility API supports.
        /// 
        /// **None**: No contents service level.
        /// 
        /// **Inventory**: Our contents partner (Alliance member) is responsible for creating the inventory of the contents to be replaced.
        /// 
        /// **Appraisal**: Our contents partner (Alliance member) is responsible for pricing the inventory of contents to be replaced.
        /// 
        /// **InventoryAndAppraisal**: Our contents partner (Alliance member) is responsible for creating and pricing the inventory of contents to be replaced.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("ContentsServiceLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ClaimContentsServiceLevel ContentsServiceLevel { get; set; }
    
        /// <summary>The claim number.
        /// 
        /// All claims within a company need to have a unique claim number.</summary>
        [Newtonsoft.Json.JsonProperty("Number", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Number { get; set; }
    
        /// <summary>The date and time of loss.</summary>
        [Newtonsoft.Json.JsonProperty("LossDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LossDate { get; set; }
    
        /// <summary>The time zone associated with the date and time of loss.
        /// 
        /// The default value is UseApiAccountCompanyTimeZone which assumes that the LossDate is specified in the
        /// time zone of the company associated with the API account.
        /// 
        /// **Special values**: UseApiAccountCompanyTimeZone, Utc</summary>
        [Newtonsoft.Json.JsonProperty("LossDateTimeZone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TimeZone LossDateTimeZone { get; set; }
    
        /// <summary>The type of loss.</summary>
        [Newtonsoft.Json.JsonProperty("LossType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string LossType { get; set; }
    
        /// <summary>The catastrophe number.</summary>
        [Newtonsoft.Json.JsonProperty("CatastropheNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string CatastropheNumber { get; set; }
    
        /// <summary>True if the claim is a reinspection.</summary>
        [Newtonsoft.Json.JsonProperty("Reinspection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Reinspection { get; set; } = false;
    
        /// <summary>True if the claim is an emergency.</summary>
        [Newtonsoft.Json.JsonProperty("Emergency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Emergency { get; set; } = false;
    
        /// <summary>The writing company associated with the claim.
        /// 
        /// If no WritingCompanySpecification is specified, Symbility will use the company's default writing company or the user's
        /// if specified.</summary>
        [Newtonsoft.Json.JsonProperty("WritingCompanySpecification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WritingCompanySpecification WritingCompanySpecification { get; set; }
    
        /// <summary>When a letterhead name is specified here, the logo of that letterhead will always be used when printing the claim.
        /// 
        /// This overrides any letterhead logo selected when printing.</summary>
        [Newtonsoft.Json.JsonProperty("LetterheadLogoOverrideName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string LetterheadLogoOverrideName { get; set; }
    
        /// <summary>The claim's file number (if any), different from the claim number.
        /// 
        /// This property should only be used by vendors.</summary>
        [Newtonsoft.Json.JsonProperty("FileNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string FileNumber { get; set; }
    
        /// <summary>The identifier and type of identifier used to find the broker company associated with the claim.
        /// 
        /// If no BrokerCompanyIDSpecification is specified, Symbility will use the company's default broker company or the user's
        /// if specified.</summary>
        [Newtonsoft.Json.JsonProperty("BrokerCompanyIDSpecification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GuestCompanyIDSpecification BrokerCompanyIDSpecification { get; set; }
    
        /// <summary>The year the property was built.</summary>
        [Newtonsoft.Json.JsonProperty("BuiltYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BuiltYear { get; set; }
    
        /// <summary>The company name of the insured.
        /// 
        /// This field is mandatory when creating a new claim unless a first name, last name have been specified.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string InsuredCompanyName { get; set; }
    
        /// <summary>The title of the insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string InsuredTitle { get; set; }
    
        /// <summary>The first name of the insured.
        /// 
        /// This field is mandatory when creating a new claim unless a company has been specified.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredFirstName", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string InsuredFirstName { get; set; }
    
        /// <summary>The last name of the insured.
        /// 
        /// This field is mandatory when creating a new claim unless a company has been specified.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredLastName", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string InsuredLastName { get; set; }
    
        /// <summary>The title of the second insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredTitle2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string InsuredTitle2 { get; set; }
    
        /// <summary>The first name of the second insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredFirstName2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string InsuredFirstName2 { get; set; }
    
        /// <summary>The last name of the second insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredLastName2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string InsuredLastName2 { get; set; }
    
        /// <summary>The home phone of the insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredHomePhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string InsuredHomePhone { get; set; }
    
        /// <summary>The business phone of the insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredBusinessPhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string InsuredBusinessPhone { get; set; }
    
        /// <summary>The mobile phone of the insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredMobilePhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string InsuredMobilePhone { get; set; }
    
        /// <summary>The other phone of the insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredOtherPhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string InsuredOtherPhone { get; set; }
    
        /// <summary>This field represents the type of the guest company.
        /// 
        /// **None**: No phone number specified. This value is now deprecated in version 1.3 (and above) of the API.
        /// 
        /// **Business2**: Second business phone number.
        /// 
        /// **BusinessFax**: Business fax number.
        /// 
        /// **Home2**: Second home phone number.
        /// 
        /// **HomeFax**: Home fax number.
        /// 
        /// **Other**: Other phone number.
        /// 
        /// **Pager**: Pager number.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredOtherPhoneLabel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PhoneLabel InsuredOtherPhoneLabel { get; set; }
    
        /// <summary>The email address of the insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string InsuredEmail { get; set; }
    
        /// <summary>True if the claim is a secure claim.</summary>
        [Newtonsoft.Json.JsonProperty("Secure", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Secure { get; set; } = false;
    
        /// <summary>The address of the insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address InsuredAddress { get; set; }
    
        /// <summary>The loss address (if different than the insured's address).</summary>
        [Newtonsoft.Json.JsonProperty("LossAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address LossAddress { get; set; }
    
        /// <summary>If true, the insured will be added as a guest user to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("AddInsuredAsParticipant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AddInsuredAsParticipant { get; set; } = false;
    
        /// <summary>The initial loss report (multiline).</summary>
        [Newtonsoft.Json.JsonProperty("InitialLossReport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InitialLossReport { get; set; }
    
        /// <summary>The cause of the loss (multiline).</summary>
        [Newtonsoft.Json.JsonProperty("Cause", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cause { get; set; }
    
        /// <summary>The damages description (multiline).</summary>
        [Newtonsoft.Json.JsonProperty("Damages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Damages { get; set; }
    
        /// <summary>The general comments (multiline).</summary>
        [Newtonsoft.Json.JsonProperty("GeneralComments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GeneralComments { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OverallRiskCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ClaimOverallRiskCondition? OverallRiskCondition { get; set; }
    
        /// <summary>The tax information.
        /// 
        /// If no ClaimTaxInfo is specified, Symbility will use the company's Claim Defaults for the tax info.</summary>
        [Newtonsoft.Json.JsonProperty("TaxInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClaimTaxInfo TaxInfo { get; set; }
    
        /// <summary>The overhead and profit information.
        /// 
        /// If no ClaimOverheadAndProfitInfo is specified, Symbility will use the company's Claim Defaults for the O&amp;P info.</summary>
        [Newtonsoft.Json.JsonProperty("OverheadAndProfitInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClaimOverheadAndProfitInfo OverheadAndProfitInfo { get; set; }
    
        /// <summary>The overhead and profit information for contents.
        /// 
        /// If no ClaimOverheadAndProfitInfo is specified, Symbility will use the company's Claim Defaults for the O&amp;P info.</summary>
        [Newtonsoft.Json.JsonProperty("ContentsOverheadAndProfitInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClaimOverheadAndProfitInfo ContentsOverheadAndProfitInfo { get; set; }
    
        /// <summary>The minimum charge adjustments information.
        /// 
        /// If no ClaimMinimumCharge is specified, Symbility will use the company's Claim Defaults for the minimum charge info.</summary>
        [Newtonsoft.Json.JsonProperty("MinimumCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClaimMinimumCharge MinimumCharge { get; set; }
    
        /// <summary>The policy number.</summary>
        [Newtonsoft.Json.JsonProperty("PolicyNumber", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string PolicyNumber { get; set; }
    
        /// <summary>The policy type.
        /// 
        /// If the specified policy type is not listed on Claims Connect, a new policy type will be created on Claims Connect for
        /// that company.</summary>
        [Newtonsoft.Json.JsonProperty("PolicyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string PolicyType { get; set; }
    
        /// <summary>The number of times the policy was renewed.</summary>
        [Newtonsoft.Json.JsonProperty("PolicyTimesRenewed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PolicyTimesRenewed { get; set; } = 0;
    
        /// <summary>True if without prejudice.
        /// 
        /// This field is deprecated in version 1.2 (and above) of the API.</summary>
        [Newtonsoft.Json.JsonProperty("WithoutPrejudice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool WithoutPrejudice { get; set; } = false;
    
        /// <summary>The coverages for the claim.</summary>
        [Newtonsoft.Json.JsonProperty("Coverages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ClaimCoverage> Coverages { get; set; }
    
        /// <summary>This type represents the type of deductible that the Symbility API supports.
        /// 
        /// **None**: No deductible type.
        /// 
        /// **Fixed**: The deductible will be set to a fixed type.
        /// 
        /// **Variable**: The deductible will be set to a variable type.</summary>
        [Newtonsoft.Json.JsonProperty("DeductibleType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeductibleType DeductibleType { get; set; }
    
        /// <summary>If true, the coverage will be excluded from estimates where the total amount is less than the minimum deductible.</summary>
        [Newtonsoft.Json.JsonProperty("ExcludeCoverageIfLessThanMinimumDeductible", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ExcludeCoverageIfLessThanMinimumDeductible { get; set; } = false;
    
        /// <summary>The policy start date.</summary>
        [Newtonsoft.Json.JsonProperty("PolicyStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PolicyStartDate { get; set; }
    
        /// <summary>The policy end date.</summary>
        [Newtonsoft.Json.JsonProperty("PolicyEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PolicyEndDate { get; set; }
    
        /// <summary>The flat deductible (currency).</summary>
        [Newtonsoft.Json.JsonProperty("FlatDeductible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? FlatDeductible { get; set; }
    
        /// <summary>The minimum amount of the deductible for the claim.</summary>
        [Newtonsoft.Json.JsonProperty("DeductibleMinimumAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? DeductibleMinimumAmount { get; set; }
    
        /// <summary>The maximum rate of the deductible for the claim.</summary>
        [Newtonsoft.Json.JsonProperty("DeductibleMaximumRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? DeductibleMaximumRate { get; set; }
    
        /// <summary>The values for the company's custom fields.
        /// 
        /// If values aren't specified for some custom fields, the default value for the custom field will be used.</summary>
        [Newtonsoft.Json.JsonProperty("CustomFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomField> CustomFields { get; set; }
    
        /// <summary>The company that created the claim.
        /// 
        /// If no CompanyIDSpecification is specified, Symbility will use the company making the web service call as the originator
        /// of the claim.
        /// 
        /// Note that the originator of the claim can be either the company making the web service call or one of its branches.</summary>
        [Newtonsoft.Json.JsonProperty("Originator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompanyIDSpecification Originator { get; set; }
    
        /// <summary>The users from the originator company that are participating in the claim.</summary>
        [Newtonsoft.Json.JsonProperty("OriginatorParticipantUsers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserIDSpecification> OriginatorParticipantUsers { get; set; }
    
        /// <summary>The companies that are assigned as peers to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("Peers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CompanyIDSpecification> Peers { get; set; }
    
        /// <summary>The assignments of the claim.</summary>
        [Newtonsoft.Json.JsonProperty("Assignments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ClaimAssignmentSpecification> Assignments { get; set; }
    
        /// <summary>The question answers of the claim.</summary>
        [Newtonsoft.Json.JsonProperty("QuestionAnswers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QuestionAnswer> QuestionAnswers { get; set; }
    
        /// <summary>This type represents additional fields for the German market when using the Symbility API.
        /// 
        /// This type is only available for Germany.</summary>
        [Newtonsoft.Json.JsonProperty("GermanyAdditionalFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GermanyAdditionalFields GermanyAdditionalFields { get; set; }
    
        /// <summary>A string value that can be used for claim lookup when ClaimTypeID = ExternalReference in ClaimIDSpecification.</summary>
        [Newtonsoft.Json.JsonProperty("ExternalReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ExternalReference { get; set; }
    
    
    }
    
    /// <summary>This type represents the claim structure needed to update a claim using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ClaimUpdateSpecification 
    {
        /// <summary>The claim number.</summary>
        [Newtonsoft.Json.JsonProperty("Number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Number { get; set; }
    
        /// <summary>The date and time of loss.</summary>
        [Newtonsoft.Json.JsonProperty("LossDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LossDate { get; set; }
    
        /// <summary>The time zone associated with the date and time of loss.
        /// 
        /// The default value is UseApiAccountCompanyTimeZone which assumes that the LossDate is specified in the
        /// time zone of the company associated with the API account.
        /// 
        /// **Special values**: UseApiAccountCompanyTimeZone, Utc</summary>
        [Newtonsoft.Json.JsonProperty("LossDateTimeZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TimeZone? LossDateTimeZone { get; set; }
    
        /// <summary>The type of loss.
        /// 
        /// If the specified type of loss is not listed on Claims Connect, a new type of loss will be created on Claims Connect for
        /// that company.</summary>
        [Newtonsoft.Json.JsonProperty("LossType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string LossType { get; set; }
    
        /// <summary>The catastrophe number.</summary>
        [Newtonsoft.Json.JsonProperty("CatastropheNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string CatastropheNumber { get; set; }
    
        /// <summary>The year the property was built.</summary>
        [Newtonsoft.Json.JsonProperty("BuiltYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BuiltYear { get; set; }
    
        /// <summary>True if the claim is a reinspection.</summary>
        [Newtonsoft.Json.JsonProperty("Reinspection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Reinspection { get; set; }
    
        /// <summary>The company name of the insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string InsuredCompanyName { get; set; }
    
        /// <summary>The title of the insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string InsuredTitle { get; set; }
    
        /// <summary>The first name of the insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredFirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string InsuredFirstName { get; set; }
    
        /// <summary>The last name of the insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredLastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string InsuredLastName { get; set; }
    
        /// <summary>The title of the second insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredTitle2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string InsuredTitle2 { get; set; }
    
        /// <summary>The first name of the second insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredFirstName2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string InsuredFirstName2 { get; set; }
    
        /// <summary>The last name of the second insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredLastName2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string InsuredLastName2 { get; set; }
    
        /// <summary>The home phone of the insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredHomePhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string InsuredHomePhone { get; set; }
    
        /// <summary>The business phone of the insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredBusinessPhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string InsuredBusinessPhone { get; set; }
    
        /// <summary>The mobile phone of the insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredMobilePhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string InsuredMobilePhone { get; set; }
    
        /// <summary>The other phone of the insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredOtherPhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string InsuredOtherPhone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("InsuredOtherPhoneLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PhoneLabel? InsuredOtherPhoneLabel { get; set; }
    
        /// <summary>The email address of the insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string InsuredEmail { get; set; }
    
        /// <summary>The address of the insured.</summary>
        [Newtonsoft.Json.JsonProperty("InsuredAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address InsuredAddress { get; set; }
    
        /// <summary>If true, the insured will be added as a guest user to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("AddInsuredAsParticipant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AddInsuredAsParticipant { get; set; } = false;
    
        /// <summary>True if loss address is different than insured address.</summary>
        [Newtonsoft.Json.JsonProperty("LossDifferentThanInsured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LossDifferentThanInsured { get; set; }
    
        /// <summary>The loss address (if different than the insured's address).</summary>
        [Newtonsoft.Json.JsonProperty("LossAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address LossAddress { get; set; }
    
        /// <summary>The loss contact name (if different than the insured name).</summary>
        [Newtonsoft.Json.JsonProperty("LossContactName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string LossContactName { get; set; }
    
        /// <summary>The loss contact phone number (if different than the insured's phone number).</summary>
        [Newtonsoft.Json.JsonProperty("LossContactPhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string LossContactPhone { get; set; }
    
        /// <summary>The initial loss report (multiline).</summary>
        [Newtonsoft.Json.JsonProperty("InitialLossReport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InitialLossReport { get; set; }
    
        /// <summary>The cause of the loss (multiline).</summary>
        [Newtonsoft.Json.JsonProperty("Cause", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cause { get; set; }
    
        /// <summary>The damages description (multiline).</summary>
        [Newtonsoft.Json.JsonProperty("Damages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Damages { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OverallRiskCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ClaimOverallRiskCondition? OverallRiskCondition { get; set; }
    
        /// <summary>The general comments (multiline).</summary>
        [Newtonsoft.Json.JsonProperty("GeneralComments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GeneralComments { get; set; }
    
        /// <summary>The policy number.</summary>
        [Newtonsoft.Json.JsonProperty("PolicyNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string PolicyNumber { get; set; }
    
        /// <summary>The policy type.
        /// 
        /// If the specified policy type is not listed on Claims Connect, a new policy type will be  created on Claims Connect for
        /// that company.</summary>
        [Newtonsoft.Json.JsonProperty("PolicyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string PolicyType { get; set; }
    
        /// <summary>The policy start date.</summary>
        [Newtonsoft.Json.JsonProperty("PolicyStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PolicyStartDate { get; set; }
    
        /// <summary>The policy end date.</summary>
        [Newtonsoft.Json.JsonProperty("PolicyEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PolicyEndDate { get; set; }
    
        /// <summary>The number of times the policy was renewed.</summary>
        [Newtonsoft.Json.JsonProperty("PolicyTimesRenewed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PolicyTimesRenewed { get; set; }
    
        /// <summary>The values for the company's custom fields.</summary>
        [Newtonsoft.Json.JsonProperty("CustomFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomField> CustomFields { get; set; }
    
        /// <summary>The writing company associated with the claim.</summary>
        [Newtonsoft.Json.JsonProperty("WritingCompanySpecification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WritingCompanySpecification WritingCompanySpecification { get; set; }
    
        /// <summary>The identifier and type of identifier used to find the broker company associated with the claim.</summary>
        [Newtonsoft.Json.JsonProperty("BrokerCompanyIDSpecification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GuestCompanyIDSpecification BrokerCompanyIDSpecification { get; set; }
    
        /// <summary>When a letterhead name is specified here, the logo of that letterhead will always be used when printing the claim.
        /// 
        /// This overrides any letterhead logo selected when printing.</summary>
        [Newtonsoft.Json.JsonProperty("LetterheadLogoOverrideName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string LetterheadLogoOverrideName { get; set; }
    
        /// <summary>The claim's file number (if any), different from the claim number.
        /// 
        /// This property should only be used by vendors.</summary>
        [Newtonsoft.Json.JsonProperty("FileNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string FileNumber { get; set; }
    
        /// <summary>The question answers of the claim.</summary>
        [Newtonsoft.Json.JsonProperty("QuestionAnswers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QuestionAnswer> QuestionAnswers { get; set; }
    
        /// <summary>The additional fields for Germany.</summary>
        [Newtonsoft.Json.JsonProperty("GermanyAdditionalFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GermanyAdditionalFields GermanyAdditionalFields { get; set; }
    
        /// <summary>A string value that can be used for claim lookup when ClaimTypeID = ExternalReference in *ClaimIDSpecification*.</summary>
        [Newtonsoft.Json.JsonProperty("ExternalReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ExternalReference { get; set; }
    
        /// <summary>True if the claim is a secure claim.</summary>
        [Newtonsoft.Json.JsonProperty("Secure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Secure { get; set; }
    
    
    }
    
    /// <summary>This type represents the document options to be used with the Symbility API when retrieving a claim document.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ClaimDocumentSpecification 
    {
        /// <summary>True if the administration page should be included in the document.</summary>
        [Newtonsoft.Json.JsonProperty("IncludeAdministrationPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IncludeAdministrationPage { get; set; } = false;
    
        /// <summary>True if the diagrams should be included in the document.</summary>
        [Newtonsoft.Json.JsonProperty("IncludeDiagrams", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IncludeDiagrams { get; set; } = false;
    
        /// <summary>Only used when IncludeDiagrams is true.
        /// 
        /// If the array is empty, all diagrams are included; if not, only the specified IDs are included.</summary>
        [Newtonsoft.Json.JsonProperty("DiagramIDs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> DiagramIDs { get; set; }
    
        /// <summary>True if the estimates should be included in the document.</summary>
        [Newtonsoft.Json.JsonProperty("IncludeEstimates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IncludeEstimates { get; set; } = false;
    
        /// <summary>Only used when IncludeEstimates is true.
        /// 
        /// If the array is empty, all estimates are included; if not, only the specified IDs are included.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateIDs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> EstimateIDs { get; set; }
    
        /// <summary>True if the accessible handwritten notes should be included in the document.</summary>
        [Newtonsoft.Json.JsonProperty("IncludeHandwrittenNotes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IncludeHandwrittenNotes { get; set; } = false;
    
        /// <summary>Only used when IncludeHandwrittenNotes is true.
        /// 
        /// If the array is empty, all handwritten notes are included; if not, only the specified IDs are included.</summary>
        [Newtonsoft.Json.JsonProperty("HandwrittenNoteIDs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> HandwrittenNoteIDs { get; set; }
    
        /// <summary>True if the photos should be included in the document.</summary>
        [Newtonsoft.Json.JsonProperty("IncludePhotos", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IncludePhotos { get; set; } = false;
    
        /// <summary>Only used when IncludePhotos is true.
        /// 
        /// If the array is empty, all photo pages are included; if not, only the specified IDs are included.</summary>
        [Newtonsoft.Json.JsonProperty("PhotoPageIDs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> PhotoPageIDs { get; set; }
    
        /// <summary>True if the forms should be included in the document.</summary>
        [Newtonsoft.Json.JsonProperty("IncludeForms", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IncludeForms { get; set; } = false;
    
        /// <summary>Only used when IncludeForms is true.
        /// 
        /// If the array is empty, all forms are included; if not, only the specified IDs are included.</summary>
        [Newtonsoft.Json.JsonProperty("FormIDs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> FormIDs { get; set; }
    
        /// <summary>True if the journal entries should be included in the document.</summary>
        [Newtonsoft.Json.JsonProperty("IncludeJournalEntries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IncludeJournalEntries { get; set; } = false;
    
        /// <summary>True if the payment summary of the claim should be included in the document.</summary>
        [Newtonsoft.Json.JsonProperty("IncludePaymentSummary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IncludePaymentSummary { get; set; } = false;
    
        /// <summary>True if the payments of the claim should be included in the document.</summary>
        [Newtonsoft.Json.JsonProperty("IncludePayments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IncludePayments { get; set; } = false;
    
        /// <summary>Only used when IncludePayments is true.
        /// 
        /// If the array is empty, all payments are included; if not, only the specified IDs are included.</summary>
        [Newtonsoft.Json.JsonProperty("PaymentIDs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> PaymentIDs { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetClaimDocumentV2Specification 
    {
        /// <summary>This type represents the document options to be used with the Symbility API when retrieving a claim document.</summary>
        [Newtonsoft.Json.JsonProperty("ClaimDocumentSpecification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClaimDocumentSpecification ClaimDocumentSpecification { get; set; }
    
        /// <summary>The name of the print profile to use for formatting the claim document.</summary>
        [Newtonsoft.Json.JsonProperty("PrintProfileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrintProfileName { get; set; }
    
    
    }
    
    /// <summary>This type represents the diagram structure needed to create a diagram using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CustomDiagramSpecification 
    {
        /// <summary>The temporary identifier of the diagram.  It is used to link an EstimateItemSpecification or an EstimateItemUpdateSpecification.  This identifier will not be retained by Claims Connect and the new diagram will be attributed a unique DiagramID.</summary>
        [Newtonsoft.Json.JsonProperty("CustomDiagramID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CustomDiagramID { get; set; }
    
        /// <summary>The name of the diagram.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Name { get; set; }
    
        /// <summary>The type of the diagram.</summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiagramType Type { get; set; }
    
    
    }
    
    /// <summary>This type represents the estimate item note structure needed to create an estimate item note using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class EstimateItemNoteSpecification 
    {
        /// <summary>The note.</summary>
        [Newtonsoft.Json.JsonProperty("Note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note { get; set; }
    
    
    }
    
    /// <summary>This type represents the external estimate item structure needed to create an external estimate item using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ExternalEstimateItemSpecification 
    {
        /// <summary>The materials component of the total amount.</summary>
        [Newtonsoft.Json.JsonProperty("Materials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Materials { get; set; }
    
        /// <summary>The labor component of the total amount.</summary>
        [Newtonsoft.Json.JsonProperty("Labor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Labor { get; set; }
    
        /// <summary>The equipment component of the total amount.</summary>
        [Newtonsoft.Json.JsonProperty("Equipment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Equipment { get; set; }
    
        /// <summary>The market conditions component of the total amount.</summary>
        [Newtonsoft.Json.JsonProperty("MarketConditions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal MarketConditions { get; set; }
    
        /// <summary>The total tax 1 applied to the estimate item.</summary>
        [Newtonsoft.Json.JsonProperty("TotalTax1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalTax1 { get; set; }
    
        /// <summary>The total tax 2 applied to the estimate item.</summary>
        [Newtonsoft.Json.JsonProperty("TotalTax2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalTax2 { get; set; }
    
        /// <summary>The total tax 3 applied to the estimate item.</summary>
        [Newtonsoft.Json.JsonProperty("TotalTax3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalTax3 { get; set; }
    
        /// <summary>The total tax 4 applied to the estimate item.</summary>
        [Newtonsoft.Json.JsonProperty("TotalTax4", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalTax4 { get; set; }
    
        /// <summary>The total overhead applied to the estimate item.</summary>
        [Newtonsoft.Json.JsonProperty("TotalOverhead", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalOverhead { get; set; }
    
        /// <summary>The total profit applied to the estimate item.</summary>
        [Newtonsoft.Json.JsonProperty("TotalProfit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalProfit { get; set; }
    
        /// <summary>The total tax 1 applied to the estimate item's actual cash value.</summary>
        [Newtonsoft.Json.JsonProperty("TotalTax1ActualCashValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalTax1ActualCashValue { get; set; }
    
        /// <summary>The total tax 2 applied to the estimate item's actual cash value.</summary>
        [Newtonsoft.Json.JsonProperty("TotalTax2ActualCashValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalTax2ActualCashValue { get; set; }
    
        /// <summary>The total tax 3 applied to the estimate item's actual cash value.</summary>
        [Newtonsoft.Json.JsonProperty("TotalTax3ActualCashValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalTax3ActualCashValue { get; set; }
    
        /// <summary>The total tax 4 applied to the estimate item's actual cash value.</summary>
        [Newtonsoft.Json.JsonProperty("TotalTax4ActualCashValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalTax4ActualCashValue { get; set; }
    
        /// <summary>The total overhead applied to the estimate item's actual cash value.</summary>
        [Newtonsoft.Json.JsonProperty("TotalOverheadActualCashValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalOverheadActualCashValue { get; set; }
    
        /// <summary>The total profit applied to the estimate item's actual cash value.</summary>
        [Newtonsoft.Json.JsonProperty("TotalProfitActualCashValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalProfitActualCashValue { get; set; }
    
        /// <summary>The calculated depreciation value of the estimate item.</summary>
        [Newtonsoft.Json.JsonProperty("TotalDepreciation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalDepreciation { get; set; }
    
        /// <summary>The materials quantity of the estimate item.</summary>
        [Newtonsoft.Json.JsonProperty("MaterialsQuantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal MaterialsQuantity { get; set; }
    
        /// <summary>The total amount of the estimate item.</summary>
        [Newtonsoft.Json.JsonProperty("Total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Total { get; set; }
    
    
    }
    
    /// <summary>This type represents the estimate item structure needed to create an estimate item using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class EstimateItemSpecification 
    {
        /// <summary>A string value that can be used to identify items when they are added using the API.</summary>
        [Newtonsoft.Json.JsonProperty("ExternalReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ExternalReference { get; set; }
    
        /// <summary>The identifier of the diagram object this item is linked to.  If not specified, the API will look at DiagramID or CustomDiagramID or CustomDiagramObjectName.</summary>
        [Newtonsoft.Json.JsonProperty("DiagramObjectID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DiagramObjectID { get; set; }
    
        /// <summary>The identifier of the diagram this item is linked to (this will link the item to all objects in the diagram).  This parameter is ignored if DiagramObjectID has already been specified.</summary>
        [Newtonsoft.Json.JsonProperty("DiagramID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DiagramID { get; set; }
    
        /// <summary>The identifier of the custom diagram this item is linked to.  This parameter is ignored if DiagramObjectID or DiagramID have already been specified.</summary>
        [Newtonsoft.Json.JsonProperty("CustomDiagramID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CustomDiagramID { get; set; }
    
        /// <summary>The name of the diagram object this item is linked to.  This parameter is ignored if DiagramObjectID or DiagramID have already been specified.</summary>
        [Newtonsoft.Json.JsonProperty("CustomDiagramObjectName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string CustomDiagramObjectName { get; set; }
    
        /// <summary>The type of line of the estimate item.  When Title or Text are used, only the ItemDescription will be used in the properties that follow.</summary>
        [Newtonsoft.Json.JsonProperty("LineType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EstimateItemLineType LineType { get; set; }
    
        /// <summary>The pricing database code of the item action.  The API will use that code to lookup the item action in the pricing database.  If a GradeCode has been provided, the ActionCode is ignored and the GradeCode is used instead.  If no ActionCode and GradeCode have been specified, the API will use a generic item.</summary>
        [Newtonsoft.Json.JsonProperty("ActionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string ActionCode { get; set; }
    
        /// <summary>The pricing database code of the item grade.  The API will use that code to lookup the item grade in the pricing database.  If no ActionCode and GradeCode have been specified, the API will use a generic item.</summary>
        [Newtonsoft.Json.JsonProperty("GradeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string GradeCode { get; set; }
    
        /// <summary>The description of the item.  If not specified, the default description will be used.</summary>
        [Newtonsoft.Json.JsonProperty("ItemDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemDescription { get; set; }
    
        /// <summary>The name of the action.  If not specified, the default name will be used.</summary>
        [Newtonsoft.Json.JsonProperty("ActionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string ActionName { get; set; }
    
        /// <summary>The description of the grade.  If not specified, the default grade will be used.</summary>
        [Newtonsoft.Json.JsonProperty("GradeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string GradeDescription { get; set; }
    
        /// <summary>The unit of measure of the estimate item.  This property will only be used when ActionCode and GradeCode have not been specified.</summary>
        [Newtonsoft.Json.JsonProperty("UnitOfMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ItemUnitOfMeasure? UnitOfMeasure { get; set; }
    
        /// <summary>The identifier of the claim coverage.  If set to null, the estimate item will use the default coverage.  If set to 0, the estimate item will not be linked to a coverage.  If a ClaimSubcoverageID has been specified, the ClaimCoverageID is ignored.</summary>
        [Newtonsoft.Json.JsonProperty("ClaimCoverageID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ClaimCoverageID { get; set; }
    
        /// <summary>The identifier of the claim subcoverage.</summary>
        [Newtonsoft.Json.JsonProperty("ClaimSubcoverageID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ClaimSubcoverageID { get; set; }
    
        /// <summary>True if the estimate item is provisional.  If not specified, false will be used.</summary>
        [Newtonsoft.Json.JsonProperty("Provisional", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Provisional { get; set; }
    
        /// <summary>True if the item should include subtractions in its quantity.  If not specified, the default include subtractions value will be used.</summary>
        [Newtonsoft.Json.JsonProperty("IncludeSubtractions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeSubtractions { get; set; }
    
        /// <summary>The included waste percentage.  If not specified, the default waste will be used.</summary>
        [Newtonsoft.Json.JsonProperty("Waste", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Waste { get; set; }
    
        /// <summary>The materials component of the unit price.  If not specified, the default materials price will be used.</summary>
        [Newtonsoft.Json.JsonProperty("UnitMaterials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? UnitMaterials { get; set; }
    
        /// <summary>The labor component of the unit price.  If not specified, the default labor price will be used.</summary>
        [Newtonsoft.Json.JsonProperty("UnitLabor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? UnitLabor { get; set; }
    
        /// <summary>The unit labor time in hours.  If not specified, the default hours will be used.</summary>
        [Newtonsoft.Json.JsonProperty("UnitHours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? UnitHours { get; set; }
    
        /// <summary>The equipment component of the unit price.  If not specified, the default equipment price will be used.</summary>
        [Newtonsoft.Json.JsonProperty("UnitEquipment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? UnitEquipment { get; set; }
    
        /// <summary>The market conditions component of the unit price.  If not specified, the default marked conditions price will be used.</summary>
        [Newtonsoft.Json.JsonProperty("UnitMarketConditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? UnitMarketConditions { get; set; }
    
        /// <summary>True if Tax1 is applied to the estimate item.  If not specified, the default Tax1 applicability will be used.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ApplyTax1 { get; set; }
    
        /// <summary>True if Tax2 is applied to the estimate item.  If not specified, the default Tax2 applicability will be used.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ApplyTax2 { get; set; }
    
        /// <summary>True if Tax3 is applied to the estimate item.  If not specified, the default Tax3 applicability will be used.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ApplyTax3 { get; set; }
    
        /// <summary>True if Tax4 is applied to the estimate item.  If not specified, the default Tax4 applicability will be used.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ApplyTax4 { get; set; }
    
        /// <summary>True if the overhead and profit to the estimate item.  If not specified, the default overhead and profit applicability will be used.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyOverheadAndProfit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ApplyOverheadAndProfit { get; set; }
    
        /// <summary>The depreciation of the estimate item.  If not specified, the item is not depreciated.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateItemDepreciation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EstimateItemDepreciation EstimateItemDepreciation { get; set; }
    
        /// <summary>The links of the item.  If not specified, the default links will be used.</summary>
        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ItemLink Links { get; set; }
    
        /// <summary>The links of the item.  If not specified, the default links will be used.</summary>
        [Newtonsoft.Json.JsonProperty("Links2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ItemLink2 Links2 { get; set; }
    
        /// <summary>True if this estimate item is a credit.  If not specified, the default is false.</summary>
        [Newtonsoft.Json.JsonProperty("Credit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Credit { get; set; }
    
        /// <summary>The quantity of the estimate item including waste and adjustments.  If not specified and the item has links, the quantity will automatically be calculated.  If not specified and the item doesn't have links, the quantity will be set to 1.</summary>
        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Quantity { get; set; }
    
        /// <summary>The contents properties of the estimate item.  Only used if the estimate is a contents estimate.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateItemContents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EstimateItemContents EstimateItemContents { get; set; }
    
        /// <summary>Notes attached to the estimate item.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateItemNoteSpecifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EstimateItemNoteSpecification> EstimateItemNoteSpecifications { get; set; }
    
        /// <summary>The additional estimate item information for external estimates.  This is ignored for standard estimates.  If not specified for external estimates, all ExternalEstimateItemSpecification values are set to 0.</summary>
        [Newtonsoft.Json.JsonProperty("ExternalEstimateItemSpecification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExternalEstimateItemSpecification ExternalEstimateItemSpecification { get; set; }
    
    
    }
    
    /// <summary>This type represents the external estimate structure needed to create an external estimate using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ExternalEstimateSpecification 
    {
        /// <summary>The total materials amount of the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("TotalMaterials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalMaterials { get; set; }
    
        /// <summary>The total labor amount of the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("TotalLabor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalLabor { get; set; }
    
        /// <summary>The total equipment amount of the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("TotalEquipment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalEquipment { get; set; }
    
        /// <summary>The total market conditions amount of the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("TotalMarketConditions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalMarketConditions { get; set; }
    
        /// <summary>The sub total of the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("SubTotal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal SubTotal { get; set; }
    
        /// <summary>The total Tax1 amount of the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("TotalTax1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalTax1 { get; set; }
    
        /// <summary>The total Tax2 amount of the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("TotalTax2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalTax2 { get; set; }
    
        /// <summary>The total Tax3 amount of the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("TotalTax3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalTax3 { get; set; }
    
        /// <summary>The total Tax4 amount of the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("TotalTax4", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalTax4 { get; set; }
    
        /// <summary>The total overhead amount of the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("TotalOverhead", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalOverhead { get; set; }
    
        /// <summary>The total profit amount of the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("TotalProfit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalProfit { get; set; }
    
        /// <summary>The salvage allowance amount (before taxes).</summary>
        [Newtonsoft.Json.JsonProperty("SalvageAllowanceBeforeTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal SalvageAllowanceBeforeTaxes { get; set; }
    
        /// <summary>The salvage allowance amount (after taxes).</summary>
        [Newtonsoft.Json.JsonProperty("SalvageAllowanceAfterTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal SalvageAllowanceAfterTaxes { get; set; }
    
        /// <summary>The salvage recovery amount.</summary>
        [Newtonsoft.Json.JsonProperty("SalvageRecovery", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal SalvageRecovery { get; set; }
    
        /// <summary>The discount amount (before taxes).</summary>
        [Newtonsoft.Json.JsonProperty("DiscountBeforeTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal DiscountBeforeTaxes { get; set; }
    
        /// <summary>The discount label (before taxes).</summary>
        [Newtonsoft.Json.JsonProperty("DiscountBeforeTaxesName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string DiscountBeforeTaxesName { get; set; }
    
        /// <summary>The discount amount (after taxes).</summary>
        [Newtonsoft.Json.JsonProperty("DiscountAfterTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal DiscountAfterTaxes { get; set; }
    
        /// <summary>The discount label (after taxes).</summary>
        [Newtonsoft.Json.JsonProperty("DiscountAfterTaxesName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string DiscountAfterTaxesName { get; set; }
    
        /// <summary>The total of the estimate before discount and deductible.</summary>
        [Newtonsoft.Json.JsonProperty("ReplacementCost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal ReplacementCost { get; set; }
    
        /// <summary>The total recoverable depreciation amount of the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("TotalRecoverableDepreciation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalRecoverableDepreciation { get; set; }
    
        /// <summary>The net recoverable depreciation amount of the estimate after limits and deductible.</summary>
        [Newtonsoft.Json.JsonProperty("NetRecoverableDepreciation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal NetRecoverableDepreciation { get; set; }
    
        /// <summary>The total non-recoverable depreciation amount of the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("TotalNonRecoverableDepreciation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalNonRecoverableDepreciation { get; set; }
    
        /// <summary>The deductible amount.</summary>
        [Newtonsoft.Json.JsonProperty("Deductible", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Deductible { get; set; }
    
        /// <summary>The estimate grand total (total cost).</summary>
        [Newtonsoft.Json.JsonProperty("AmountPayableReplacementCost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal AmountPayableReplacementCost { get; set; }
    
        /// <summary>The actual cash value of the deductible of the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("DeductibleActualCashValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal DeductibleActualCashValue { get; set; }
    
        /// <summary>Net estimate grand total (after depreciation).</summary>
        [Newtonsoft.Json.JsonProperty("AmountPayableActualCashValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal AmountPayableActualCashValue { get; set; }
    
        /// <summary>The additional deductible that will be applied if the depreciation is recovered on the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("AdditionalDeductibleIfDepreciationRecovered", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal AdditionalDeductibleIfDepreciationRecovered { get; set; }
    
        /// <summary>Net estimate if depreciation is recovered.</summary>
        [Newtonsoft.Json.JsonProperty("AmountPayableIfDepreciationRecovered", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal AmountPayableIfDepreciationRecovered { get; set; }
    
        /// <summary>The coverages used in the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateCoverages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EstimateCoverage> EstimateCoverages { get; set; }
    
    
    }
    
    /// <summary>This type represents the estimate structure needed to create an estimate using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class EstimateSpecification 
    {
        /// <summary>If true, the estimate is an external estimate which means all calculations are assumed by the external system and the estimate totals need to be provided.  If false, the estimate is a standard estimate.</summary>
        [Newtonsoft.Json.JsonProperty("External", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool External { get; set; }
    
        /// <summary>The name of the estimate.  If not specified, the default name of the estimate type will be used.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Name { get; set; }
    
        /// <summary>The type of the estimate.  This field is mandatory.</summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Type { get; set; }
    
        /// <summary>The default coverage to use for the estimate.  If not specified, this will first try to fallback on the default coverage setup for the estimate Name/Type combination and if it doesn't exist, this will automatically fallback to the default diagram coverage or the default claim coverage.</summary>
        [Newtonsoft.Json.JsonProperty("DefaultClaimCoverageID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DefaultClaimCoverageID { get; set; }
    
        /// <summary>The minimum charge adjustments information.  If not specified, this will first try to fallback on the minimum charge setup for the estimate Name/Type combination and if it doesn't exist, this will automatically fallback to the claim options.</summary>
        [Newtonsoft.Json.JsonProperty("MinimumCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClaimMinimumCharge MinimumCharge { get; set; }
    
        /// <summary>The tax information.  If not specified, the tax information of the claim will be used.</summary>
        [Newtonsoft.Json.JsonProperty("TaxInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClaimTaxInfo TaxInfo { get; set; }
    
        /// <summary>The overhead and profit information.  If not specified, the overhead and profit information of the claim will be used.</summary>
        [Newtonsoft.Json.JsonProperty("OverheadAndProfitInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClaimOverheadAndProfitInfo OverheadAndProfitInfo { get; set; }
    
        /// <summary>The estimate comments.</summary>
        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comments { get; set; }
    
        /// <summary>The list of items in the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateItemSpecifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EstimateItemSpecification> EstimateItemSpecifications { get; set; }
    
        /// <summary>The additional estimate information for external estimates.  This is ignored for standard estimates.  If not specified for external estimates, all ExternalEstimateSpecification values are set to 0.</summary>
        [Newtonsoft.Json.JsonProperty("ExternalEstimateSpecification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExternalEstimateSpecification ExternalEstimateSpecification { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CreateClaimEstimateSpecification 
    {
        /// <summary>The custom diagrams to create.  This information is not mandatory.</summary>
        [Newtonsoft.Json.JsonProperty("CustomDiagramSpecifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomDiagramSpecification> CustomDiagramSpecifications { get; set; }
    
        /// <summary>The estimate information.  This field is mandatory.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateSpecification", Required = Newtonsoft.Json.Required.AllowNull)]
        public EstimateSpecification EstimateSpecification { get; set; }
    
    
    }
    
    /// <summary>This type represents the details of adding a estimate with diagrams when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CreateClaimEstimate 
    {
        /// <summary>The diagrams attached to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("Diagrams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Diagram> Diagrams { get; set; }
    
        /// <summary>The estimates attached to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("Estimate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Estimate Estimate { get; set; }
    
    
    }
    
    /// <summary>This type represents the diagram information needed to import a diagram using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DiagramImportSpecification 
    {
        /// <summary>The name of the diagram.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Name { get; set; }
    
        /// <summary>The XML data of the diagram.
        /// 
        /// The XML needs to follow the Symbility specifications.</summary>
        [Newtonsoft.Json.JsonProperty("Bytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bytes { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AddDiagamImportSpecification 
    {
        /// <summary>The identifier of the assignment to which to add the diagram to.</summary>
        [Newtonsoft.Json.JsonProperty("AssignmentID", Required = Newtonsoft.Json.Required.Always)]
        public int AssignmentID { get; set; }
    
        /// <summary>This type represents the diagram information needed to import a diagram using the Symbility API.</summary>
        [Newtonsoft.Json.JsonProperty("DiagramImportSpecification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DiagramImportSpecification DiagramImportSpecification { get; set; }
    
    
    }
    
    /// <summary>This type represents the estimate item note structure needed to update an estimate item note using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class EstimateItemNoteUpdateSpecification 
    {
        /// <summary>The identifier of the estimate item note.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateItemNoteID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimateItemNoteID { get; set; }
    
        /// <summary>The note.</summary>
        [Newtonsoft.Json.JsonProperty("Note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note { get; set; }
    
    
    }
    
    /// <summary>This type represents the estimate item structure needed to update an estimate item using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class EstimateItemUpdateSpecification 
    {
        /// <summary>The identifier of the estimate item in the claim.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateItemID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimateItemID { get; set; }
    
        /// <summary>The description of the item.  If not specified, the property is not updated.</summary>
        [Newtonsoft.Json.JsonProperty("ItemDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string ItemDescription { get; set; }
    
        /// <summary>The name of the action.  If not specified, the property is not updated.</summary>
        [Newtonsoft.Json.JsonProperty("ActionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string ActionName { get; set; }
    
        /// <summary>The description of the grade.  If not specified, the property is not updated.</summary>
        [Newtonsoft.Json.JsonProperty("GradeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string GradeDescription { get; set; }
    
        /// <summary>The identifier of the claim coverage.  If set to null, the property is not updated.  If set to 0, the estimate item will be updated to not be linked to a coverage.  If a ClaimSubcoverageID has been specified and is not 0, the ClaimCoverageID is ignored.</summary>
        [Newtonsoft.Json.JsonProperty("ClaimCoverageID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ClaimCoverageID { get; set; }
    
        /// <summary>The identifier of the claim subcoverage.  If set to null, the property is not updated.  If set to 0, the estimate item will be updated to not be linked to a subcoverage.</summary>
        [Newtonsoft.Json.JsonProperty("ClaimSubcoverageID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ClaimSubcoverageID { get; set; }
    
        /// <summary>True if the estimate item is provisional.  If not specified, the property is not updated.</summary>
        [Newtonsoft.Json.JsonProperty("Provisional", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Provisional { get; set; }
    
        /// <summary>True if the item should include subtractions in its quantity.  If not specified, the property is not updated.</summary>
        [Newtonsoft.Json.JsonProperty("IncludeSubtractions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeSubtractions { get; set; }
    
        /// <summary>The included waste percentage.  If not specified, the property is not updated.</summary>
        [Newtonsoft.Json.JsonProperty("Waste", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Waste { get; set; }
    
        /// <summary>The materials component of the unit price.  If not specified, the property is not updated.</summary>
        [Newtonsoft.Json.JsonProperty("UnitMaterials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? UnitMaterials { get; set; }
    
        /// <summary>The labor component of the unit price.  If not specified, the property is not updated.</summary>
        [Newtonsoft.Json.JsonProperty("UnitLabor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? UnitLabor { get; set; }
    
        /// <summary>The unit labor time in hours.  If not specified, the property is not updated.</summary>
        [Newtonsoft.Json.JsonProperty("UnitHours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? UnitHours { get; set; }
    
        /// <summary>The equipment component of the unit price.  If not specified, the property is not updated.</summary>
        [Newtonsoft.Json.JsonProperty("UnitEquipment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? UnitEquipment { get; set; }
    
        /// <summary>The market conditions component of the unit price.  If not specified, the property is not updated.</summary>
        [Newtonsoft.Json.JsonProperty("UnitMarketConditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? UnitMarketConditions { get; set; }
    
        /// <summary>True if Tax1 is applied to the estimate item.  If not specified, the property is not updated.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ApplyTax1 { get; set; }
    
        /// <summary>True if Tax2 is applied to the estimate item.  If not specified, the property is not updated.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ApplyTax2 { get; set; }
    
        /// <summary>True if Tax3 is applied to the estimate item.  If not specified, the property is not updated.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ApplyTax3 { get; set; }
    
        /// <summary>True if Tax4 is applied to the estimate item.  If not specified, the property is not updated.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyTax4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ApplyTax4 { get; set; }
    
        /// <summary>True if the overhead and profit to the estimate item.  If not specified, the property is not updated.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyOverheadAndProfit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ApplyOverheadAndProfit { get; set; }
    
        /// <summary>The depreciation of the estimate item.  If not specified, the property is not updated.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateItemDepreciation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EstimateItemDepreciation EstimateItemDepreciation { get; set; }
    
        /// <summary>The links of the item.  If not specified, the property is not updated.</summary>
        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ItemLink Links { get; set; }
    
        /// <summary>The links of the item.  If not specified, the property is not updated.</summary>
        [Newtonsoft.Json.JsonProperty("Links2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ItemLink2 Links2 { get; set; }
    
        /// <summary>True if this estimate item is a credit.  If not specified, the property is not updated.</summary>
        [Newtonsoft.Json.JsonProperty("Credit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Credit { get; set; }
    
        /// <summary>The quantity of the estimate item including waste and adjustments.  If not specified, the property is not updated.</summary>
        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Quantity { get; set; }
    
        /// <summary>The contents properties of the estimate item.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateItemContents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EstimateItemContents EstimateItemContents { get; set; }
    
        /// <summary>Notes to add to the estimate item.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateItemNoteSpecifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EstimateItemNoteSpecification> EstimateItemNoteSpecifications { get; set; }
    
        /// <summary>Notes to update in the estimate item.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateItemNoteUpdateSpecifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EstimateItemNoteUpdateSpecification> EstimateItemNoteUpdateSpecifications { get; set; }
    
        /// <summary>Notes to delete from the estimate item.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateItemNoteIDsToDelete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> EstimateItemNoteIDsToDelete { get; set; }
    
        /// <summary>The additional estimate item information for external estimates.  This is ignored for standard estimates.  If not specified, the properties are not updated.</summary>
        [Newtonsoft.Json.JsonProperty("ExternalEstimateItemSpecification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExternalEstimateItemSpecification ExternalEstimateItemSpecification { get; set; }
    
    
    }
    
    /// <summary>This type represents the estimate structure needed to update an estimate using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class EstimateUpdateSpecification 
    {
        /// <summary>The name of the estimate.  If not specified, the property is not updated.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Name { get; set; }
    
        /// <summary>The default coverage to use for the estimate.  If set to null, the property is not updated.  If set to 0, the estimate will not be linked to a default coverage.</summary>
        [Newtonsoft.Json.JsonProperty("DefaultClaimCoverageID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DefaultClaimCoverageID { get; set; }
    
        /// <summary>The minimum charge adjustments information.  If not specified, the property is not updated.</summary>
        [Newtonsoft.Json.JsonProperty("MinimumCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClaimMinimumCharge MinimumCharge { get; set; }
    
        /// <summary>The tax information.  If not specified, the property is not updated.</summary>
        [Newtonsoft.Json.JsonProperty("TaxInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClaimTaxInfo TaxInfo { get; set; }
    
        /// <summary>The overhead and profit information.  If not specified, the property is not updated.</summary>
        [Newtonsoft.Json.JsonProperty("OverheadAndProfitInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClaimOverheadAndProfitInfo OverheadAndProfitInfo { get; set; }
    
        /// <summary>The estimate comments.  If not specified, the property is not updated.</summary>
        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comments { get; set; }
    
        /// <summary>The list of items to add to the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateItemSpecifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EstimateItemSpecification> EstimateItemSpecifications { get; set; }
    
        /// <summary>The list of items to update in the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateItemUpdateSpecifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EstimateItemUpdateSpecification> EstimateItemUpdateSpecifications { get; set; }
    
        /// <summary>The list of items to delete from the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateItemIDsToDelete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> EstimateItemIDsToDelete { get; set; }
    
        /// <summary>The additional estimate information for external estimates.  This is ignored for standard estimates.  If not specified, the properties are not updated.</summary>
        [Newtonsoft.Json.JsonProperty("ExternalEstimateSpecification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExternalEstimateSpecification ExternalEstimateSpecification { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UpdateClaimEstimateSpecification 
    {
        /// <summary>The custom diagrams to create.  This information is not mandatory.</summary>
        [Newtonsoft.Json.JsonProperty("CustomDiagramSpecifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomDiagramSpecification> CustomDiagramSpecifications { get; set; }
    
        /// <summary>The update estimate information.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateUpdateSpecification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EstimateUpdateSpecification EstimateUpdateSpecification { get; set; }
    
    
    }
    
    /// <summary>This type represents the details of updating a estimate with diagrams when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UpdateClaimEstimate 
    {
        /// <summary>The diagrams attached to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("Diagrams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Diagram> Diagrams { get; set; }
    
        /// <summary>The estimates attached to the claim.</summary>
        [Newtonsoft.Json.JsonProperty("Estimate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Estimate Estimate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SetEstimateFinalizationSpecification 
    {
        /// <summary>This type represents the available status of the estimate finalization in the Symbility API.
        /// 
        /// **None**: The estimate has not been finalized yet.
        /// 
        /// **CashSettled**: The estimate was settled by cash.
        /// 
        /// **Invoiced**: The estimate was invoiced.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("EstimateFinalizationStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EstimateFinalizationStatus EstimateFinalizationStatus { get; set; }
    
        /// <summary>The finalization reference number to set for the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("ReferenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ReferenceNumber { get; set; }
    
        /// <summary>The finalization date to set for the estimate.</summary>
        [Newtonsoft.Json.JsonProperty("Date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Date { get; set; }
    
    
    }
    
    /// <summary>This type represents the external document structure needed to attach an external document using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ExternalDocumentSpecification 
    {
        /// <summary>Complete folder path of the external document starting at the root folder.</summary>
        [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(265)]
        public string Path { get; set; }
    
        /// <summary>Complete file name of the external document.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(265)]
        public string Name { get; set; }
    
        /// <summary>True if the external document should be shared with the originator.</summary>
        [Newtonsoft.Json.JsonProperty("ShareWithOriginator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ShareWithOriginator { get; set; } = false;
    
        /// <summary>True if the external document should be shared with the assignees.</summary>
        [Newtonsoft.Json.JsonProperty("ShareWithAssignees", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ShareWithAssignees { get; set; } = false;
    
        /// <summary>True if the external document should be shared with peers.</summary>
        [Newtonsoft.Json.JsonProperty("ShareWithPeers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ShareWithPeers { get; set; } = false;
    
        /// <summary>True if the external document should be shared with all companies in the claim.</summary>
        [Newtonsoft.Json.JsonProperty("ShareWithAllCompanies", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ShareWithAllCompanies { get; set; } = false;
    
        /// <summary>True if the external document should be shared with the insured.</summary>
        [Newtonsoft.Json.JsonProperty("ShareWithInsured", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ShareWithInsured { get; set; } = false;
    
        /// <summary>The external document actual content.</summary>
        [Newtonsoft.Json.JsonProperty("Bytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bytes { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AddClaimExternalDocumentSpecification 
    {
        /// <summary>The identifier of the assignment to which to add the document to.</summary>
        [Newtonsoft.Json.JsonProperty("AssignmentID", Required = Newtonsoft.Json.Required.Always)]
        public int AssignmentID { get; set; }
    
        /// <summary>This type represents the external document structure needed to attach an external document using the Symbility API.</summary>
        [Newtonsoft.Json.JsonProperty("ExternalDocumentSpecification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExternalDocumentSpecification ExternalDocumentSpecification { get; set; }
    
    
    }
    
    /// <summary>This type represents the photo that the Symbility API supports.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PhotoSpecification 
    {
        /// <summary>The caption of the photo.</summary>
        [Newtonsoft.Json.JsonProperty("Caption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Caption { get; set; }
    
        /// <summary>The bytes of the photo.</summary>
        [Newtonsoft.Json.JsonProperty("Bytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bytes { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AddClaimPhotoSpecification 
    {
        /// <summary>The name of the photo page in which to insert the photos. If the photo page does not exist, it will be created.
        /// An exception will be thrown if this parameter is empty.</summary>
        [Newtonsoft.Json.JsonProperty("PhotoPageName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhotoPageName { get; set; }
    
        /// <summary>The identifier of the assignment to which to add the photo page to.</summary>
        [Newtonsoft.Json.JsonProperty("AssignmentID", Required = Newtonsoft.Json.Required.Always)]
        public int AssignmentID { get; set; }
    
        /// <summary>The identifier of the photos being added.</summary>
        [Newtonsoft.Json.JsonProperty("PhotoSpecification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PhotoSpecification PhotoSpecification { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ClaimQuestionnaireSpecification 
    {
        /// <summary>The code of the questionnaire to add.
        /// 
        /// If the code is already specified in the XML, this property is ignored.</summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Code { get; set; }
    
        /// <summary>The XML prefill answers for the questionnaire.
        /// 
        /// The XML needs to follow the Symbility specifications.
        /// 
        /// If this parameter is left empty or null, no prefill answers are imported in the questionnaire.</summary>
        [Newtonsoft.Json.JsonProperty("Bytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bytes { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AddClaimQuestionnaireSpecification 
    {
        /// <summary>The identifier of the assignment to which to add the questionnaire to.</summary>
        [Newtonsoft.Json.JsonProperty("AssignmentID", Required = Newtonsoft.Json.Required.Always)]
        public int AssignmentID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ClaimQuestionnaireSpecification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClaimQuestionnaireSpecification ClaimQuestionnaireSpecification { get; set; }
    
    
    }
    
    /// <summary>This type represents the task priorities supported by the Symbility API.
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TaskPriority
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Low")]
        Low = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Medium")]
        Medium = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"High")]
        High = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 3,
    
    }
    
    /// <summary>This type represents the task statuses supported by the Symbility API.
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TaskStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InProgress")]
        InProgress = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Completed")]
        Completed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Assigned")]
        Assigned = 5,
    
    }
    
    /// <summary>This type represents the task visibility options supported by the Symbility API.
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TaskVisibility
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Internal")]
        Internal = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"External")]
        External = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Global")]
        Global = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TaskProperties : System.Collections.ObjectModel.Collection<TaskPropertiesFlags>
    {
    
    }
    
    /// <summary>This type represents the structure used to create a task.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TaskSpecification 
    {
        /// <summary>The name of the task.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }
    
        /// <summary>The code of the group for the task.</summary>
        [Newtonsoft.Json.JsonProperty("TaskGroupCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string TaskGroupCode { get; set; }
    
        /// <summary>This type represents the task priorities supported by the Symbility API.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("Priority", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaskPriority Priority { get; set; }
    
        /// <summary>The due date and time (UTC) for the task.</summary>
        [Newtonsoft.Json.JsonProperty("DueDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DueDate { get; set; }
    
        /// <summary>This type represents the task statuses supported by the Symbility API.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaskStatus Status { get; set; }
    
        /// <summary>The successor task template code when the task is completed.</summary>
        [Newtonsoft.Json.JsonProperty("TaskTemplateCompletedCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string TaskTemplateCompletedCode { get; set; }
    
        /// <summary>The successor task template code when the task is cancelled.</summary>
        [Newtonsoft.Json.JsonProperty("TaskTemplateCancelledCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string TaskTemplateCancelledCode { get; set; }
    
        /// <summary>This type represents the task visibility options supported by the Symbility API.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("Visibility", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaskVisibility Visibility { get; set; }
    
        /// <summary>This type represents the task properties supported by the Symbility API. 
        /// This is a bit field, a set of flags, the TaskProperties can be one or more of the following values.
        /// 
        /// **AllowChangesOnlyByMyCompany**: Only the company who created the task can modify it.
        /// 
        /// **AddTaskOwnerAsClaimParticipant**: The owner set for this task will automatically be added as a claim participant.</summary>
        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        public TaskProperties Properties { get; set; } = new TaskProperties();
    
        /// <summary>The user role to look for as the owner of the task.
        /// 
        /// This property is ignored if OwnerUser is not null.</summary>
        [Newtonsoft.Json.JsonProperty("OwnerUserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string OwnerUserRole { get; set; }
    
        /// <summary>The owner of the task.</summary>
        [Newtonsoft.Json.JsonProperty("OwnerUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserIDSpecification OwnerUser { get; set; }
    
        /// <summary>The comments for the task (multiline).</summary>
        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comments { get; set; }
    
    
    }
    
    /// <summary>This type represents a task when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Task 
    {
        /// <summary>The identifier of the task.</summary>
        [Newtonsoft.Json.JsonProperty("TaskID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TaskID { get; set; }
    
        /// <summary>The creation date and time (UTC) of the task.</summary>
        [Newtonsoft.Json.JsonProperty("CreationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreationDate { get; set; }
    
        /// <summary>The user who created the task.</summary>
        [Newtonsoft.Json.JsonProperty("CreatorUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User CreatorUser { get; set; }
    
        /// <summary>The name of the task.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>The code of the template used to create the task.</summary>
        [Newtonsoft.Json.JsonProperty("TaskTemplateCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string TaskTemplateCode { get; set; }
    
        /// <summary>The code of the task group the task is part of.</summary>
        [Newtonsoft.Json.JsonProperty("TaskGroupCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string TaskGroupCode { get; set; }
    
        /// <summary>This type represents the task priorities supported by the Symbility API.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("Priority", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaskPriority Priority { get; set; }
    
        /// <summary>The due date and time (UTC) of the task.</summary>
        [Newtonsoft.Json.JsonProperty("DueDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset DueDate { get; set; }
    
        /// <summary>This type represents the task statuses supported by the Symbility API.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaskStatus Status { get; set; }
    
        /// <summary>The successor task template code when the task is completed.</summary>
        [Newtonsoft.Json.JsonProperty("TaskTemplateCompletedCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string TaskTemplateCompletedCode { get; set; }
    
        /// <summary>The successor task template code when the task is cancelled.</summary>
        [Newtonsoft.Json.JsonProperty("TaskTemplateCancelledCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string TaskTemplateCancelledCode { get; set; }
    
        /// <summary>This type represents the task visibility options supported by the Symbility API.
        /// 
        /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
        [Newtonsoft.Json.JsonProperty("Visibility", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaskVisibility Visibility { get; set; }
    
        /// <summary>This type represents the task properties supported by the Symbility API. 
        /// This is a bit field, a set of flags, the TaskProperties can be one or more of the following values.
        /// 
        /// **AllowChangesOnlyByMyCompany**: Only the company who created the task can modify it.
        /// 
        /// **AddTaskOwnerAsClaimParticipant**: The owner set for this task will automatically be added as a claim participant.</summary>
        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaskProperties Properties { get; set; }
    
        /// <summary>The owner of the task.</summary>
        [Newtonsoft.Json.JsonProperty("OwnerUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User OwnerUser { get; set; }
    
        /// <summary>The comments for the task (multiline).</summary>
        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comments { get; set; }
    
        /// <summary>The date and time (UTC) the task was closed (completed or cancelled).</summary>
        [Newtonsoft.Json.JsonProperty("ClosedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ClosedDate { get; set; }
    
        /// <summary>The user who closed the task.</summary>
        [Newtonsoft.Json.JsonProperty("ClosedUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User ClosedUser { get; set; }
    
    
    }
    
    /// <summary>This type represents the structure used to update a task.
    /// 
    /// The method will only update fields that are specified in the request. 
    /// 
    /// For example, if you don’t want to update the Comments information, omit the Comments from the request. 
    /// If you want to empty the Comments field, specify an empty Comments attribute.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TaskUpdateSpecification 
    {
        /// <summary>The name of the task.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>The code of the group for the task.</summary>
        [Newtonsoft.Json.JsonProperty("TaskGroupCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string TaskGroupCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaskPriority? Priority { get; set; }
    
        /// <summary>The due date and time (UTC) for the task.</summary>
        [Newtonsoft.Json.JsonProperty("DueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DueDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaskStatus? Status { get; set; }
    
        /// <summary>The successor task template code when the task is completed.</summary>
        [Newtonsoft.Json.JsonProperty("TaskTemplateCompletedCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string TaskTemplateCompletedCode { get; set; }
    
        /// <summary>The successor task template code when the task is cancelled.</summary>
        [Newtonsoft.Json.JsonProperty("TaskTemplateCancelledCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string TaskTemplateCancelledCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Visibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaskVisibility? Visibility { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaskProperties Properties { get; set; }
    
        /// <summary>The user role to look for as the owner of the task.</summary>
        [Newtonsoft.Json.JsonProperty("OwnerUserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string OwnerUserRole { get; set; }
    
        /// <summary>The owner of the task.</summary>
        [Newtonsoft.Json.JsonProperty("OwnerUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserIDSpecification OwnerUser { get; set; }
    
        /// <summary>The comments for the task.</summary>
        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comments { get; set; }
    
    
    }
    
    /// <summary>This type represents the diagram options that the Symbility API supports. 
    /// This is a bit field, a set of flags, the DiagramOptions can be one or more of the following values.
    /// 
    /// **Locked**: The diagram is locked.
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DiagramOptionsFlags
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Locked")]
        Locked = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 2,
    
    }
    
    /// <summary>This type represents the estimate option values that the Symbility API supports. 
    /// This is a bit field, a set of flags, the EstimateOptions can be one or more of the following values.
    /// 
    /// **None**: No flag is set.
    /// 
    /// **Contents**: The estimate is a contents estimate.
    /// 
    /// **Locked**: The estimate is locked.
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum EstimateOptionsFlags
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Locked")]
        Locked = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Contents")]
        Contents = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 3,
    
    }
    
    /// <summary>This type represents an estimate item line type when using the Symbility API.
    /// 
    /// **EstimateItem**: The estimate item line type is an EstimateItem
    /// 
    /// **Title**: The estimate item line type is a Title
    /// 
    /// **Text**: The estimate item line type is a Text</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum EstimateItemLineTypeFlags
    {
        [System.Runtime.Serialization.EnumMember(Value = @"EstimateItem")]
        EstimateItem = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Title")]
        Title = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Text")]
        Text = 2,
    
    }
    
    /// <summary>This type represents item links when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ItemLinkFlags
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Wall")]
        Wall = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ceiling")]
        Ceiling = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Floor")]
        Floor = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Volume")]
        Volume = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Door")]
        Door = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Window")]
        Window = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Block")]
        Block = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Step")]
        Step = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Opening")]
        Opening = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ridge")]
        Ridge = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rafter")]
        Rafter = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Eave")]
        Eave = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Panel")]
        Panel = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Valley")]
        Valley = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Soffit")]
        Soffit = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HipRafter")]
        HipRafter = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RoofFloor")]
        RoofFloor = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fascia")]
        Fascia = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Trusses")]
        Trusses = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"StepFlash")]
        StepFlash = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Flashing")]
        Flashing = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Parapet")]
        Parapet = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 23,
    
    }
    
    /// <summary>This type represents item links (2) when using the Symbility API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ItemLink2Flags
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rakes")]
        Rakes = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sill")]
        Sill = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TransitionStrips")]
        TransitionStrips = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 4,
    
    }
    
    /// <summary>This type represents the photo properties that the Symbility API supports.
    /// 
    /// **DamageYes**: The photo has been marked as having damage.
    /// 
    /// **DamageNo**: The photo has been marked as not having damage.
    /// 
    /// **LiveRoofAngle**: The roof angle measure was taken using the device.
    /// 
    /// **Captured**: This flag is set when the photo has been captured within the application.
    /// 
    /// **Imported**: This flag is set when the photo has been imported from a file.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PhotoPropertiesFlags
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DamageYes")]
        DamageYes = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DamageNo")]
        DamageNo = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LiveRoofAngle")]
        LiveRoofAngle = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Captured")]
        Captured = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Imported")]
        Imported = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 6,
    
    }
    
    /// <summary>This type represents the claim assignment option values that the Symbility API supports.
    /// 
    /// **None**: No option specified
    /// 
    /// **DelegatedAuthority**: Assignee has Delegated Authority
    /// 
    /// **ClaimStatusChange**: Assignee has the ability to change the claim status</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ClaimAssignmentOptionFlags
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DelegatedAuthority")]
        DelegatedAuthority = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ClaimStatusChange")]
        ClaimStatusChange = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AssigneeGroupDefault")]
        AssigneeGroupDefault = 3,
    
    }
    
    /// <summary>This type represents the claim type values that the Symbility API supports. This is a bit field, a set of flags.
    /// 
    /// The ClaimType can be one or more of the following values.
    /// 
    /// **Residential**: The claim concerns the structure of a residential property.
    /// 
    /// **Commercial**: The claim concerns the structure of a commercial property.
    /// 
    /// **Contents**: The claim involves contents replacement.
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ClaimTypeFlags
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Residential")]
        Residential = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Commercial")]
        Commercial = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Contents")]
        Contents = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 3,
    
    }
    
    /// <summary>This type represents the properties of the payment that the Symbility API supports.
    /// 
    /// **None**: There are no properties applied to the payment.
    /// 
    /// **ApplyDeductible**: The payment should be applied towards the deductible.
    /// 
    /// **FullPayment**: The payment fully covers all estimate items of the payment.
    /// 
    /// **DepreciationRecovered**: The payment covers the recoverable depreciation of the estimate items of the payment.
    /// 
    /// **PartialPayment**: The payment partially covers the estimate items of the payment without covering their actual cash value.
    /// 
    /// **AcvPayment**: The payment covers the actual cash value of the estimate items of the payment.
    /// 
    /// **Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ClaimPaymentPropertiesFlags
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ApplyDeductible")]
        ApplyDeductible = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FullPayment")]
        FullPayment = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DepreciationRecovered")]
        DepreciationRecovered = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartialPayment")]
        PartialPayment = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AcvPayment")]
        AcvPayment = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 6,
    
    }
    
    /// <summary>This type represents the task properties supported by the Symbility API. 
    /// This is a bit field, a set of flags, the TaskProperties can be one or more of the following values.
    /// 
    /// **AllowChangesOnlyByMyCompany**: Only the company who created the task can modify it.
    /// 
    /// **AddTaskOwnerAsClaimParticipant**: The owner set for this task will automatically be added as a claim participant.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TaskPropertiesFlags
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AllowChangesOnlyByMyCompany")]
        AllowChangesOnlyByMyCompany = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AddTaskOwnerAsClaimParticipant")]
        AddTaskOwnerAsClaimParticipant = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Body 
    {
        /// <summary>The grant type for the OAuth2 protocol (must be set to `client_credentials`).</summary>
        [Newtonsoft.Json.JsonProperty("grant_type", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Grant_type { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.1.0 (NJsonSchema v10.4.3.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.1.0 (NJsonSchema v10.4.3.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.1.0 (NJsonSchema v10.4.3.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108