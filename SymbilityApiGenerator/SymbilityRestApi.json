{
  "openapi": "3.0.1",
  "info": {
    "title": "Symbility Claims Connect REST API Reference Guide",
    "description": "Email: <a href='mailto:support@symbilitysolutions.com'>support@symbilitysolutions.com</a><br />\r\nÂ© 2020 Symbility Solutions Inc.\r\n\r\n# Revision History\r\n| Version | Date | Description|\r\n|---------|------|------------|\r\n| 3.0.1 | May 8, 2020 |<ul><li>First official version</li></ul>|\r\n| 3.0.2 | May 14, 2020 |<ul><li>Minor fixes</li></ul>|\r\n| 3.1.0 | June 17, 2020 |<ul><li> Added claim insured contact to the response of <a href='#operation/ClaimGetClaim'>Get the summary of a claim</a>.</li><li> Added setAssigneeAsInsuredContact parameter to <a href='#operation/AssignmentAddClaimAssignee'>Assign a company to a claim</a>, <a href='#operation/AssignmentAddClaimAssigneeGroup'>Assign the recommended company to a claim</a>, <a href='#operation/AssignmentAddClaimAssigneeRepairOptions'>Assign the recommended user or company based on repair options rules</a>, <a href='#operation/AssignmentAddClaimAssigneeUserGroup'>Assign the recommended user to a claim</a>, and <a href='#operation/AssignmentAddClaimInternalAssignee'>Assign a user to a claim</a>.</li></ul>|\r\n| 3.1.1 | July 21, 2020 |<ul><li>Minor fixes</li><li> Added error code</li></ul>|\r\n| 3.1.2 | August 6, 2020 |<ul><li> Fixed Typos</li></ul>|\r\n| 3.1.3 | August 8, 2020 |<ul><li> Clarified ItemDepreciationUsage values</li></ul>|\r\n| 3.2.0 | September 09, 2020 |<ul><li>Added AssigneeGroupIDSpecification parameter to <a href='#operation/AssignmentAddClaimAssignee'>Assign a company to a claim</a></li></ul>|\r\n| 3.3.0 | October 20, 2020 |<ul><li> Added <a href='#operation/AssignmentSetClaimAssignmentCustomFields'>Sets the custom fields values of an assignment</a> method</li><li> Added CustomFields parameter to <a href='#operation/AssignmentAddClaimAssignee'>Assign a company to a claim</a>, <a href='#operation/AssignmentAddClaimAssigneeGroup'>Assign the recommended company to a claim</a>, <a href='#operation/uAssignmentAddClaimAssigneeRepairOptions'>Assign the recommended user or company based on repair options rules</a>, <a href='#operation/AssignmentAddClaimAssigneeUserGroup'>Assign the recommended user to a claim</a>, and <a href='#operation/AssignmentAddClaimInternalAssignee'>Assign a user to a claim</a></li></ul>|\r\n| 3.4.1 | February 12, 2021 |<ul><li> Added AssignmentID parameter to <a href='#operation/ExternalDocumentAddClaimExternalDocument'>Add an external document</a>, <a href='#operation/PhotoAddClaimPhoto'>Add a claim photo</a> and <a href='#operation/DiagramImportClaimDiagram'>Import a claim diagram</a></li><li>Added OrphanDiagramsOnly, OrphanPhotoPagesOnly, OrphanFormsOnly, OrphanExternalDocumentsOnly, OrphanHandwrittenNotesOnly to <a href='#operation/ClaimGetClaimDetails'>Get the details of a claim</a></li><li>Added method <a href='#operation/AssignmentGetClaimAssignmentDetails'>Get the details of a claim assignment</a></li><li>Updated description of <a href='#operation/AssignmentGetClaimAssignment'>Get a claim assignment</a></li><li>Updated Default letterhead chosen when calling <a href='#operation/ClaimGetClaimDocument_v2'>Get a claim document(v2)</a> now matches Claim Connect and Mobile Claims logic</li></ul>|\r\n| 3.4.2 | February 12, 2021 |<ul><li>Added <a href='#operation/ClaimCreateClaimEstimate'>Create a new estimate</a> method</li><li>Added <a href='#operation/EstimateUpdateClaimEstimate'>Update an estimate</a> method</li><li>Added MergeEstimates parameter to <a href='#operation/ClaimGetClaimDetails'>Get the details of a claim</a></li><li>Added ParentDiagramID and DiagramObject parameters to Diagram</li><li>Added ClaimCoverageID parameter to ClaimCoverage</li><li>Added ClaimSubcoverageID parameter to ClaimSubcoverage</li><li>Added External, DefaultClaimCoverageID, TotalFreighCost, ApplyFlatDeductible, Comments and EstimateItems parameters to Estimate</li><li>Added ClaimCoverageID and Subcoverages parameters to EstimateCoverage</li><li>Added EstimateSubcoverage type</li><li>Added ExternalReference, DiagramObjectID, ClaimCoverageID, ClaimSubcoverageID, IncludeSubtractions, TotalTax1, TotalTax2, TotalTax3, TotalTax4, TotalOverhead, TotalProfit, TotalTax1ActualCashValue, TotalTax2ActualCashValue, TotalTax3ActualCashValue, TotalTax4ActualCashValue, TotalOverheadActualCashValue, TotalProfitActualCashValue, EstimateItemDepreciation, Links and Links2 to EstimateItem</li><li>Added ItemLink type</li><li>Added ItemLink2 type</li><li>Added EstimateItemDepreciation type</li><li>Added EstimateItemNoteID and Type parameters to EstimateItemNote type</li><li>Added EstimateItemNoteType type</li><li>Added CustomDiagramSpecification type</li><li>Added EstimateSpecification type</li><li>Added ExternalEstimateSpecification type</li><li>Added EstimateItemSpecification type</li><li>Added ExternalEstimateItemSpecification type</li><li>Added EstimateItemNoteSpecification</li><li>Added EstimateUpdateSpecification type</li><li>Added EstimateItemUpdateSpecification type</li><li>Added EstimateItemNoteUpdateSpecification</li><li>Updated all properties in EstimateItemContents and they are now nullable</li><li>Renamed Total to ReplacementCost, GrandTotal to AmountPayableReplacementCost, GrandTotalWithDepreciation to AmountPayableActualCashValue, GrandTotalIfDepreciationRecovered to AmountPayableIfDepreciationRecovered in Estimate</li><li>Removed EstimateItems from DiagramObject</li><li>Removed DefaultCoverageName and DiagramObject from Estimate</li><li>Removed Name and Type from EstimateCoverage</li><li>Removed DepreciationType, DepreciationUsage, RecoverableDepreciation and ApplyDepreciationToUnitPrice from EstimateItem</li></ul>|\r\n| 3.4.3 | February 26, 2021 |<ul><li>Added many properties to Photo</li></ul>|\r\n| 3.4.4 | March 2, 2021 |<ul><li>Updated error codes</li></ul>|\r\n| 3.4.5 | March 25, 2021 |IMPORTANT breaking change: <ul><li>The meaning of Estimate.ParentEstimateID has changed and value is now consistent with ClaimEstimateEvent.ParentEstimateID</li></ul>|\r\n| 3.4.6 | March 30, 2021 |Added missing HandwrittenNoteFormat.Pdf|\r\n| 3.4.7 | April 14, 2021 |<ul><li>Added AssignmentID to ClaimEstimateRejectionEvent</li><li>Added AssignmentID to ClaimEstimateStatusEvent</li></ul>|\r\n| 3.4.8 | April 21, 2021 |Fixed ReplacementBrand to be string [100] instead of string [10]|\r\n| 3.4.9 | April 27, 2021 |Minor fix to Error Codes|\r\n| 3.4.10 | May 5, 2021 |Fixed ReplacementBrand to be string [50] instead of string [100]|\r\n| 3.4.11 | May 7, 2021 | Added new error to Error Codes|\r\n\r\n# Introduction\r\nWelcome to the reference guide for the Symbility Claims Connect REST API.<br /><br />\r\nThis guide covers the operations and resources for external systems to integrate with Claims Connect.<br /><br />\r\nIn addition to this guide, a separate guide is available to cover REST API notifications that Symbility \r\nClaims Connect can send to external systems. This separate guide can be downloaded from the Claims Connect API account page.\r\n\r\n## Access to the API\r\nFor a company to get access to the API and be able to use it, it must:\r\n* Have a Claims Connect account\r\n* Contact the Symbility staff (<a href='mailto:support@symbilitysolutions.com'>support@symbilitysolutions.com</a>) to enable the API module for its account\r\n* Configure its API account\r\n\r\nA test API account can be requested (<a href='mailto:support@symbilitysolutions.com'>support@symbilitysolutions.com</a>) for development, testing and debugging purposes. A test account runs on a different environment/server/URL than a production account, but behaves the same.<br /><br />\r\nIMPORTANT: production accounts should not be used during development of the integration with the API. Development of the integration should be done using test accounts.\r\n\r\n## Account Setup\r\nOnce a company has been granted API privileges, it needs to login to Claims Connect and setup its API account. The API account page is accessible from the top-right menu, [ACCOUNTS - API Account]. Note that only the administrators and technical administrators have access to it.<br /><br />\r\nThe API account page includes different options and views including:\r\n* IP restrictions\r\n* External codes (companies can assign specific codes to each of its preferred vendors and branches and then use these codes in the API)\r\n* Usage and notification logs\r\n\r\n## Environments\r\nClaims Connect is hosted on multiple environments and it is important to connect to the correct endpoint based on where the test and production accounts have been created.\r\n\r\n| Environment | Endpoint |\r\n|-------------|----------|\r\n| Pre-production North America | <a href='https://staging.symbility.net/rest-api'>https://staging.symbility.net/rest-api</a> |\r\n| Pre-production Europe | <a href='https://staging-emea.symbility.net/rest-api'>https://staging-emea.symbility.net/rest-api</a> |\r\n| Pre-production UK | <a href='https://preprod-uk.symbility.net/rest-api'>https://preprod-uk.symbility.net/rest-api</a> |\r\n| Production AU | <a href='https://au.symbility.net/rest-api'>https://au.symbility.net/rest-api</a> |\r\n| Production BE | <a href='https://be.symbility.net/rest-api'>https://be.symbility.net/rest-api</a> |\r\n| Production CA | <a href='https://ca.symbility.net/rest-api'>https://ca.symbility.net/rest-api</a> |\r\n| Production DE | <a href='https://de.symbility.net/rest-api'>https://de.symbility.net/rest-api</a> |\r\n| Production FR | <a href='https://fr.symbility.net/rest-api'>https://fr.symbility.net/rest-api</a> |\r\n| Production NZ | <a href='https://nz.symbility.net/rest-api'>https://nz.symbility.net/rest-api</a> |\r\n| Production PL | <a href='https://pl.symbility.net/rest-api'>https://pl.symbility.net/rest-api</a> |\r\n| Production US | <a href='https://www.symbility.net/rest-api'>https://www.symbility.net/rest-api</a> |\r\n| Production ZA | <a href='https://za.symbility.net/rest-api'>https://za.symbility.net/rest-api</a> |\r\n\r\n## Security\r\nOAuth 2.0 must be used to authenticate with the API. Authentication is described in the <a href='#tag/Authentication'>Authentication section</a>.\r\n",
    "version": "v03_04",
    "x-logo": {
      "url": "data:image/png;base64, "
    }
  },
  "servers": [
    {
      "url": "https://environment.symbility.net/rest-api"
    }
  ],
  "paths": {
    "/v03_04/claims/{claimID}/assignments/{assignmentID}": {
      "get": {
        "tags": [
          "Assignment"
        ],
        "summary": "Get the summary of an assignment.",
        "description": "This method allows an external system to retrieve the summary of a claim assignment on Claims Connect.",
        "operationId": "AssignmentGetClaimAssignment",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim from which to get the assignment.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim from which to get the assignment."
            }
          },
          {
            "name": "assignmentID",
            "in": "path",
            "description": "The identifier of the assignment to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the assignment to retrieve.",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested assignment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimAssignment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Assignment"
        ],
        "summary": "Unassign a claim",
        "description": "This method allows an external system to unassign a company from a claim on Claims Connect.\r\n\r\nThis method will log a warning if the company currently isn't assigned to the claim.\r\nIf the assignee company calls this method and the claim assignment was not accepted yet, this method automatically\r\naccepts the claim assignment.",
        "operationId": "AssignmentRemoveClaimAssignee",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim from which to unassign the company.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim from which to unassign the company."
            }
          },
          {
            "name": "assignmentID",
            "in": "path",
            "description": "The identifier of the claim assignment to unassign from the claim. If no assignmentID is specified, all assignments\r\nfrom the assignee will be removed provided the assignee has no sub-assignments.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the claim assignment to unassign from the claim. If no assignmentID is specified, all assignments\r\nfrom the assignee will be removed provided the assignee has no sub-assignments.",
              "format": "int32"
            }
          },
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "The user responsible for removing this assignee from the claim. His name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
            "schema": {
              "type": "string",
              "description": "The user responsible for removing this assignee from the claim. His name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
              "nullable": true
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - The operation is temporarily not allowed because a user has ownership of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/assignments/{assignmentID}/details": {
      "get": {
        "tags": [
          "Assignment"
        ],
        "summary": "Get the details of an assignment.",
        "description": "This method allows an external system to retrieve details of the claim assignment from Claims Connect.",
        "operationId": "AssignmentGetClaimAssignmentDetails",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim from which to retrieve the details.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim from which to retrieve the details."
            }
          },
          {
            "name": "assignmentID",
            "in": "path",
            "description": "The globally unique identifier of the claim assignment from which to retrieve the details.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The globally unique identifier of the claim assignment from which to retrieve the details.",
              "format": "int32"
            }
          },
          {
            "name": "forms",
            "in": "query",
            "description": "True if the form summaries should be fetched and included in the response.",
            "schema": {
              "type": "boolean",
              "description": "True if the form summaries should be fetched and included in the response."
            }
          },
          {
            "name": "handwrittenNotes",
            "in": "query",
            "description": "True if the handwritten notes should be fetched and included in the response.",
            "schema": {
              "type": "boolean",
              "description": "True if the handwritten notes should be fetched and included in the response."
            }
          },
          {
            "name": "externalDocuments",
            "in": "query",
            "description": "True if the attached external documents should be fetched and included in the response.",
            "schema": {
              "type": "boolean",
              "description": "True if the attached external documents should be fetched and included in the response."
            }
          },
          {
            "name": "diagrams",
            "in": "query",
            "description": "True if the diagram summaries should be fetched and included in the response.",
            "schema": {
              "type": "boolean",
              "description": "True if the diagram summaries should be fetched and included in the response."
            }
          },
          {
            "name": "estimates",
            "in": "query",
            "description": "True if the estimate summaries should be fetched and included in the response.",
            "schema": {
              "type": "boolean",
              "description": "True if the estimate summaries should be fetched and included in the response."
            }
          },
          {
            "name": "photoPages",
            "in": "query",
            "description": "True if the photo pages and photo summaries should be fetched and included in the response.",
            "schema": {
              "type": "boolean",
              "description": "True if the photo pages and photo summaries should be fetched and included in the response."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested aclaim ssignment details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetClaimAssignmentDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/assignments/{assignmentID}/users": {
      "post": {
        "tags": [
          "Assignment"
        ],
        "summary": "Add a user to a claim",
        "description": "This method allows an external system to add a user to a claim on Claims Connect.\r\n\r\nThis method will log a warning if the user is already participating in the claim.\r\nIf the assignee company calls this method and the claim assignment was not accepted yet, this method automatically\r\naccepts the claim assignment.",
        "operationId": "AssignmentAddClaimUser",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim to which to add the user.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim to which to add the user."
            }
          },
          {
            "name": "assignmentID",
            "in": "path",
            "description": "The identifier of the claim assignment.\r\nThis is a mandatory parameter for the assignee of a claim.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the claim assignment.\r\nThis is a mandatory parameter for the assignee of a claim.",
              "format": "int32"
            }
          },
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
            "schema": {
              "type": "string",
              "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The identifier of the user to add to the claim.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UserIDSpecification"
                  }
                ],
                "description": "This type represents a user when using the Symbility API.",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/assignments/{assignmentID}/assign": {
      "post": {
        "tags": [
          "Assignment"
        ],
        "summary": "Assign a company to a claim",
        "description": "This method allows an external system to assign a company to a claim on Claims Connect.\r\n\r\nIf the assignee company calls this method and the claim assignment was not accepted yet, this method automatically\r\naccepts the claim assignment.",
        "operationId": "AssignmentAddClaimAssignee",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim for which to assign the company.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim for which to assign the company."
            }
          },
          {
            "name": "assignmentID",
            "in": "path",
            "description": "The identifier of the claim assignment. This is a mandatory parameter for the assignee of a claim.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the claim assignment. This is a mandatory parameter for the assignee of a claim.",
              "format": "int32"
            }
          },
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
            "schema": {
              "type": "string",
              "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The specifications of the assignment to create.\r\n\r\nUse AssigneeCompanyIDSpecification to specify the company to assign the claim to.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AddClaimAssigneeSpecification"
                  }
                ],
                "description": "The specifications of the assignment to create.\r\n\r\nUse AssigneeCompanyIDSpecification to specify the company to assign the claim to."
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns the created assignment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimAssignment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/assignments/{assignmentID}/assign-group": {
      "post": {
        "tags": [
          "Assignment"
        ],
        "summary": "Assign the recommended company to a claim",
        "description": "This method allows an external system to assign the recommended company to a claim on Claims Connect.\r\n\r\nIf the assignee company calls this method and the claim assignment was not accepted yet, this method automatically\r\naccepts the claim assignment.",
        "operationId": "AssignmentAddClaimAssigneeGroup",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim for which to assign the company from the assignee group.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim for which to assign the company from the assignee group."
            }
          },
          {
            "name": "assignmentID",
            "in": "path",
            "description": "The identifier of the claim assignment. This is a mandatory parameter for the assignee of a claim.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the claim assignment. This is a mandatory parameter for the assignee of a claim.",
              "format": "int32"
            }
          },
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
            "schema": {
              "type": "string",
              "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The specifications of the assignment to create.\r\n\r\nUse AssigneeGroupIDSpecification to specify the assignee group of the company to assign the claim to.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AddClaimAssigneeGroupSpecification"
                  }
                ],
                "description": "The specifications of the assignment to create.\r\n\r\nUse AssigneeGroupIDSpecification to specify the assignee group of the company to assign the claim to.",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the created assignment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimAssignment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/assignments/{assignmentID}/assign-repair-options": {
      "post": {
        "tags": [
          "Assignment"
        ],
        "summary": "Assign the recommended user or company based on repair options rules",
        "description": "This method allows an external system to assign the recommended user or company based on repair options rules to a claim on Claims Connect.\r\n\r\nIf the assignee company calls this method and the claim assignment was not accepted yet, this method automatically\r\naccepts the claim assignment.",
        "operationId": "AssignmentAddClaimAssigneeRepairOptions",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim for which to add the user or company based on repair options rules.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim for which to add the user or company based on repair options rules."
            }
          },
          {
            "name": "assignmentID",
            "in": "path",
            "description": "The identifier of the claim assignment. This is a mandatory parameter for the assignee of a claim.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the claim assignment. This is a mandatory parameter for the assignee of a claim.",
              "format": "int32"
            }
          },
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
            "schema": {
              "type": "string",
              "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The specifications of the assignment to create.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AddClaimAssigneeRepairOptionsSpecification"
                  }
                ],
                "description": "The specifications of the assignment to create.",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the created assignment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimAssignment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - The operation is temporarily not allowed because a user has ownership of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/assignments/{assignmentID}/assign-group-internal": {
      "post": {
        "tags": [
          "Assignment"
        ],
        "summary": "Assign the recommended user to a claim",
        "description": "This method allows an external system to assign the recommended user to a claim on Claims Connect.\r\n\r\nThis method will log a warning if the user is already participating in the claim.\r\nIf the assignee company calls this method and the claim assignment was not accepted yet, this method automatically\r\naccepts the claim assignment.",
        "operationId": "AssignmentAddClaimAssigneeUserGroup",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim to which to add the user.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim to which to add the user."
            }
          },
          {
            "name": "assignmentID",
            "in": "path",
            "description": "The identifier of the claim assignment.\r\nThis is a mandatory parameter for the assignee of a claim.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the claim assignment.\r\nThis is a mandatory parameter for the assignee of a claim.",
              "format": "int32"
            }
          },
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
            "schema": {
              "type": "string",
              "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The specifications for the assignment.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AddClaimAssigneeUserGroupSpecification"
                  }
                ],
                "description": "The specifications for the assignment.",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimAssignment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/assignments/{assignmentID}/assign-internal": {
      "post": {
        "tags": [
          "Assignment"
        ],
        "summary": "Assign a user to a claim",
        "description": "This method allows an external system to assign a claim to a user on Claims Connect\r\n\r\nIf the assignee company calls this method and the claim assignment was not accepted yet, this method automatically\r\naccepts the claim assignment.",
        "operationId": "AssignmentAddClaimInternalAssignee",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim to which to add the user.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim to which to add the user."
            }
          },
          {
            "name": "assignmentID",
            "in": "path",
            "description": "The identifier of the claim assignment. This is a mandatory parameter for the assignee of a claim.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the claim assignment. This is a mandatory parameter for the assignee of a claim.",
              "format": "int32"
            }
          },
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
            "schema": {
              "type": "string",
              "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The specifications of the assignment to create.\r\n\r\nUse AssigneeUserIDSpecification to specify the user to who the claim will be assigned.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AddClaimInternalAssigneeSpecification"
                  }
                ],
                "description": "The specifications of the assignment to create.\r\n\r\nUse AssigneeUserIDSpecification to specify the user to who the claim will be assigned.",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the created assignment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimAssignment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/assignments/{assignmentID}/update-status": {
      "post": {
        "tags": [
          "Assignment"
        ],
        "summary": "Update the status of an assignment",
        "description": "This method allows an external system to change the status of an assignment in a claim on Claims Connect.",
        "operationId": "AssignmentSetClaimAssignmentStatus",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim in which to retrieve the assignment.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim in which to retrieve the assignment."
            }
          },
          {
            "name": "assignmentID",
            "in": "path",
            "description": "The identifier of the assignment for which to change the status.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the assignment for which to change the status.",
              "format": "int32"
            }
          },
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "The user responsible for updating the assignment status. His name will appear in the claim journal.\r\n\r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
            "schema": {
              "type": "string",
              "description": "The user responsible for updating the assignment status. His name will appear in the claim journal.\r\n\r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The specifications of the new assignment status.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SetClaimAssignmentStatusSpecification"
                  }
                ],
                "description": "The specifications of the new assignment status.",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/assignments/{assignmentID}/update-custom-fields": {
      "post": {
        "tags": [
          "Assignment"
        ],
        "summary": "Sets the customs fields values of an assignment",
        "description": "This method allows an external system to change the value of custom fields of an assignment.",
        "operationId": "AssignmentSetClaimAssignmentCustomFields",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim to which to add the user.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim to which to add the user."
            }
          },
          {
            "name": "assignmentID",
            "in": "path",
            "description": "The identifier of the claim assignment.\r\nThis is a mandatory parameter for the assignee of a claim.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the claim assignment.\r\nThis is a mandatory parameter for the assignee of a claim.",
              "format": "int32"
            }
          },
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
            "schema": {
              "type": "string",
              "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The specifications of the custom fields to be set.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomField"
                },
                "description": "The specifications of the custom fields to be set.",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/assignments/{assignmentID}/update-inspection-scheduled-status": {
      "post": {
        "tags": [
          "Assignment"
        ],
        "summary": "Set the status of an assignment to Inspection Scheduled",
        "description": "This method allows an external system to set the assignment to Inspection Scheduled on Claims Connect.",
        "operationId": "AssignmentSetClaimAssignmentStatusInspectionScheduled",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim in which to retrieve the assignment.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim in which to retrieve the assignment."
            }
          },
          {
            "name": "assignmentID",
            "in": "path",
            "description": "The identifier of the assignment for which to change the status to inspection scheduled.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the assignment for which to change the status to inspection scheduled.",
              "format": "int32"
            }
          },
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "The identifier of the user whoâs changing the assignment status. His name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
            "schema": {
              "type": "string",
              "description": "The identifier of the user whoâs changing the assignment status. His name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The specifications of the new assignment status.",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "InspectionScheduledForDate"
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SetClaimAssignmentStatusInspectionScheduledSpecification"
                  }
                ],
                "description": "The specifications of the new assignment status.",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/assignments/{assignmentID}/update-job-scheduled-status": {
      "post": {
        "tags": [
          "Assignment"
        ],
        "summary": "Set the status of an assignment to Job Scheduled",
        "description": "This method allows an external system to set the assignment to Job Scheduled on Claims Connect.",
        "operationId": "AssignmentSetClaimAssignmentStatusJobScheduled",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim in which to retrieve the assignment.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim in which to retrieve the assignment."
            }
          },
          {
            "name": "assignmentID",
            "in": "path",
            "description": "The identifier of the assignment for which to change the status to job scheduled.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the assignment for which to change the status to job scheduled.",
              "format": "int32"
            }
          },
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "The identifier of the user whoâs changing the assignment status. His name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
            "schema": {
              "type": "string",
              "description": "The identifier of the user whoâs changing the assignment status. His name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The specifications of the new assignment status.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SetClaimAssignmentStatusJobScheduledSpecification"
                  }
                ],
                "description": "The specifications of the new assignment status.",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/authentication/token": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Request an authentication token",
        "description": "This method allows a client to obtain a bearer token that is required to make requests to the API.",
        "operationId": "AuthenticationAuthenticate",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The client_id and client_secret encoded as defined in https://tools.ietf.org/html/rfc6749#section-4.4.<br/>The header should look like:<br/>`Authorization: Basic [base64-encoded client id and secret]`"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "grant_type"
                ],
                "type": "object",
                "properties": {
                  "grant_type": {
                    "type": "string",
                    "description": "The grant type for the OAuth2 protocol (must be set to `client_credentials`).",
                    "nullable": true
                  }
                }
              },
              "encoding": {
                "grant_type": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Returns the authentication token",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponseDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The client could not be authenticated",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationErrorResponseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationErrorResponseDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authorization scheme"
          }
        }
      }
    },
    "/v03_04/claims/{claimID}": {
      "get": {
        "tags": [
          "Claim"
        ],
        "summary": "Get the summary of a claim",
        "description": "This method allows an external system to retrieve the summary of a claim on Claims Connect.",
        "operationId": "ClaimGetClaim",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The identifier of the claim from which to retrieve the summary.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the claim from which to retrieve the summary."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested claim summary.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Claim"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/details": {
      "get": {
        "tags": [
          "Claim"
        ],
        "summary": "Get the details of a claim.",
        "description": "This method allows an external system to retrieve details of the claim from Claims Connect.",
        "operationId": "ClaimGetClaimDetails",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim from which to retrieve the details.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim from which to retrieve the details."
            }
          },
          {
            "name": "forms",
            "in": "query",
            "description": "True if the form summaries should be fetched and included in the response.",
            "schema": {
              "type": "boolean",
              "description": "True if the form summaries should be fetched and included in the response."
            }
          },
          {
            "name": "orphanFormsOnly",
            "in": "query",
            "description": "True if the forms fetched are not associated with any assignments.",
            "schema": {
              "type": "boolean",
              "description": "True if the forms fetched are not associated with any assignments."
            }
          },
          {
            "name": "handwrittenNotes",
            "in": "query",
            "description": "True if the handwritten notes should be fetched and included in the response.",
            "schema": {
              "type": "boolean",
              "description": "True if the handwritten notes should be fetched and included in the response."
            }
          },
          {
            "name": "orphanHandwrittenNotesOnly",
            "in": "query",
            "description": "True if the handwritten notes fetched are not associated to any assignments.",
            "schema": {
              "type": "boolean",
              "description": "True if the handwritten notes fetched are not associated to any assignments."
            }
          },
          {
            "name": "externalDocuments",
            "in": "query",
            "description": "True if the attached external documents should be fetched and included in the response.",
            "schema": {
              "type": "boolean",
              "description": "True if the attached external documents should be fetched and included in the response."
            }
          },
          {
            "name": "orphanExternalDocumentsOnly",
            "in": "query",
            "description": "True if the external documents fetched are not associated with any assignments.",
            "schema": {
              "type": "boolean",
              "description": "True if the external documents fetched are not associated with any assignments."
            }
          },
          {
            "name": "diagrams",
            "in": "query",
            "description": "True if the diagram summaries should be fetched and included in the response.",
            "schema": {
              "type": "boolean",
              "description": "True if the diagram summaries should be fetched and included in the response."
            }
          },
          {
            "name": "orphanDiagramsOnly",
            "in": "query",
            "description": "True if the diagrams fetched are not associated with any assignments.",
            "schema": {
              "type": "boolean",
              "description": "True if the diagrams fetched are not associated with any assignments."
            }
          },
          {
            "name": "estimates",
            "in": "query",
            "description": "True if the estimate summaries should be fetched and included in the response.",
            "schema": {
              "type": "boolean",
              "description": "True if the estimate summaries should be fetched and included in the response."
            }
          },
          {
            "name": "mergeEstimates",
            "in": "query",
            "description": "True if the supplements/revisions should be merged with the root estimate.",
            "schema": {
              "type": "boolean",
              "description": "True if the supplements/revisions should be merged with the root estimate."
            }
          },
          {
            "name": "photoPages",
            "in": "query",
            "description": "True if the photo pages and photo summaries should be fetched and included in the response.",
            "schema": {
              "type": "boolean",
              "description": "True if the photo pages and photo summaries should be fetched and included in the response."
            }
          },
          {
            "name": "orphanPhotoPagesOnly",
            "in": "query",
            "description": "True if the photo pages fetched are not associated with any assignments.",
            "schema": {
              "type": "boolean",
              "description": "True if the photo pages fetched are not associated with any assignments."
            }
          },
          {
            "name": "voiceAnnotations",
            "in": "query",
            "description": "True if the voice annotation summaries should be fetched and included in the response.",
            "schema": {
              "type": "boolean",
              "description": "True if the voice annotation summaries should be fetched and included in the response."
            }
          },
          {
            "name": "journalEntries",
            "in": "query",
            "description": "True if the journal entries should be fetched and included in the response.",
            "schema": {
              "type": "boolean",
              "description": "True if the journal entries should be fetched and included in the response."
            }
          },
          {
            "name": "uploadStatus",
            "in": "query",
            "description": "True if the claim upload status should be fetched and included in the response.",
            "schema": {
              "type": "boolean",
              "description": "True if the claim upload status should be fetched and included in the response."
            }
          },
          {
            "name": "payments",
            "in": "query",
            "description": "True if the claim payments should be fetched and included in the response.",
            "schema": {
              "type": "boolean",
              "description": "True if the claim payments should be fetched and included in the response."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested claim details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetClaimDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/journal-entries": {
      "post": {
        "tags": [
          "Claim"
        ],
        "summary": "Add a journal entry to a claim",
        "description": "This method allows an external system to add a journal entry to a claim on Claims Connect.\r\n\r\nIf the assignee company calls this method and the claim assignment was not accepted yet, this method automatically\r\naccepts the claim assignment.",
        "operationId": "ClaimAddClaimJournalEntry",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim for which to add the journal entry.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim for which to add the journal entry."
            }
          },
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
            "schema": {
              "type": "string",
              "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The journal entry information.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/JournalEntrySpecification"
                  }
                ],
                "description": "This type represents the journal entry structure needed to add a journal entry using the Symbility API.",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/claim-status": {
      "get": {
        "tags": [
          "Claim"
        ],
        "summary": "Get the status of a claim",
        "description": "This method allows an external system to retrieve the status of a claim on Claims Connect.",
        "operationId": "ClaimGetClaimStatus",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim from which to get the status.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim from which to get the status."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the claim status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "Claim"
        ],
        "summary": "Update the status of a claim",
        "description": "This method allows an external system to change the status of a claim on Claims Connect.\r\n\r\nOnly the originator of the claim can set the status to Closed, ClosedCashout, ClosedInvalid, ClosedCanceled and\r\nReopened.  Also note that there are some restrictions on what a claim status can be changed to based on the current\r\nstatus of the claim (ex: a claim can't be set to Inspected if it's currently at Closed).\r\n\r\nIf the assignee company calls this method and the claim assignment was not accepted yet, this method automatically\r\naccepts the claim assignment.",
        "operationId": "ClaimSetClaimStatus",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim for which to change the status.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim for which to change the status."
            }
          },
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
            "schema": {
              "type": "string",
              "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The new status for the claim.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClaimStatus"
                  }
                ],
                "description": "This type represents the claim status values that the Symbility API supports.\r\n\r\n**NotAssigned**: The claim is not assigned to a company.This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**AssignmentSent**: The claim assignment has been sent. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**AssignmentReceived**: The claim assignment has been received.This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**InsuredContacted**: The insured has been contacted. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**InspectionPerformed**: The inspection has been performed. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**EstimateCompleted**: One or many estimates have been completed. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**EstimateApproved**: One or many estimates have been approved. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**JobScheduled**: The job's start and completion dates have been scheduled. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**JobStarted**: The job has been started. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**JobPaused**: The job has been paused. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**JobCompleted**: The job has been completed. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**ResolvedResidential**: The residential part has been resolved.This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**ResolvedCommercial**: The commercial part has been resolved.This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**ResolvedContents**: The contents replacement part has been resolved. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**Closed**: The claim is closed.\r\n\r\n**ClosedCashedOut**: The claim is closed and cashed out.\r\n\r\n**ClosedInvalid**: The claim is closed and invalid (except for certain companies, all diagrams, estimates, forms, photos and external documents have been deleted). \r\n\r\n**ClosedCanceled**: The claim is closed and canceled(except for certain companies, all diagrams, estimates, forms, photos and external documents have been deleted).\r\n\r\n**ClosedMerged**: The claim is closed after being merged into another claim. ). This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**Reopened**: The claim has been reopened.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.\r\n\r\n**Opened**: The claim has been opened.\r\n\r\n**Contacted**: The insured has been contacted. In the case of multiple assignments, the timestamp for this status is when the insured first gets contacted.\r\n\r\n**Inspected**: The property has been inspected.\r\n\r\n**In Progress**: The claim is in progress.\r\n\r\n**At Repair**: The property is currently being repaired."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the claim status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims": {
      "post": {
        "tags": [
          "Claim"
        ],
        "summary": "Create a new claim",
        "description": "This method allows an external system to create a claim on Claims Connect.\r\n\r\nEach claim created by a company must have a unique claim number. This method will return an error if another claim with\r\nthe same number already exists.",
        "operationId": "ClaimCreateClaim",
        "parameters": [
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "Perform the operation on behalf of this user.\r\n\r\nIf no user is specified or if it's invalid, Symbility will use the first administrator it finds in the originator\r\ncompany as the claim creator.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
            "schema": {
              "type": "string",
              "description": "Perform the operation on behalf of this user.\r\n\r\nIf no user is specified or if it's invalid, Symbility will use the first administrator it finds in the originator\r\ncompany as the claim creator.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The specifications of the claim to create.",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "InsuredFirstName",
                  "InsuredLastName",
                  "LossDate",
                  "Number",
                  "PolicyNumber"
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClaimSpecification"
                  }
                ],
                "description": "This type represents the claim structure needed to create a claim using the Symbility API.",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the created claim.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Claim"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/remove-user": {
      "post": {
        "tags": [
          "Claim"
        ],
        "summary": "Remove a user from a claim",
        "description": "This method allows an external system to remove a user from a claim on Claims Connect.",
        "operationId": "ClaimRemoveClaimUser",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim from which to unassign the company.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim from which to unassign the company."
            }
          },
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
            "schema": {
              "type": "string",
              "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The identifier of the user to remove from the claim.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UserIDSpecification"
                  }
                ],
                "description": "This type represents a user when using the Symbility API.",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/update": {
      "post": {
        "tags": [
          "Claim"
        ],
        "summary": "Update a claim",
        "description": "This method allows an external system to update a claim on Claims Connect.\r\n\r\nIn some cases, changing the claim's address information may trigger recalculation of the claim's estimates. This\r\noperation may take longer to complete and send back the result to the external system.",
        "operationId": "ClaimUpdateClaim",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim to update.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim to update."
            }
          },
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "Perform the operation on behalf of this user.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
            "schema": {
              "type": "string",
              "description": "Perform the operation on behalf of this user.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The specifications of the claim fields to update.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClaimUpdateSpecification"
                  }
                ],
                "description": "This type represents the claim structure needed to update a claim using the Symbility API.",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/print": {
      "post": {
        "tags": [
          "Claim"
        ],
        "summary": "Get a claim as PDF",
        "description": "This method allows an external system to retrieve a claim in PDF format from Claims Connect.",
        "operationId": "ClaimGetClaimDocument_v2",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim to retrieve."
            }
          }
        ],
        "requestBody": {
          "description": "The specifications of the content to print.\r\n\r\nUse claimDocumentSpecification to specify the data that needs to be retrieved for the claim. If it is not specified,\r\nSymbility will retrieve the default data as defined in the print profile.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetClaimDocumentV2Specification"
                  }
                ],
                "description": "The specifications of the content to print.\r\n\r\nUse claimDocumentSpecification to specify the data that needs to be retrieved for the claim. If it is not specified,\r\nSymbility will retrieve the default data as defined in the print profile.",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the claim document in PDF format.",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "application",
                  "format": "pdf"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request."
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user."
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access."
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time."
          },
          "500": {
            "description": "Internal Server Error - Unexpected error."
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/coverages": {
      "put": {
        "tags": [
          "Claim"
        ],
        "summary": "Add coverages to a claim",
        "description": "This method allows an external system to add coverages to a claim on Claims Connect.",
        "operationId": "ClaimAddClaimCoverages",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim for which to add the coverages.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim for which to add the coverages."
            }
          },
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "Perform the operation on behalf of this user.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
            "schema": {
              "type": "string",
              "description": "Perform the operation on behalf of this user.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The list of coverages to add.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ClaimCoverage"
                },
                "description": "The list of coverages to add.",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "Claim"
        ],
        "summary": "Get claim coverages",
        "description": "This method allows an external system to retrieve the coverages of a claim on Claims Connect.",
        "operationId": "ClaimGetClaimCoverages",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim for which to retrieve the coverages.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim for which to retrieve the coverages."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested claim coverages.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClaimCoverage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/estimates": {
      "post": {
        "tags": [
          "Claim"
        ],
        "summary": "Create a new estimate",
        "description": "This method allows an external system to create an estimate on Claims Connect.",
        "operationId": "ClaimCreateClaimEstimate",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim from which to unassign the company.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim from which to unassign the company."
            }
          },
          {
            "name": "assignmentID",
            "in": "query",
            "description": "The identifier of the assignment to which to add the estimate to.  This parameter is mandatory.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the assignment to which to add the estimate to.  This parameter is mandatory.",
              "format": "int32"
            }
          },
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "The user responsible for creating the estimate.  This information is not mandatory.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
            "schema": {
              "type": "string",
              "description": "The user responsible for creating the estimate.  This information is not mandatory.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The specifications of the estimate to create.\r\n            \r\nUse EstimateSpecification to specify the estimate information.\r\n\r\nUse CustomDiagramSpecification[] to specify the information of custom diagrams.",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "EstimateSpecification"
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateClaimEstimateSpecification"
                  }
                ],
                "description": "The specifications of the estimate to create.\r\n            \r\nUse EstimateSpecification to specify the estimate information.\r\n\r\nUse CustomDiagramSpecification[] to specify the information of custom diagrams.",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the created claim and diagrams (if any).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateClaimEstimate"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/diagrams": {
      "post": {
        "tags": [
          "Diagram"
        ],
        "summary": "Import a diagram into a claim",
        "description": "This method allows an external system to import a diagram into a claim on Claims Connect.\r\n\r\nThe diagram being imported needs to follow the Symbility specifications.\r\n\r\nIf the assignee company calls this method and the claim assignment was not accepted yet, this method automatically accepts the claim assignment.",
        "operationId": "DiagramImportClaimDiagram",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim to which to import the diagram.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim to which to import the diagram."
            }
          },
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
            "schema": {
              "type": "string",
              "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The diagram import information.",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "AssignmentID"
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AddDiagamImportSpecification"
                  }
                ],
                "description": "The diagram import information.",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the imported diagrams.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Diagram"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/diagrams/{diagramID}": {
      "get": {
        "tags": [
          "Diagram"
        ],
        "summary": "Get a diagram",
        "description": "This method allows an external system to retrieve a specific diagram without bytes from a claim on Claims Connect.",
        "operationId": "DiagramGetClaimDiagram",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim from which to retrieve the diagram.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim from which to retrieve the diagram."
            }
          },
          {
            "name": "diagramID",
            "in": "path",
            "description": "The identifier of the diagram to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the diagram to retrieve.",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested diagram without bytes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Diagram"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/diagrams/{diagramID}/image": {
      "get": {
        "tags": [
          "Diagram"
        ],
        "summary": "Get a diagram as PNG",
        "description": "This method allows an external system to retrieve a specific diagram bytes as PNG from a claim on Claims Connect.",
        "operationId": "DiagramGetClaimDiagramBytes",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim from which to retrieve the diagram.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim from which to retrieve the diagram."
            }
          },
          {
            "name": "diagramID",
            "in": "path",
            "description": "The identifier of the diagram to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the diagram to retrieve.",
              "format": "int32"
            }
          },
          {
            "name": "dimensions",
            "in": "query",
            "description": "True to display the dimensions in the diagram.",
            "schema": {
              "type": "boolean",
              "description": "True to display the dimensions in the diagram."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested diagram bytes.",
            "content": {
              "image/png": {
                "schema": {
                  "type": "image",
                  "format": "png"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request."
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user."
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access."
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time."
          },
          "500": {
            "description": "Internal Server Error - Unexpected error."
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/estimates/{estimateID}": {
      "get": {
        "tags": [
          "Estimate"
        ],
        "summary": "Get an estimate",
        "description": "This method allows an external system to retrieve a specific estimate from a claim on Claims Connect.",
        "operationId": "EstimateGetClaimEstimate",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim from which to retrieve the estimate.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim from which to retrieve the estimate."
            }
          },
          {
            "name": "estimateID",
            "in": "path",
            "description": "The identifier of the estimate to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the estimate to retrieve.",
              "format": "int32"
            }
          },
          {
            "name": "mergedView",
            "in": "query",
            "description": "True if the supplements/revisions should be merged with the root estimate.",
            "schema": {
              "type": "boolean",
              "description": "True if the supplements/revisions should be merged with the root estimate.",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested estimate with estimate items.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Estimate"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/estimates/{estimateID}/update": {
      "post": {
        "tags": [
          "Estimate"
        ],
        "summary": "Update an estimate",
        "description": "This method allows an external system to update a specific estimate from a claim on Claims Connect.",
        "operationId": "EstimateUpdateClaimEstimate",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim for which to change the status.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim for which to change the status.",
              "nullable": true
            }
          },
          {
            "name": "estimateID",
            "in": "path",
            "description": "The identifier of the estimate.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the estimate.",
              "format": "int32"
            }
          },
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "",
            "schema": {
              "type": "string",
              "description": "",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The specifications of the estimate to update.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateClaimEstimateSpecification"
                  }
                ],
                "description": "The specifications of the estimate to update.",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the requested estimate with estimate items.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateClaimEstimate"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/estimates/{estimateID}/estimate-status": {
      "put": {
        "tags": [
          "Estimate"
        ],
        "summary": "Update the status of an estimate",
        "description": "This method allows an external system to change the status of an estimate on Claims Connect.\r\n\r\nThere are some restrictions on what an estimate status can be changed to based on the current status of the estimate.",
        "operationId": "EstimateSetEstimateStatus",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim for which to change the status.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim for which to change the status."
            }
          },
          {
            "name": "estimateID",
            "in": "path",
            "description": "The identifier of the estimate.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the estimate.",
              "format": "int32"
            }
          },
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
            "schema": {
              "type": "string",
              "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The new status for the estimate.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EstimateStatus"
                  }
                ],
                "description": "This type represents the estimate status values that the Symbility API supports.\r\n\r\n**InProgress**: The estimate is in progress.\r\n\r\n**ReadyForReview**: The estimate is ready for review.\r\n\r\n**RejectedReview**: The estimate has been rejected (review).\r\n\r\n**Completed**: The estimate has been completed.\r\n\r\n**RejectedApproval**: The estimate has been rejected (approval).\r\n\r\n**Approved**: The estimate has been approved. \r\n\r\n**Cancelled**: The estimate has been cancelled.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the modified estimate status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/estimates/{estimateID}/finalize": {
      "post": {
        "tags": [
          "Estimate"
        ],
        "summary": "Finalize an estimate",
        "description": "This method allows an external system to finalize an estimate.\r\n\r\nThere are some restrictions as to when an estimate can be finalized.",
        "operationId": "EstimateSetEstimateFinalization",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim for which to change the status.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim for which to change the status."
            }
          },
          {
            "name": "estimateID",
            "in": "path",
            "description": "The identifier of the estimate.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the estimate.",
              "format": "int32"
            }
          },
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
            "schema": {
              "type": "string",
              "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The estimate finalization information.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SetEstimateFinalizationSpecification"
                  }
                ],
                "description": "The estimate finalization information.",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/documents": {
      "post": {
        "tags": [
          "ExternalDocument"
        ],
        "summary": "Attach an external document to a claim",
        "description": "This method allows an external system to attach an external document (Microsoft Word document, PDF document, etc.) to a claim on Claims Connect.\r\n\r\nIf the assignee company calls this method and the claim assignment was not accepted yet, this method automatically accepts the claim assignment.",
        "operationId": "ExternalDocumentAddClaimExternalDocument",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim to which the document must be attached.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim to which the document must be attached."
            }
          },
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
            "schema": {
              "type": "string",
              "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The external document information, including name and the actual content of the document.",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "AssignmentID"
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AddClaimExternalDocumentSpecification"
                  }
                ],
                "description": "The external document information, including name and the actual content of the document.",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the created external document without bytes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalDocument"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/documents/{documentID}": {
      "get": {
        "tags": [
          "ExternalDocument"
        ],
        "summary": "Get an external document",
        "description": "This method allows an external system to retrieve a specific attached external document without bytes from a claim on Claims Connect.",
        "operationId": "ExternalDocumentGetClaimExternalDocument",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim from which to retrieve the external document.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim from which to retrieve the external document."
            }
          },
          {
            "name": "documentID",
            "in": "path",
            "description": "The identifier of the external document to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the external document to retrieve.",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested external document without bytes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalDocument"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/documents/{documentID}/content": {
      "get": {
        "tags": [
          "ExternalDocument"
        ],
        "summary": "Get an external document file",
        "description": "This method allows an external system to retrieve a specific attached external document file from a claim on Claims Connect.",
        "operationId": "ExternalDocumentGetClaimExternalDocumentBytes",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim from which to retrieve the external document.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim from which to retrieve the external document."
            }
          },
          {
            "name": "documentID",
            "in": "path",
            "description": "The identifier of the external document to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the external document to retrieve.",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested external document bytes.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "application",
                  "format": "octet-stream"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request."
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user."
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access."
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time."
          },
          "500": {
            "description": "Internal Server Error - Unexpected error."
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/forms/{formID}": {
      "get": {
        "tags": [
          "Form"
        ],
        "summary": "Get a form",
        "description": "This method allows an external system to retrieve a specific form without bytes from a claim on Claims Connect.",
        "operationId": "FormGetClaimForm",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim from which to retrieve the form.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim from which to retrieve the form."
            }
          },
          {
            "name": "formID",
            "in": "path",
            "description": "The identifier of the form to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the form to retrieve.",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested form without bytes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Form"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/forms/{formID}/document": {
      "get": {
        "tags": [
          "Form"
        ],
        "summary": "Get a form as PDF",
        "description": "This method allows an external system to retrieve a specific form as PDF from a claim on Claims Connect.",
        "operationId": "FormGetClaimFormBytes",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim from which to retrieve the form.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim from which to retrieve the form."
            }
          },
          {
            "name": "formID",
            "in": "path",
            "description": "The identifier of the form to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the form to retrieve.",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested form bytes.",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "application",
                  "format": "pdf"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request."
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user."
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access."
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time."
          },
          "500": {
            "description": "Internal Server Error - Unexpected error."
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/handwritten-notes/{handwrittenNoteID}": {
      "get": {
        "tags": [
          "HandwrittenNote"
        ],
        "summary": "Get a handwritten note",
        "description": "This method allows an external system to retrieve a specific handwritten note from a claim on Claims Connect.",
        "operationId": "HandwrittenNoteGetClaimHandwrittenNote",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim from which to retrieve the diagram.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim from which to retrieve the diagram."
            }
          },
          {
            "name": "handwrittenNoteID",
            "in": "path",
            "description": "The identifier of the handwritten note to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the handwritten note to retrieve.",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested handwritten note without bytes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HandwrittenNote"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/handwritten-notes/{handwrittenNoteID}/document": {
      "get": {
        "tags": [
          "HandwrittenNote"
        ],
        "summary": "Get a handwritten note as PDF",
        "description": "This method allows an external system to retrieve a specific handwritten note as PDF from a claim on Claims Connect.",
        "operationId": "HandwrittenNoteGetClaimHandwrittenNoteBytes",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim from which to retrieve the diagram.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim from which to retrieve the diagram."
            }
          },
          {
            "name": "handwrittenNoteID",
            "in": "path",
            "description": "The identifier of the handwritten note to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the handwritten note to retrieve.",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested handwritten note bytes.",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "application",
                  "format": "pdf"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request."
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user."
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access."
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time."
          },
          "500": {
            "description": "Internal Server Error - Unexpected error."
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/payments/{paymentID}/payment-status": {
      "put": {
        "tags": [
          "Payment"
        ],
        "summary": "Update the status of a payment",
        "description": "This method allows an external system to change the status of a payment on Claims Connect.",
        "operationId": "PaymentSetClaimPaymentStatus",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim in which to retrieve the payment.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim in which to retrieve the payment."
            }
          },
          {
            "name": "paymentID",
            "in": "path",
            "description": "The identifier of the payment for which to change the status.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the payment for which to change the status.",
              "format": "int32"
            }
          },
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
            "schema": {
              "type": "string",
              "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The new status for the payment.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClaimPaymentStatus"
                  }
                ],
                "description": "This type represents the status of a payment.\r\n\r\n**Pending**: The payment status is pending.\r\n\r\n**Submitted**: The payment status is submitted.\r\n\r\n**Approved**: The payment status is approved.\r\n\r\n**Cancelled**: The payment status is cancelled.\r\n\r\n**Rejected**: The payment status is rejected.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the modified payment status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimPaymentStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - The operation is temporarily not allowed because a user has ownership of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/photos": {
      "post": {
        "tags": [
          "Photo"
        ],
        "summary": "Add a photo to a claim",
        "description": "This method allows an external system to add photos to a claim on Claims Connect.",
        "operationId": "PhotoAddClaimPhoto",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim for which to add the photos.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim for which to add the photos."
            }
          },
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be \r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
            "schema": {
              "type": "string",
              "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be \r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The specifications of the photo to create.",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "AssignmentID"
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AddClaimPhotoSpecification"
                  }
                ],
                "description": "The specifications of the photo to create.",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the created photo without bytes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Photo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/photos/{photoID}": {
      "get": {
        "tags": [
          "Photo"
        ],
        "summary": "Get a photo",
        "description": "This method allows an external system to retrieve a specific photo without bytes from a claim on Claims Connect.",
        "operationId": "PhotoGetClaimPhoto",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim from which to retrieve the photo.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim from which to retrieve the photo."
            }
          },
          {
            "name": "photoID",
            "in": "path",
            "description": "The identifier of the photo to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the photo to retrieve.",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested photo without bytes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Photo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/photos/{photoID}/image": {
      "get": {
        "tags": [
          "Photo"
        ],
        "summary": "Get a photo file",
        "description": "This method allows an external system to retrieve the bytes of a specific photo from a claim on Claims Connect.",
        "operationId": "PhotoGetClaimPhotoBytes",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim from which to retrieve the photo.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim from which to retrieve the photo."
            }
          },
          {
            "name": "photoID",
            "in": "path",
            "description": "The identifier of the photo to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the photo to retrieve.",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested photo bytes.",
            "content": {
              "image/jpeg": {
                "schema": {
                  "type": "image",
                  "format": "jpeg"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request."
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user."
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access."
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time."
          },
          "500": {
            "description": "Internal Server Error - Unexpected error."
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/questionnaires": {
      "post": {
        "tags": [
          "Questionnaire"
        ],
        "summary": "Add a prefilled questionnaire to a claim",
        "description": "This method allows an external system to add a prefilled questionnaire to a claim on Claims Connect.\r\n\r\nIf the assignee company calls this method and the claim assignment was not accepted yet, this method automatically \r\naccepts the claim assignment.",
        "operationId": "QuestionnaireAddClaimQuestionnaire",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim to add the questionnaire to.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim to add the questionnaire to."
            }
          },
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be \r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
            "schema": {
              "type": "string",
              "description": "Perform the operation on behalf of this user, his name will appear in the claim journal.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be \r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The questionnaire information including prefilled answers.",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "AssignmentID"
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AddClaimQuestionnaireSpecification"
                  }
                ],
                "description": "The questionnaire information including prefilled answers.",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/tasks": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Add a task to a claim",
        "description": "This method allows an external system to create a task on Claims Connect.",
        "operationId": "TaskCreateClaimTask",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim to which to add a task.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim to which to add a task."
            }
          },
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "Perform the operation on behalf of this user.\r\n\r\nIf no user is specified or if it's invalid, Symbility will use the first administrator it finds in the originator\r\ncompany as the task creator.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
            "schema": {
              "type": "string",
              "description": "Perform the operation on behalf of this user.\r\n\r\nIf no user is specified or if it's invalid, Symbility will use the first administrator it finds in the originator\r\ncompany as the task creator.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The specifications of the task to create.",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "DueDate",
                  "Name",
                  "Priority",
                  "Properties",
                  "Status",
                  "Visibility"
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskSpecification"
                  }
                ],
                "description": "This type represents the structure used to create a task.",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the created task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Get the list of tasks for a claim",
        "description": "This method allows an external system to retrieve the tasks from a claim on Claims Connect.",
        "operationId": "TaskGetClaimTaskList",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim from which to retrieve the tasks.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim from which to retrieve the tasks."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of tasks for the claim.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/tasks/{taskID}": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Get a task",
        "description": "This method allows an external system to retrieve a specific task from a claim on Claims Connect.",
        "operationId": "TaskGetClaimTask",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim from which to retrieve the task.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim from which to retrieve the task."
            }
          },
          {
            "name": "taskID",
            "in": "path",
            "description": "The identifier of the task to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the task to retrieve.",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Task"
        ],
        "summary": "Delete a task",
        "description": "This method allows an external system to delete a task on Claims Connect.",
        "operationId": "TaskDeleteClaimTask",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim for which the task needs to be deleted.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim for which the task needs to be deleted."
            }
          },
          {
            "name": "taskID",
            "in": "path",
            "description": "The identifier of the task to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the task to delete.",
              "format": "int32"
            }
          },
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "Perform the operation on behalf of this user.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
            "schema": {
              "type": "string",
              "description": "Perform the operation on behalf of this user.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
              "nullable": true
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/tasks/create-from-template": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Add a task to a claim using a template",
        "description": "This method allows an external system to create a task on Claims Connect.",
        "operationId": "TaskCreateClaimTaskFromTemplate",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim to which to add a task.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim to which to add a task."
            }
          },
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "Perform the operation on behalf of this user.\r\n\r\nIf no user is specified or if it's invalid, Symbility will use the first administrator it finds in the originator\r\ncompany as the task creator.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
            "schema": {
              "type": "string",
              "description": "Perform the operation on behalf of this user.\r\n\r\nIf no user is specified or if it's invalid, Symbility will use the first administrator it finds in the originator\r\ncompany as the task creator.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The code of the task template.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "description": "The code of the task template.",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the created task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/tasks/{taskID}/update": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Update a task",
        "description": "This method allows an external system to update a task on Claims Connect.",
        "operationId": "TaskUpdateClaimTask",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim for which the task needs to be updated.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim for which the task needs to be updated."
            }
          },
          {
            "name": "taskID",
            "in": "path",
            "description": "The identifier of the task to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the task to update.",
              "format": "int32"
            }
          },
          {
            "name": "From-User-ID-Specification",
            "in": "header",
            "description": "Perform the operation on behalf of this user.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
            "schema": {
              "type": "string",
              "description": "Perform the operation on behalf of this user.\r\n\r\nThis parameter can be set to empty if the user in question is unknown. If this parameter is invalid, it will be\r\nconsidered empty.\r\n            \r\nThis parameter is a string parameter and must be specified as: `{ \"UserID\": \"<UserID>\", \"UserIDType\": \"<UserIDType>\" }`\r\n\r\n<b>UserID</b>: The unique user identifier.\r\n\r\n<b>UserIDType</b>: `UserFullName` (the user identifier contains the full name) or `UserLoginName` or\r\n(the user identifier contains the login name) or `UserEmail` (the user identifier contains the email).",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The specifications of task fields to update.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskUpdateSpecification"
                  }
                ],
                "description": "This type represents the structure used to update a task.\r\n\r\nThe method will only update fields that are specified in the request. \r\n\r\nFor example, if you donât want to update the Comments information, omit the Comments from the request. \r\nIf you want to empty the Comments field, specify an empty Comments attribute.",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - The operation is not allowed because the resource is read-only or not allowed to the account making the call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/voice-annotations/{annotationID}": {
      "get": {
        "tags": [
          "VoiceAnnotation"
        ],
        "summary": "Get a voice annotation",
        "description": "This method allows an external system to retrieve a specific voice annotation without bytes from a claim on Claims Connect.",
        "operationId": "VoiceAnnotationGetClaimVoiceAnnotation",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim from which to retrieve the voice annotation.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim from which to retrieve the voice annotation."
            }
          },
          {
            "name": "annotationID",
            "in": "path",
            "description": "The identifier of the voice annotation to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the voice annotation to retrieve.",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested voice annotation without bytes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceAnnotation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultDetail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    },
    "/v03_04/claims/{claimID}/voice-annotations/{annotationID}/recording": {
      "get": {
        "tags": [
          "VoiceAnnotation"
        ],
        "summary": "Get a voice annotation file",
        "description": "This method allows an external system to retrieve the bytes of a specific voice annotation from a claim on Claims Connect.",
        "operationId": "VoiceAnnotationGetClaimVoiceAnnotationBytes",
        "parameters": [
          {
            "name": "claimID",
            "in": "path",
            "description": "The globally unique identifier of the claim from which to retrieve the voice annotation.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The globally unique identifier of the claim from which to retrieve the voice annotation."
            }
          },
          {
            "name": "annotationID",
            "in": "path",
            "description": "The identifier of the voice annotation to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The identifier of the voice annotation to retrieve.",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested voice annotation file.",
            "content": {
              "audio/wav": {
                "schema": {
                  "type": "audio",
                  "format": "wav"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The body of the request is invalid and must be fixed before resending the request."
          },
          "401": {
            "description": "Unauthorized - Unauthorized request because of invalid credentials, invalid token, disabled API account, or invalid impersonated user."
          },
          "404": {
            "description": "Not Found - The URL needs to be fixed before resending the request, the resource does not exist or no read access."
          },
          "429": {
            "description": "Too Many Requests - The account has sent too many concurrent requests in a given amount of time."
          },
          "500": {
            "description": "Internal Server Error - Unexpected error."
          }
        },
        "security": [
          {
            "OAuth2": [ ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ClaimAssignmentType": {
        "enum": [
          "Internal",
          "External"
        ],
        "type": "string",
        "description": "This type represents the type of claim assignment.\r\n\r\n**Internal**: The claim assignment is to an internal user.\r\n\r\n**External**: The claim assignment is to another company."
      },
      "ClaimAssignmentStatus": {
        "enum": [
          "None",
          "NotAssigned",
          "AssignmentSent",
          "AssignmentReceived",
          "InsuredContacted",
          "InspectionScheduled",
          "InspectionPerformed",
          "EstimateCompleted",
          "EstimateApproved",
          "JobScheduled",
          "JobStarted",
          "JobCompleted",
          "AssignmentCompleted",
          "AssignmentCancelled",
          "AssignmentDeclined",
          "AssignmentReopened",
          "Unknown",
          "Multiple",
          "MitigationWorkStarted",
          "MitigationWorkCompleted",
          "EstimateReadyForReview",
          "JobNotSold"
        ],
        "type": "string",
        "description": "This type represents the claim assignment status values that the Symbility API supports.\r\n\r\n**None**: The claim is not assigned to a company.\r\n\r\n**AssignmentSent**: The claim assignment has been sent.\r\n\r\n**AssignmentReceived**: The claim assignment has been received.\r\n\r\n**InsuredContacted**: The insured has been contacted.\r\n\r\n**InspectionPerformed**: The inspection has been performed.\r\n\r\n**InspectionScheduled**: The inspection has been scheduled.\r\n\r\n**MitigationWorkStarted**: The mitigation work has started.\r\n\r\n**MitigationWorkCompleted**: The mitigation work has been completed.\r\n\r\n**EstimateReadyForReview**: One or many estimates have been marked Ready for Review.\r\n\r\n**EstimateCompleted**: One or many estimates have been completed.\r\n\r\n**EstimateApproved**: One or many estimates have been approved.\r\n\r\n**JobScheduled**: The job's start and completion dates have been scheduled.\r\n\r\n**JobNotSold**: The claim assignment has been marked Job Not Sold.\r\n\r\n**JobStarted**: The job has been started. \r\n\r\n**JobCompleted**: The job has been completed.\r\n\r\n**AssignmentCompleted**: The claim assignment has been completed.\r\n\r\n**AssignmentCancelled**: The claim assignment has been cancelled.\r\n\r\n**AssignmentDeclined**: The claim assignment has been declined.\r\n\r\n**AssignmentReopened**: The claim assignment has been reopened.\r\n\r\n**Multiple**: The claim has multiple claim assignment statuses.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "CompanyType": {
        "enum": [
          "InsuranceCompany",
          "IndependentAdjuster",
          "Contractor",
          "Unknown",
          "IntermediaryClaimManagementCompany",
          "IntermediaryContractorNetwork",
          "IntermediaryIndependentAdjuster"
        ],
        "type": "string",
        "description": "This type represents the company type values that the Symbility API supports.\r\n\r\n**InsuranceCompany**: The company is an insurance company.\r\n\r\n**IndependentAdjuster**: The company is an independent adjuster.\r\n\r\n**Contractor**: The company is a contractor.\r\n\r\n**IntermediaryClaimManagementCompany**: The company is an intermediary - claim management company.\r\n\r\n**IntermediaryContractorNetwork**: The company is an intermediary - contractor network.\r\n\r\n**IntermediaryIndependentAdjuster**: The company is an intermediary - independent adjuster.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "State": {
        "enum": [
          "Alabama",
          "Alaska",
          "Arizona",
          "Arkansas",
          "California",
          "Colorado",
          "Connecticut",
          "Delaware",
          "DistrictOfColumbia",
          "Florida",
          "Georgia",
          "Hawaii",
          "Idaho",
          "Illinois",
          "Indiana",
          "Iowa",
          "Kansas",
          "Kentucky",
          "Louisiana",
          "Maine",
          "Maryland",
          "Massachusetts",
          "Michigan",
          "Minnesota",
          "Mississippi",
          "Missouri",
          "Montana",
          "Nebraska",
          "Nevada",
          "NewHampshire",
          "NewJersey",
          "NewMexico",
          "NewYork",
          "NorthCarolina",
          "NorthDakota",
          "Ohio",
          "Oklahoma",
          "Oregon",
          "Pennsylvania",
          "RhodeIsland",
          "SouthCarolina",
          "SouthDakota",
          "Tennessee",
          "Texas",
          "Utah",
          "Vermont",
          "Virginia",
          "Washington",
          "WestVirginia",
          "Wisconsin",
          "Wyoming",
          "PuertoRico",
          "VirginIslands",
          "Alberta",
          "BritishColumbia",
          "Manitoba",
          "NewBrunswick",
          "Newfoundland",
          "NorthwestTerritories",
          "NovaScotia",
          "Nunavut",
          "Ontario",
          "PrinceEdwardIsland",
          "Quebec",
          "Saskatchewan",
          "YukonTerritory",
          "UnitedKingdomNone",
          "Bedfordshire",
          "Berkshire",
          "Buckinghamshire",
          "Cambridgeshire",
          "Cheshire",
          "Cornwall",
          "Cumberland",
          "Derbyshire",
          "Devon",
          "Dorset",
          "Durham",
          "EastRidingOfYorkshire",
          "Essex",
          "Gloucestershire",
          "Hampshire",
          "Herefordshire",
          "Hertfordshire",
          "Huntingdonshire",
          "IsleOfWight",
          "Kent",
          "Lancashire",
          "Leicestershire",
          "Lincolnshire",
          "Middlesex",
          "Norfolk",
          "NorthRidingOfYorkshire",
          "Northamptonshire",
          "Northumberland",
          "Nottinghamshire",
          "Oxfordshire",
          "Rutland",
          "Shropshire",
          "Somerset",
          "Staffordshire",
          "Suffolk",
          "Surrey",
          "Sussex",
          "Warwickshire",
          "WestRidingOfYorkshire",
          "Westmorland",
          "Wiltshire",
          "Worcestershire",
          "Yorkshire",
          "WestMidlands",
          "Antrim",
          "Armagh",
          "Down",
          "Fermanagh",
          "Londonderry",
          "Tyrone",
          "Anglesey",
          "Breconshire",
          "Caernarfonshire",
          "Cardiganshire",
          "Carmarthenshire",
          "Denbighshire",
          "Flintshire",
          "Glamorgan",
          "Merioneth",
          "Monmouthshire",
          "Montgomeryshire",
          "Pembrokeshire",
          "Radnorshire",
          "Aberdeenshire",
          "AngusForfarshire",
          "Argyll",
          "Ayrshire",
          "Banffshire",
          "Berwickshire",
          "Bute",
          "Caithness",
          "Clackmannanshire",
          "Dumfriesshire",
          "Dunbartonshire",
          "EastLothian",
          "Fife",
          "InvernessShire",
          "Kincardineshire",
          "KinrossShire",
          "Kirkcudbrightshire",
          "Lanarkshire",
          "Midloathian",
          "Moray",
          "Nairnshire",
          "Orkney",
          "Peeblesshire",
          "Perthshire",
          "Renfrewshire",
          "RossAndCromarty",
          "Roxburghshire",
          "Selkirkshire",
          "Shetland",
          "Stirlingshire",
          "Sutherland",
          "WestLothian",
          "Wigtownshire",
          "Unknown",
          "SouthAfricaNone",
          "EasternCape",
          "FreeState",
          "Gauteng",
          "KwaZuluNatal",
          "Limpopo",
          "Mpumalanga",
          "NorthWest",
          "NorthernCape",
          "WesternCape",
          "GermanyNone",
          "AustralianCapitalTerritory",
          "NewSouthWales",
          "NorthernTerritory",
          "Queensland",
          "SouthAustralia",
          "Tasmania",
          "Victoria",
          "WesternAustralia",
          "LowerSilesian",
          "KuyavianPomeranian",
          "Lublin",
          "Lubusz",
          "Lodz",
          "LesserPoland",
          "Masovian",
          "Opole",
          "Subcarpathian",
          "Podlaskie",
          "Pomeranian",
          "Silesian",
          "HolyCross",
          "WarmianMasurian",
          "GreaterPoland",
          "WestPomeranian",
          "BelgiumNone",
          "BrusselsHoofdstedelijkGewest",
          "WaalsBrabant",
          "VlaamsBrabant",
          "Antwerpen",
          "Limburg",
          "Luik",
          "Namen",
          "Henegouwen",
          "Luxemburg",
          "WestVlaanderen",
          "OostVlaanderen",
          "Drenthe",
          "Flevoland",
          "Friesland",
          "Gelderland",
          "Groningen",
          "LimburgNE",
          "NoordBrabant",
          "NoordHolland",
          "Overijssel",
          "Utrecht",
          "Zeeland",
          "ZuidHolland",
          "Diekirch",
          "Grevenmacher",
          "Luxembourg",
          "TurkeyNone",
          "Adana",
          "Adiyaman",
          "Afyonkarahisar",
          "Agri",
          "Aksaray",
          "Amasya",
          "Ankara",
          "Antalya",
          "Ardahan",
          "Artvin",
          "Aydin",
          "Balikesir",
          "Bartin",
          "Batman",
          "Bayburt",
          "Bilecik",
          "Bingol",
          "Bitlis",
          "Bolu",
          "Burdur",
          "Bursa",
          "Canakkale",
          "Cankiri",
          "Corum",
          "Denizli",
          "Diyarbakir",
          "Duzce",
          "Edirne",
          "Elazig",
          "Erzincan",
          "Erzurum",
          "Eskisehir",
          "Gaziantep",
          "Giresun",
          "Gumushane",
          "Hakkari",
          "Hatay",
          "Igdir",
          "Isparta",
          "Istanbul",
          "Izmir",
          "Kahramanmaras",
          "Karabuk",
          "Karaman",
          "Kars",
          "Kastamonu",
          "Kayseri",
          "Kilis",
          "Kirikkale",
          "Kirklareli",
          "Kirsehir",
          "Kocaeli",
          "Konya",
          "Kutahya",
          "Malatya",
          "Manisa",
          "Mardin",
          "Mersin",
          "Mugla",
          "Mus",
          "Nevsehir",
          "Nigde",
          "Ordu",
          "Osmaniye",
          "Rize",
          "Sakarya",
          "Samsun",
          "Sanliurfa",
          "Siirt",
          "Sinop",
          "Sirnak",
          "Sivas",
          "Tekirdag",
          "Tokat",
          "Trabzon",
          "Tunceli",
          "Usak",
          "Van",
          "Yalova",
          "Yozgat",
          "Zonguldak",
          "JapanNone",
          "Aichi",
          "Akita",
          "Aomori",
          "Chiba",
          "Ehime",
          "Fukui",
          "Fukuoka",
          "Fukushima",
          "Gifu",
          "Gumma",
          "Hiroshima",
          "Hokkaido",
          "Hyogo",
          "Ibaraki",
          "Ishikawa",
          "Iwate",
          "Kagawa",
          "Kagoshima",
          "Kanagawa",
          "Kochi",
          "Kumamoto",
          "Kyoto",
          "Mie",
          "Miyagi",
          "Miyazaki",
          "Nagano",
          "Nagasaki",
          "Nara",
          "Niigata",
          "Oita",
          "Okayama",
          "Okinawa",
          "Osaka",
          "Saga",
          "Saitama",
          "Shiga",
          "Shimane",
          "Shizuoka",
          "Tochigi",
          "Tokushima",
          "Tokyo",
          "Tottori",
          "Toyama",
          "Wakayama",
          "Yamagata",
          "Yamaguchi",
          "Yamanashi",
          "SpainNone",
          "Andalusia",
          "Aragon",
          "Asturias",
          "BalearicIslands",
          "BasqueCountry",
          "CanaryIslands",
          "Cantabria",
          "CastileandLeon",
          "CastileLaMancha",
          "Catalonia",
          "Ceuta",
          "Extremadura",
          "Galicia",
          "LaRioja",
          "Madrid",
          "Melilla",
          "Murcia",
          "Navarra",
          "Valencia",
          "FranceNone",
          "Ain",
          "Aisne",
          "Allier",
          "AlpesDeHauteProvence",
          "HautesAlpes",
          "AlpesMaritimes",
          "Ardeche",
          "Ardennes",
          "Ariege",
          "Aube",
          "Aude",
          "Aveyron",
          "BouchesDuRhone",
          "Calvados",
          "Cantal",
          "Charente",
          "CharenteMaritime",
          "Cher",
          "Correze",
          "CorseDuSud",
          "HauteCorse",
          "CoteDOr",
          "CotesDArmor",
          "Creuse",
          "Dordogne",
          "Doubs",
          "Drome",
          "Eure",
          "EureEtLoir",
          "Finistere",
          "Gard",
          "HauteGaronne",
          "Gers",
          "Gironde",
          "Herault",
          "IlleEtVilaine",
          "Indre",
          "IndreEtLoire",
          "Isere",
          "Jura",
          "Landes",
          "LoirEtCher",
          "Loire",
          "HauteLoire",
          "LoireAtlantique",
          "Loiret",
          "Lot",
          "LotEtGaronne",
          "Lozere",
          "MaineEtLoire",
          "Manche",
          "Marne",
          "HauteMarne",
          "Mayenne",
          "MeurtheEtMoselle",
          "Meuse",
          "Morbihan",
          "Moselle",
          "Nievre",
          "Nord",
          "Oise",
          "Orne",
          "PasDeCalais",
          "PuyDeDome",
          "PyreneesAtlantiques",
          "HautesPyrenees",
          "PyreneesOrientales",
          "BasRhin",
          "HautRhin",
          "Rhone",
          "HauteSaone",
          "SaoneEtLoire",
          "Sarthe",
          "Savoie",
          "HauteSavoie",
          "Paris",
          "SeineMaritime",
          "SeineEtMarne",
          "Yvelines",
          "DeuxSevres",
          "Somme",
          "Tarn",
          "TarnEtGaronne",
          "Var",
          "Vaucluse",
          "Vendee",
          "Vienne",
          "HauteVienne",
          "Vosges",
          "Yonne",
          "TerritoireDeBelfort",
          "Essonne",
          "HautsDeSeine",
          "SeineSaintDenis",
          "ValDeMarne",
          "ValDOise",
          "Guadeloupe",
          "Martinique",
          "Guyane",
          "LaReunion",
          "Mayotte",
          "Carlow",
          "Cavan",
          "Clare",
          "Cork",
          "Donegal",
          "Dublin",
          "Galway",
          "Kerry",
          "Kildare",
          "Kilkenny",
          "Laois",
          "Leitrim",
          "Limerick",
          "LongFord",
          "Louth",
          "Mayo",
          "Meath",
          "Monaghan",
          "Offaly",
          "Roscommon",
          "Sligo",
          "Tipperary",
          "Waterford",
          "Westmeath",
          "Wexford",
          "Wicklow",
          "NewZealandNone"
        ],
        "type": "string",
        "description": "This type represents the state and province values that the Symbility API supports.\r\n\r\n**STATE VALUES â UNITED STATES**: Alabama, Alaska, Arizona, Arkansas, California, Colorado, Connecticut, Delaware, DistrictOfColumbia, \r\nFlorida, Georgia, Hawaii, Idaho, Illinois, Indiana, Iowa, Kansas, Kentucky, Louisiana, Maine, Maryland, Massachusetts, Michigan, Minnesota, \r\nMississippi, Missouri, Montana, Nebraska, Nevada, NewHampshire, NewJersey, NewMexico, NewYork, NorthCarolina, NorthDakota, Ohio, Oklahoma, \r\nOregon, Pennsylvania, PuertoRico, RhodeIsland, SouthCarolina, SouthDakota, Tennessee, Texas, Utah, Vermont, Virginia, Washington, WestVirginia, \r\nWisconsin, Wyoming, VirginIslands\r\n\r\n**PROVINCE VALUES â CANADA**: Alberta, BritishColumbia, Manitoba, NewBrunswick, Newfoundland, NorthwestTerritories, NovaScotia, Nunavut, \r\nOntario, PrinceEdwardIsland, Quebec, Saskatchewan, YukonTerritory\r\n\r\n**COUNTY VALUES â UNITED KINGDOM**: \r\n\r\n**General**: UnitedKingdomNone\r\n\r\n**England**: Bedfordshire, Berkshire, Buckinghamshire, Cambridgeshire, Cheshire, Cornwall, Cumberland, Derbyshire, Devon, Dorset, Durham,\r\nEastRidingOfYorkshire, Essex, Gloucestershire, Hampshire, Herefordshire, Hertfordshire, Huntingdonshire, IsleOfWight, Kent, Lancashire, \r\nLeicestershire, Lincolnshire, Middlesex, Norfolk, NorthRidingOfYorkshire, Northamptonshire, Northumberland, Nottinghamshire, Oxfordshire, \r\nRutland, Shropshire, Somerset, Staffordshire, Suffolk, Surrey, Sussex, Warwickshire, WestRidingOfYorkshire, Westmorland, Wiltshire, \r\nWorcestershire, Yorkshire, West Midlands\r\n\r\n**Northern Ireland**: Antrim, Armagh, Down, Fermanagh, Londonderry, Tyrone\r\n\r\n**Wales**: Anglesey, Breconshire, Caernarfonshire, Cardiganshire, Carmarthenshire, Denbighshire, Flintshire, Glamorgan, Merioneth, \r\nMonmouthshire, Montgomeryshire, Pembrokeshire, Radnorshire\r\n\r\n**Scotland**: Aberdeenshire, AngusForfarshire, Argyll, Ayrshire, Banffshire, Berwickshire, Bute, Caithness, Clackmannanshire, Dumfriesshire,\r\nDunbartonshire, EastLothian, Fife, InvernessShire, Kincardineshire, KinrossShire, Kirkcudbrightshire, Lanarkshire, Midloathian, Moray, \r\nNairnshire, Orkney, Peeblesshire, Perthshire, Renfrewshire, RossAndCromarty, Roxburghshire, Selkirkshire, Shetland, Stirlingshire, \r\nSutherland, WestLothian, Wigtownshire\r\n\r\n**PROVINCE VALUES â SOUTH AFRICA**: SouthAfricaNone, EasternCape, FreeState, Gauteng, KwaZuluNatal, Limpopo, Mpumalanga, NorthWest, NorthernCape, WesternCape\r\n\r\n**PROVINCE VALUES â GERMANY**: GermanyNone\r\n\r\n**COUNTY VALUES â AUSTRALIA**: AustralianCapitalTerritory, NewSouthWales, NorthenTerritory, Queensland, southAustralia, Tasmania, Victoria, Westernaustralia\r\n\r\n**PROVINCE VALUES â NETHERLANDS**: Drenthe, Flevoland, Friesland, Gelderland, Groningen, LimburgNE, NoordBrabant, NoordHolland, Overijssel, Utrecht, Zeeland, ZuidHolland\r\n\r\n**DISTRICT VALUES â LUXEMBOURG**: Diekirch, Grevenmacher, Luxembourg\r\n\r\n**PROVINCE VALUES â TURKEY**: Adana, Adiyaman, Afyonkarahisar, Agri, Aksaray, Amasya, Ankara, Antalya, Ardahan, Artvin, Aydin, Balikesir, \r\nBartin, Batman, Bayburt, Bilecik, Bingol, Bitlis, Bolu, Burdur, Bursa, Canakkale, Cankiri, Corum, Denizli, Diyarbakir, Duzce, Edirne, Elazig, \r\nErzincan, Erzurum, Eskisehir, Gaziantep, Giresum, Gumushane, Hakkari, Hatay, Igdir, Isparta, Istanbul, Izmir, Kahramanmaras, Karabuk, Karaman, \r\nKars, Kastamonu, Kayseri, Kilis, Kirikkale, Kirklareli, Kirsehir, Kocaeli, Konya, Kutahya, Malatya, Manisa, Mardin, Mersin, Mugla, Mus, Nevsehir, \r\nNigde, Ordu, Osmaniye, Rize, Sakarya, Samsun, Sanliurfa, Siirt, Sinop, Sirnak, Sivas, Tekirdag, Tokat, Trabzon, Tunceli, Usak, Van, Yalova, Yozgat, Zonguldak\r\n\r\n**PROVINCE VALUES â JAPAN**: Aichi, Akita, Aomori, Chiba, Ehime, Fukui, Fukushima, Gifu, Gumma, Hiroshima, Hokkaido, Hyogo, Ibaraki, Ishikawa,\r\nIwate, Kagawa, Kagoshima, Kanagawa, Kochi, Kumamoto, Kyoto, Mie, Miyagi, Miyazaki, Nagano, Nagasaki, Nara, Niigata, Oita, Okayama, Okinawa, Osaka, \r\nSaga, Saitama, Shiga, Shimane, Shizuoka, Tochigi, Tokushima, Tokyo, Tottori, Toyama, Wakayama, Yamagata, Yamaguchi, Yamanashi\r\n\r\n**PROVINCE VALUES â SPAIN**: Andalusia, Aragon, Asturias, BalearicIslands, BasqueCountry, CanaryIslands, Cantabria, CastileandLeon, CastileLaMancha, \r\nCatalonia, Ceuta, Extremadura, Galicia, LaRioja, Madrid, Melilla, Murcia, Navarra, Valencia, SpainNone\r\n\r\n**DEPARTMENT VALUES â FRANCE**: Ain, Aisne, Allier, AlpesDeHautProvence, HautesAlpes, AlpesMaritimes, Ardeche, Ardennes, Ariege, Aube, Aude, \r\nAveyron, BouchesDuRhone, Calvadaos, Cantal, Charente, CharentreMaritime, Cher, Correze, CorseDuSud, HauteCorse, CodeDor, CotesDArmor, Creuse, \r\nDordogne, Doubs, Drome, Eure, EureEtLoir, Finisete, Gard, HauteGaronne, Gers, Gironde, Herault, IlleEtVilaine, Indre, IndreEtLoire, Isere, Jura, \r\nLandes, LoirEtCher, Loire, HaureLoire, LoireAtlantique, Loiret, Lot, LotEtGaronne, Lozere, MaineEtLoire, Manche, Marne, HauteMare, Mayenne,\r\nMeurtheEtMoselle, Meuse, Morbihan, Moselle, Nievre, Nord, Oise, Orne, PasDeCalais, PuyDeDome, PyreneesAtlantiques, HautesPyrenees, PyreneesOrientales, \r\nBasRhin, HautRhin, Rhone, HaureSaone, SaoneEtLoire, Sarthe, Savoie, HauteSavoie, Paris, SeineMaritime, SeineEtMarne, Yvelines, DeuxSevres, Somme, Tarn, \r\nTarnEtGaronne, Var, Vaucluse, Vendee, Vienne, HauteVienne, Vosges, Yonne, TerritoireDeBelfort, Essonne, HautsDeSeine, SeineSaintDenis, ValDeMarne, ValDOise,\r\nGaudelope, Martinique, Guyane, LaReuinion, Mayotte, FranceNone\r\n\r\n**COUNTY VALUES â IRELAND**: Carlow, Cavan, Clarke, Cork, Donegal, Dublin, Galway, Kerry, Kildare, Kilkenny, Laois, Leitrim, Limerick, LongFord, \r\nLouth, Mayo, Meath, Monaghan, Offaly, Roscommon, Sligo, Tipperary, Waterford, Wastmeath, Wexford, Wicklow\r\n\r\n**STATE VALUES â POLAND**: Greater Poland, Holy Cross, Kuyavian-Pomerianian, Lesser Poland, LÃ³dz, Lower Silesian, Lublin, Lubusz, Masovian, Opole, \r\nPodlaskie, Pomerianian, Silesian, Subcarpathian, Warmiam-Masurian, West Pomeranian\r\n\r\n**COUNTY VALUES â BELGIUM**: Antwerpen, BelgiumNone, Crussels Hoofdstedlijk Gewest, Henegouwen, Limburg, Luik, Luxemburg, Namen, Oost-Vlaanderen, \r\nVlaams Brabant, Waals Brabant, West-Vlaanderen\r\n\r\n**STATE VALUES â NEW ZEALAND**: NewZealandNone\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "Country": {
        "enum": [
          "UnitedStates",
          "Canada",
          "UnitedKingdom",
          "France",
          "Germany",
          "SouthAfrica",
          "Australia",
          "Poland",
          "Belgium",
          "Netherlands",
          "Luxembourg",
          "Turkey",
          "Japan",
          "Spain",
          "Ireland",
          "NewZealand",
          "Unknown"
        ],
        "type": "string",
        "description": "This type represents the country values that the Symbility API supports.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "Address": {
        "required": [
          "Country",
          "State"
        ],
        "type": "object",
        "properties": {
          "Line1": {
            "maxLength": 200,
            "type": "string",
            "description": "The first line of the street address.",
            "nullable": true
          },
          "Line2": {
            "maxLength": 200,
            "type": "string",
            "description": "The second line of the street address.",
            "nullable": true
          },
          "City": {
            "maxLength": 60,
            "type": "string",
            "description": "The city.",
            "nullable": true
          },
          "State": {
            "allOf": [
              {
                "$ref": "#/components/schemas/State"
              }
            ],
            "description": "This type represents the state and province values that the Symbility API supports.\r\n\r\n**STATE VALUES â UNITED STATES**: Alabama, Alaska, Arizona, Arkansas, California, Colorado, Connecticut, Delaware, DistrictOfColumbia, \r\nFlorida, Georgia, Hawaii, Idaho, Illinois, Indiana, Iowa, Kansas, Kentucky, Louisiana, Maine, Maryland, Massachusetts, Michigan, Minnesota, \r\nMississippi, Missouri, Montana, Nebraska, Nevada, NewHampshire, NewJersey, NewMexico, NewYork, NorthCarolina, NorthDakota, Ohio, Oklahoma, \r\nOregon, Pennsylvania, PuertoRico, RhodeIsland, SouthCarolina, SouthDakota, Tennessee, Texas, Utah, Vermont, Virginia, Washington, WestVirginia, \r\nWisconsin, Wyoming, VirginIslands\r\n\r\n**PROVINCE VALUES â CANADA**: Alberta, BritishColumbia, Manitoba, NewBrunswick, Newfoundland, NorthwestTerritories, NovaScotia, Nunavut, \r\nOntario, PrinceEdwardIsland, Quebec, Saskatchewan, YukonTerritory\r\n\r\n**COUNTY VALUES â UNITED KINGDOM**: \r\n\r\n**General**: UnitedKingdomNone\r\n\r\n**England**: Bedfordshire, Berkshire, Buckinghamshire, Cambridgeshire, Cheshire, Cornwall, Cumberland, Derbyshire, Devon, Dorset, Durham,\r\nEastRidingOfYorkshire, Essex, Gloucestershire, Hampshire, Herefordshire, Hertfordshire, Huntingdonshire, IsleOfWight, Kent, Lancashire, \r\nLeicestershire, Lincolnshire, Middlesex, Norfolk, NorthRidingOfYorkshire, Northamptonshire, Northumberland, Nottinghamshire, Oxfordshire, \r\nRutland, Shropshire, Somerset, Staffordshire, Suffolk, Surrey, Sussex, Warwickshire, WestRidingOfYorkshire, Westmorland, Wiltshire, \r\nWorcestershire, Yorkshire, West Midlands\r\n\r\n**Northern Ireland**: Antrim, Armagh, Down, Fermanagh, Londonderry, Tyrone\r\n\r\n**Wales**: Anglesey, Breconshire, Caernarfonshire, Cardiganshire, Carmarthenshire, Denbighshire, Flintshire, Glamorgan, Merioneth, \r\nMonmouthshire, Montgomeryshire, Pembrokeshire, Radnorshire\r\n\r\n**Scotland**: Aberdeenshire, AngusForfarshire, Argyll, Ayrshire, Banffshire, Berwickshire, Bute, Caithness, Clackmannanshire, Dumfriesshire,\r\nDunbartonshire, EastLothian, Fife, InvernessShire, Kincardineshire, KinrossShire, Kirkcudbrightshire, Lanarkshire, Midloathian, Moray, \r\nNairnshire, Orkney, Peeblesshire, Perthshire, Renfrewshire, RossAndCromarty, Roxburghshire, Selkirkshire, Shetland, Stirlingshire, \r\nSutherland, WestLothian, Wigtownshire\r\n\r\n**PROVINCE VALUES â SOUTH AFRICA**: SouthAfricaNone, EasternCape, FreeState, Gauteng, KwaZuluNatal, Limpopo, Mpumalanga, NorthWest, NorthernCape, WesternCape\r\n\r\n**PROVINCE VALUES â GERMANY**: GermanyNone\r\n\r\n**COUNTY VALUES â AUSTRALIA**: AustralianCapitalTerritory, NewSouthWales, NorthenTerritory, Queensland, southAustralia, Tasmania, Victoria, Westernaustralia\r\n\r\n**PROVINCE VALUES â NETHERLANDS**: Drenthe, Flevoland, Friesland, Gelderland, Groningen, LimburgNE, NoordBrabant, NoordHolland, Overijssel, Utrecht, Zeeland, ZuidHolland\r\n\r\n**DISTRICT VALUES â LUXEMBOURG**: Diekirch, Grevenmacher, Luxembourg\r\n\r\n**PROVINCE VALUES â TURKEY**: Adana, Adiyaman, Afyonkarahisar, Agri, Aksaray, Amasya, Ankara, Antalya, Ardahan, Artvin, Aydin, Balikesir, \r\nBartin, Batman, Bayburt, Bilecik, Bingol, Bitlis, Bolu, Burdur, Bursa, Canakkale, Cankiri, Corum, Denizli, Diyarbakir, Duzce, Edirne, Elazig, \r\nErzincan, Erzurum, Eskisehir, Gaziantep, Giresum, Gumushane, Hakkari, Hatay, Igdir, Isparta, Istanbul, Izmir, Kahramanmaras, Karabuk, Karaman, \r\nKars, Kastamonu, Kayseri, Kilis, Kirikkale, Kirklareli, Kirsehir, Kocaeli, Konya, Kutahya, Malatya, Manisa, Mardin, Mersin, Mugla, Mus, Nevsehir, \r\nNigde, Ordu, Osmaniye, Rize, Sakarya, Samsun, Sanliurfa, Siirt, Sinop, Sirnak, Sivas, Tekirdag, Tokat, Trabzon, Tunceli, Usak, Van, Yalova, Yozgat, Zonguldak\r\n\r\n**PROVINCE VALUES â JAPAN**: Aichi, Akita, Aomori, Chiba, Ehime, Fukui, Fukushima, Gifu, Gumma, Hiroshima, Hokkaido, Hyogo, Ibaraki, Ishikawa,\r\nIwate, Kagawa, Kagoshima, Kanagawa, Kochi, Kumamoto, Kyoto, Mie, Miyagi, Miyazaki, Nagano, Nagasaki, Nara, Niigata, Oita, Okayama, Okinawa, Osaka, \r\nSaga, Saitama, Shiga, Shimane, Shizuoka, Tochigi, Tokushima, Tokyo, Tottori, Toyama, Wakayama, Yamagata, Yamaguchi, Yamanashi\r\n\r\n**PROVINCE VALUES â SPAIN**: Andalusia, Aragon, Asturias, BalearicIslands, BasqueCountry, CanaryIslands, Cantabria, CastileandLeon, CastileLaMancha, \r\nCatalonia, Ceuta, Extremadura, Galicia, LaRioja, Madrid, Melilla, Murcia, Navarra, Valencia, SpainNone\r\n\r\n**DEPARTMENT VALUES â FRANCE**: Ain, Aisne, Allier, AlpesDeHautProvence, HautesAlpes, AlpesMaritimes, Ardeche, Ardennes, Ariege, Aube, Aude, \r\nAveyron, BouchesDuRhone, Calvadaos, Cantal, Charente, CharentreMaritime, Cher, Correze, CorseDuSud, HauteCorse, CodeDor, CotesDArmor, Creuse, \r\nDordogne, Doubs, Drome, Eure, EureEtLoir, Finisete, Gard, HauteGaronne, Gers, Gironde, Herault, IlleEtVilaine, Indre, IndreEtLoire, Isere, Jura, \r\nLandes, LoirEtCher, Loire, HaureLoire, LoireAtlantique, Loiret, Lot, LotEtGaronne, Lozere, MaineEtLoire, Manche, Marne, HauteMare, Mayenne,\r\nMeurtheEtMoselle, Meuse, Morbihan, Moselle, Nievre, Nord, Oise, Orne, PasDeCalais, PuyDeDome, PyreneesAtlantiques, HautesPyrenees, PyreneesOrientales, \r\nBasRhin, HautRhin, Rhone, HaureSaone, SaoneEtLoire, Sarthe, Savoie, HauteSavoie, Paris, SeineMaritime, SeineEtMarne, Yvelines, DeuxSevres, Somme, Tarn, \r\nTarnEtGaronne, Var, Vaucluse, Vendee, Vienne, HauteVienne, Vosges, Yonne, TerritoireDeBelfort, Essonne, HautsDeSeine, SeineSaintDenis, ValDeMarne, ValDOise,\r\nGaudelope, Martinique, Guyane, LaReuinion, Mayotte, FranceNone\r\n\r\n**COUNTY VALUES â IRELAND**: Carlow, Cavan, Clarke, Cork, Donegal, Dublin, Galway, Kerry, Kildare, Kilkenny, Laois, Leitrim, Limerick, LongFord, \r\nLouth, Mayo, Meath, Monaghan, Offaly, Roscommon, Sligo, Tipperary, Waterford, Wastmeath, Wexford, Wicklow\r\n\r\n**STATE VALUES â POLAND**: Greater Poland, Holy Cross, Kuyavian-Pomerianian, Lesser Poland, LÃ³dz, Lower Silesian, Lublin, Lubusz, Masovian, Opole, \r\nPodlaskie, Pomerianian, Silesian, Subcarpathian, Warmiam-Masurian, West Pomeranian\r\n\r\n**COUNTY VALUES â BELGIUM**: Antwerpen, BelgiumNone, Crussels Hoofdstedlijk Gewest, Henegouwen, Limburg, Luik, Luxemburg, Namen, Oost-Vlaanderen, \r\nVlaams Brabant, Waals Brabant, West-Vlaanderen\r\n\r\n**STATE VALUES â NEW ZEALAND**: NewZealandNone\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "Country": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Country"
              }
            ],
            "description": "This type represents the country values that the Symbility API supports.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "ZipCode": {
            "maxLength": 30,
            "type": "string",
            "description": "The zip code or postal code.",
            "nullable": true
          },
          "Latitude": {
            "type": "number",
            "description": "The latitude of the address.",
            "format": "double",
            "nullable": true
          },
          "Longitude": {
            "type": "number",
            "description": "The longitude of the address.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents an address when using the Symbility API."
      },
      "UserGroup": {
        "enum": [
          "Administrator",
          "PowerUser",
          "Standard",
          "Junior",
          "Restricted",
          "Guest",
          "TechnicalAdmin",
          "Unknown",
          "StandardAnalytics",
          "Deployment",
          "SupplierManager",
          "ConfigurationAdmin",
          "ReadOnly",
          "ITHelpdesk",
          "OperationalManager",
          "StandardAdmin"
        ],
        "type": "string",
        "description": "This type represents the user group values that the Symbility API supports.\r\n\r\n**Administrator**: The user is an administrator.\r\n            \r\n**PowerUser**: The user is a power user.\r\n\r\n**Standard**: The user is a standard user.\r\n\r\n**Junior**: The user is a junior user.\r\n\r\n**Restricted**: The user is a restricted user.\r\n\r\n**Guest**: The user is a guest user.\r\n\r\n**TechnicalAdmin**: The user is a technical admin. \r\n\r\n**StandardAnalytics**: The user is a standard analytics / standard reports user.\r\n\r\n**Deployment**: The user is a deployment user.\r\n\r\n**SupplierManager**: The user is a supplier manager.\r\n\r\n**ConfigurationAdmin**: The user is a configuration admin.\r\n\r\n**ReadOnly**: The user is a read only user.\r\n\r\n**ITHelpdesk**: The user is an IT Helpdesk user.\r\n\r\n**OperationalManager**: The user is an operational manager.\r\n\r\n**StandardAdmin**: The user is a standard admin.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "ClaimUserRole": {
        "enum": [
          "Creator",
          "Participant",
          "GuestParticipant",
          "Assignee",
          "Unknown"
        ],
        "type": "string",
        "description": "This type represents the claim user role values that the Symbility API supports.\r\n\r\n**None**: The user has no role.\r\n\r\n**Creator**: The user is the creator of the claim.\r\n\r\n**Participant**: The user is participating in the claim.\r\n\r\n**GuestParticipant**: The user is a guest and is participating in the claim. \r\n\r\n**Assignee**: The user is an assignee in the claim.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "UserAssigneeStatus": {
        "enum": [
          "AcceptingAssignments",
          "NotAcceptingAssignments",
          "AcceptingOnlyManualAssignment",
          "Unknown"
        ],
        "type": "string",
        "description": "This type represents the user assignments status that the Symbility API supports.\r\n\r\n**AcceptingAssignments**: Assignment status set to \"accepting assignments\"\r\n\r\n**NotAcceptingAssignments**: Assignment status set to \"not accepting assignments\"\r\n\r\n**AcceptingOnlyManualAssignment**: Assignment status set to \"accepting only manual assignments\"\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "User": {
        "type": "object",
        "properties": {
          "LoginName": {
            "maxLength": 255,
            "type": "string",
            "description": "The login name of the user on Claims Connect.",
            "nullable": true
          },
          "Title": {
            "maxLength": 50,
            "type": "string",
            "description": "The title of the user (only applies to insured guest users).",
            "nullable": true
          },
          "FirstName": {
            "maxLength": 50,
            "type": "string",
            "description": "The first name of the user.",
            "nullable": true
          },
          "LastName": {
            "maxLength": 50,
            "type": "string",
            "description": "The last name of the user.",
            "nullable": true
          },
          "Email": {
            "maxLength": 255,
            "type": "string",
            "description": "The email address of the user.",
            "nullable": true
          },
          "UserGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserGroup"
              }
            ],
            "description": "This type represents the user group values that the Symbility API supports.\r\n\r\n**Administrator**: The user is an administrator.\r\n            \r\n**PowerUser**: The user is a power user.\r\n\r\n**Standard**: The user is a standard user.\r\n\r\n**Junior**: The user is a junior user.\r\n\r\n**Restricted**: The user is a restricted user.\r\n\r\n**Guest**: The user is a guest user.\r\n\r\n**TechnicalAdmin**: The user is a technical admin. \r\n\r\n**StandardAnalytics**: The user is a standard analytics / standard reports user.\r\n\r\n**Deployment**: The user is a deployment user.\r\n\r\n**SupplierManager**: The user is a supplier manager.\r\n\r\n**ConfigurationAdmin**: The user is a configuration admin.\r\n\r\n**ReadOnly**: The user is a read only user.\r\n\r\n**ITHelpdesk**: The user is an IT Helpdesk user.\r\n\r\n**OperationalManager**: The user is an operational manager.\r\n\r\n**StandardAdmin**: The user is a standard admin.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "Role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimUserRole"
              }
            ],
            "description": "This type represents the claim user role values that the Symbility API supports.\r\n\r\n**None**: The user has no role.\r\n\r\n**Creator**: The user is the creator of the claim.\r\n\r\n**Participant**: The user is participating in the claim.\r\n\r\n**GuestParticipant**: The user is a guest and is participating in the claim. \r\n\r\n**Assignee**: The user is an assignee in the claim.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "HeadOfficeCompanyID": {
            "maxLength": 11,
            "type": "string",
            "description": "The Symbility company ID of the head office.",
            "nullable": true
          },
          "CompanyID": {
            "maxLength": 11,
            "type": "string",
            "description": "The Symbility company ID.",
            "nullable": true
          },
          "ExternalSystemCompanyCode": {
            "maxLength": 20,
            "type": "string",
            "description": "The external system company code if defined in the API account.",
            "nullable": true
          },
          "CompanyName": {
            "maxLength": 255,
            "type": "string",
            "description": "The company/branch name the user belongs to.",
            "nullable": true
          },
          "UserRole": {
            "maxLength": 50,
            "type": "string",
            "description": "The specific role of the user as defined in the Claim Defaults and Claim Participants page in Claims Connect (for\r\nexample, \"Adjuster\", \"Supervisor\", \"Manager\", etc.).",
            "nullable": true
          },
          "Phone": {
            "maxLength": 40,
            "type": "string",
            "description": "The phone number of the user.",
            "nullable": true
          },
          "AssigneeStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserAssigneeStatus"
              }
            ],
            "description": "This type represents the user assignments status that the Symbility API supports.\r\n\r\n**AcceptingAssignments**: Assignment status set to \"accepting assignments\"\r\n\r\n**NotAcceptingAssignments**: Assignment status set to \"not accepting assignments\"\r\n\r\n**AcceptingOnlyManualAssignment**: Assignment status set to \"accepting only manual assignments\"\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          }
        },
        "additionalProperties": false,
        "description": "This type represents a user when using the Symbility API."
      },
      "Company": {
        "type": "object",
        "properties": {
          "CompanyType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CompanyType"
              }
            ],
            "description": "This type represents the company type values that the Symbility API supports.\r\n\r\n**InsuranceCompany**: The company is an insurance company.\r\n\r\n**IndependentAdjuster**: The company is an independent adjuster.\r\n\r\n**Contractor**: The company is a contractor.\r\n\r\n**IntermediaryClaimManagementCompany**: The company is an intermediary - claim management company.\r\n\r\n**IntermediaryContractorNetwork**: The company is an intermediary - contractor network.\r\n\r\n**IntermediaryIndependentAdjuster**: The company is an intermediary - independent adjuster.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "HeadOfficeCompanyID": {
            "maxLength": 11,
            "type": "string",
            "description": "The Symbility company ID of the head office.",
            "nullable": true
          },
          "CompanyID": {
            "maxLength": 11,
            "type": "string",
            "description": "The Symbility company ID.",
            "nullable": true
          },
          "ExternalSystemCompanyCode": {
            "maxLength": 20,
            "type": "string",
            "description": "The external system company code if defined in the API account.",
            "nullable": true
          },
          "CompanyName": {
            "maxLength": 255,
            "type": "string",
            "description": "The name of the company.",
            "nullable": true
          },
          "ContactFirstName": {
            "maxLength": 50,
            "type": "string",
            "description": "The first name of the company.",
            "nullable": true
          },
          "ContactLastName": {
            "maxLength": 50,
            "type": "string",
            "description": "The last name of the company.",
            "nullable": true
          },
          "Phone": {
            "maxLength": 40,
            "type": "string",
            "description": "The phone number of the company.",
            "nullable": true
          },
          "MobilePhone": {
            "maxLength": 40,
            "type": "string",
            "description": "The mobile phone number of the company.",
            "nullable": true
          },
          "Fax": {
            "maxLength": 50,
            "type": "string",
            "description": "The fax number of the company.",
            "nullable": true
          },
          "Email": {
            "maxLength": 255,
            "type": "string",
            "description": "The email address of the contact within the company.",
            "nullable": true
          },
          "Address": {
            "required": [
              "Country",
              "State"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "The address of the company.",
            "nullable": true
          },
          "Users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "description": "The users of the company.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents a company when using the Symbility API."
      },
      "CustomField": {
        "type": "object",
        "properties": {
          "Name": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the custom field.",
            "nullable": true
          },
          "Value": {
            "maxLength": 255,
            "type": "string",
            "description": "The value of the custom field.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents a CustomField when using the Symbility API.\r\n\r\nWhen getting the custom field values through the Symbility API, the values will always be returned in a string format\r\nfollowing the XML specifications for the basic data types.\r\n\r\nWhen setting custom field values, the same rule must be followed.\r\n\r\nFollowing is the list of custom field types supported by Claims Connect:\r\n\r\n**Checkbox**: The field is a boolean value.\r\nExamples: \"true\", \"false\"\r\n\r\n**Currency**: The field is a decimal value.\r\nExamples: \"-35.48\", \"1329.33\"\r\n\r\n**Date**: The field is a date value.\r\nExamples: \"2006-02-01\", \"2005-12-20\"\r\n\r\n**Decimal**: The field is a decimal value.\r\nExamples: \"-35.48\", \"1329.33\"\r\n\r\n**Integer**: The field is an integer value.\r\nExamples: \"342\", \"-5\"\r\n\r\n**List**: The field is a string value.\r\nExamples: \"List element 1\", \"List item 2\"\r\n\r\n**Percentage**: The field is a decimal value.\r\nExamples: \"0.5\" (50%), \"0.03\" (3%)\r\n\r\n**Time**: The field is a time value.\r\nExamples: \"13:30:00\", \"8:15:34\"\r\n\r\n**Date**: The field is a date value.\r\nExamples: \"2006-02-01\", \"2005-12-20\""
      },
      "ClaimAssignment": {
        "type": "object",
        "properties": {
          "AssignmentID": {
            "type": "integer",
            "description": "The identifier of the assignment.",
            "format": "int32"
          },
          "ParentAssignmentID": {
            "type": "integer",
            "description": "The identifier of the assignment from which the current assignment originated. The value will be 0 for originator\r\nassignments.",
            "format": "int32"
          },
          "Name": {
            "maxLength": 255,
            "type": "string",
            "description": "The type of the assignment.",
            "nullable": true
          },
          "FriendlyName": {
            "maxLength": 255,
            "type": "string",
            "description": "The name of the assignment.",
            "nullable": true
          },
          "AssignmentTypeCode": {
            "maxLength": 20,
            "type": "string",
            "description": "The code used for selecting the assignment type.",
            "nullable": true
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimAssignmentType"
              }
            ],
            "description": "This type represents the type of claim assignment.\r\n\r\n**Internal**: The claim assignment is to an internal user.\r\n\r\n**External**: The claim assignment is to another company."
          },
          "Status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimAssignmentStatus"
              }
            ],
            "description": "This type represents the claim assignment status values that the Symbility API supports.\r\n\r\n**None**: The claim is not assigned to a company.\r\n\r\n**AssignmentSent**: The claim assignment has been sent.\r\n\r\n**AssignmentReceived**: The claim assignment has been received.\r\n\r\n**InsuredContacted**: The insured has been contacted.\r\n\r\n**InspectionPerformed**: The inspection has been performed.\r\n\r\n**InspectionScheduled**: The inspection has been scheduled.\r\n\r\n**MitigationWorkStarted**: The mitigation work has started.\r\n\r\n**MitigationWorkCompleted**: The mitigation work has been completed.\r\n\r\n**EstimateReadyForReview**: One or many estimates have been marked Ready for Review.\r\n\r\n**EstimateCompleted**: One or many estimates have been completed.\r\n\r\n**EstimateApproved**: One or many estimates have been approved.\r\n\r\n**JobScheduled**: The job's start and completion dates have been scheduled.\r\n\r\n**JobNotSold**: The claim assignment has been marked Job Not Sold.\r\n\r\n**JobStarted**: The job has been started. \r\n\r\n**JobCompleted**: The job has been completed.\r\n\r\n**AssignmentCompleted**: The claim assignment has been completed.\r\n\r\n**AssignmentCancelled**: The claim assignment has been cancelled.\r\n\r\n**AssignmentDeclined**: The claim assignment has been declined.\r\n\r\n**AssignmentReopened**: The claim assignment has been reopened.\r\n\r\n**Multiple**: The claim has multiple claim assignment statuses.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "Notes": {
            "type": "string",
            "description": "Notes on the assignment.",
            "nullable": true
          },
          "AssignedBy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Company"
              }
            ],
            "description": "The company the claim was assigned by.",
            "nullable": true
          },
          "Assignee": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Company"
              }
            ],
            "description": "The company the claim is assigned to.",
            "nullable": true
          },
          "InternalAssignee": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "description": "The user the claim is assigned to.",
            "nullable": true
          },
          "AssignmentSentDate": {
            "type": "string",
            "description": "The date and time (UTC) the assignment was sent.",
            "format": "date-time",
            "nullable": true
          },
          "AssignmentReceivedDate": {
            "type": "string",
            "description": "The date and time (UTC) the assignment was received.",
            "format": "date-time",
            "nullable": true
          },
          "InsuredContactedDate": {
            "type": "string",
            "description": "The date and time (UTC) the insured was contacted as recorded by the system.",
            "format": "date-time",
            "nullable": true
          },
          "InsuredContactedUserDate": {
            "type": "string",
            "description": "The date and time (UTC) the insured was contacted as entered by the user.",
            "format": "date-time",
            "nullable": true
          },
          "InspectionScheduledDate": {
            "type": "string",
            "description": "The date and time (UTC) the inspection was scheduled as recorded by the system.",
            "format": "date-time",
            "nullable": true
          },
          "InspectionScheduledUserDate": {
            "type": "string",
            "description": "The date and time (UTC) the inspection was scheduled as entered by the user.",
            "format": "date-time",
            "nullable": true
          },
          "InspectionAppointmentDate": {
            "type": "string",
            "description": "The date and time (UTC) when the inspection is going to be done.",
            "format": "date-time",
            "nullable": true
          },
          "InspectionPerformedDate": {
            "type": "string",
            "description": "The date and time (UTC) the inspection was performed as recorded by the system.",
            "format": "date-time",
            "nullable": true
          },
          "InspectionPerformedUserDate": {
            "type": "string",
            "description": "The date and time (UTC) the inspection was performed as entered by the user.",
            "format": "date-time",
            "nullable": true
          },
          "MitigationWorkStartedDate": {
            "type": "string",
            "description": "The date and time (UTC) the mitigation work was started as recorded by the system.",
            "format": "date-time",
            "nullable": true
          },
          "MitigationWorkStartedUserDate": {
            "type": "string",
            "description": "The date and time (UTC) the mitigation work was started as entered by the user.",
            "format": "date-time",
            "nullable": true
          },
          "MitigationWorkCompletedDate": {
            "type": "string",
            "description": "The date and time (UTC) the mitigation work was completed as entered by the system.",
            "format": "date-time",
            "nullable": true
          },
          "MitigationWorkCompletedUserDate": {
            "type": "string",
            "description": "The date and time (UTC) the mitigation work was completed as recorded by user.",
            "format": "date-time",
            "nullable": true
          },
          "EstimateReadyForReviewDate": {
            "type": "string",
            "description": "The date and time (UTC) the estimate was marked as ready for review.",
            "format": "date-time",
            "nullable": true
          },
          "EstimateCompletedDate": {
            "type": "string",
            "description": "The date and time (UTC) the estimate was completed.",
            "format": "date-time",
            "nullable": true
          },
          "EstimateApprovedDate": {
            "type": "string",
            "description": "The date and time (UTC) the estimate was approved.",
            "format": "date-time",
            "nullable": true
          },
          "JobScheduledDate": {
            "type": "string",
            "description": "The date and time (UTC) the job was scheduled as recorded by the system.",
            "format": "date-time",
            "nullable": true
          },
          "JobScheduledUserDate": {
            "type": "string",
            "description": "The date and time (UTC) the job was scheduled as recorded by the user.",
            "format": "date-time",
            "nullable": true
          },
          "JobNotSoldDate": {
            "type": "string",
            "description": "The date and time (UTC) the assignment was marked Job Not Sold.",
            "format": "date-time",
            "nullable": true
          },
          "JobStartedDate": {
            "type": "string",
            "description": "The date and time (UTC) the job was started.",
            "format": "date-time",
            "nullable": true
          },
          "JobStartedUserDate": {
            "type": "string",
            "description": "The date and time (UTC) the job was started as entered by the user.",
            "format": "date-time",
            "nullable": true
          },
          "JobCompletedDate": {
            "type": "string",
            "description": "The date and time (UTC) the job was completed.",
            "format": "date-time",
            "nullable": true
          },
          "JobCompletedUserDate": {
            "type": "string",
            "description": "The date and time (UTC) job was completed as entered by the user.",
            "format": "date-time",
            "nullable": true
          },
          "JobScheduledJobStartDate": {
            "type": "string",
            "description": "The date and time (UTC) the job was scheduled to start.",
            "format": "date-time",
            "nullable": true
          },
          "JobScheduledJobCompleteDate": {
            "type": "string",
            "description": "The date and time (UTC) the job was scheduled to complete.",
            "format": "date-time",
            "nullable": true
          },
          "AssignmentCompletedDate": {
            "type": "string",
            "description": "The date and time (UTC) the assignment was completed.",
            "format": "date-time",
            "nullable": true
          },
          "AssignmentCancelledDate": {
            "type": "string",
            "description": "The date and time (UTC) the assignment was cancelled.",
            "format": "date-time",
            "nullable": true
          },
          "AssignmentReopenedDate": {
            "type": "string",
            "description": "The date and time (UTC) the assignment was reopened.",
            "format": "date-time",
            "nullable": true
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            },
            "description": "Assignments custom fields",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents a claim assignment in the Symbility API."
      },
      "ResultDetailLevel": {
        "enum": [
          "Warning",
          "Error"
        ],
        "type": "string"
      },
      "ResultDetailCategory": {
        "enum": [
          "Authentication",
          "Lookup",
          "Miscellaneous",
          "Validation",
          "Unspecified"
        ],
        "type": "string"
      },
      "ResultDetail": {
        "type": "object",
        "properties": {
          "Level": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResultDetailLevel"
              }
            ],
            "description": "The level of the result detail."
          },
          "Category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResultDetailCategory"
              }
            ],
            "description": "The category of the result detail."
          },
          "Number": {
            "type": "integer",
            "description": "The error/warning number associated with this result detail (see the [list of error codes](#tag/Error-Codes) for possible values).",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "String representation of the error/warning number (see the [list of error codes](#tag/Error-Codes) for possible values).",
            "nullable": true
          },
          "Message": {
            "type": "string",
            "description": "The error/warning message text describing in detail the issue.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents a result detail when using the Symbility API."
      },
      "DiagramOptions": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/DiagramOptionsFlags"
        }
      },
      "DiagramType": {
        "enum": [
          "FloorPlan",
          "RoofPlan",
          "ExteriorPlan",
          "Unknown"
        ],
        "type": "string",
        "description": "This type represents the diagram type values that the Symbility API supports.\r\n\r\n**FloorPlan**: The diagram is a floor plan.\r\n\r\n**RoofPlan**: The diagram is a roof plan.\r\n\r\n**ExteriorPlan**: The diagram is an exterior plan.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "DiagramObjectType": {
        "enum": [
          "Room",
          "Roof",
          "GeneralItems",
          "ExteriorPlan",
          "Unknown",
          "Staircase",
          "PartialRoom"
        ],
        "type": "string",
        "description": "This type represents the diagram object type values that the Symbility API supports.\r\n\r\n**Room**: The diagram object is a room.\r\n\r\n**Roof**: The diagram object is a roof.\r\n\r\n**GeneralItems**: The diagram object is a general items box.\r\n\r\n**ExteriorPlan**: The diagram object is an exterior plan.\r\n\r\n**Staircase**: The diagram object is a staircase.\r\n\r\n**PartialRoom**: The diagram object is a partial room.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "DiagramObject": {
        "type": "object",
        "properties": {
          "DiagramID": {
            "type": "integer",
            "description": "The ID of the parent diagram.",
            "format": "int32"
          },
          "DiagramObjectID": {
            "type": "integer",
            "description": "The identifier of the diagram object.",
            "format": "int32"
          },
          "Name": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the diagram object.",
            "nullable": true
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DiagramObjectType"
              }
            ],
            "description": "This type represents the diagram object type values that the Symbility API supports.\r\n\r\n**Room**: The diagram object is a room.\r\n\r\n**Roof**: The diagram object is a roof.\r\n\r\n**GeneralItems**: The diagram object is a general items box.\r\n\r\n**ExteriorPlan**: The diagram object is an exterior plan.\r\n\r\n**Staircase**: The diagram object is a staircase.\r\n\r\n**PartialRoom**: The diagram object is a partial room.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          }
        },
        "additionalProperties": false,
        "description": "This type represents a diagram object when using the Symbility API.\r\n\r\nA diagram object is a diagram element to which estimate items can be linked to (ex: a room, a roof, a general items\r\nbox)."
      },
      "Diagram": {
        "type": "object",
        "properties": {
          "DiagramID": {
            "type": "integer",
            "description": "The identifier of the diagram.",
            "format": "int32"
          },
          "ParentDiagramID": {
            "type": "integer",
            "description": "The identifier of the parent diagram (if value is different than 0, indicates that the parent diagram is locked).",
            "format": "int32"
          },
          "AssignmentID": {
            "type": "integer",
            "description": "The identifier of the claim assignment.",
            "format": "int32"
          },
          "AuthorHeadOfficeCompanyID": {
            "maxLength": 11,
            "type": "string",
            "description": "The Symbility company ID of the head office of the author of the diagram.",
            "nullable": true
          },
          "AuthorCompanyID": {
            "maxLength": 11,
            "type": "string",
            "description": "The Symbility company ID of the author of the diagram.",
            "nullable": true
          },
          "AuthorExternalSystemCompanyCode": {
            "maxLength": 20,
            "type": "string",
            "description": "The external system company code of the author if defined in the API account.",
            "nullable": true
          },
          "AuthorCompanyName": {
            "maxLength": 255,
            "type": "string",
            "description": "The company name of the author of the diagram.",
            "nullable": true
          },
          "Name": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the diagram.",
            "nullable": true
          },
          "Options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DiagramOptions"
              }
            ],
            "description": "This type represents the diagram options that the Symbility API supports. \r\nThis is a bit field, a set of flags, the DiagramOptions can be one or more of the following values.\r\n\r\n**Locked**: The diagram is locked.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DiagramType"
              }
            ],
            "description": "This type represents the diagram type values that the Symbility API supports.\r\n\r\n**FloorPlan**: The diagram is a floor plan.\r\n\r\n**RoofPlan**: The diagram is a roof plan.\r\n\r\n**ExteriorPlan**: The diagram is an exterior plan.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "DiagramObjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiagramObject"
            },
            "description": "The list of objects in the diagram.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents a diagram when using the Symbility API."
      },
      "EstimateStatus": {
        "enum": [
          "InProgress",
          "Completed",
          "Approved",
          "ReadyForReview",
          "RejectedReview",
          "RejectedApproval",
          "Unknown",
          "Cancelled"
        ],
        "type": "string",
        "description": "This type represents the estimate status values that the Symbility API supports.\r\n\r\n**InProgress**: The estimate is in progress.\r\n\r\n**ReadyForReview**: The estimate is ready for review.\r\n\r\n**RejectedReview**: The estimate has been rejected (review).\r\n\r\n**Completed**: The estimate has been completed.\r\n\r\n**RejectedApproval**: The estimate has been rejected (approval).\r\n\r\n**Approved**: The estimate has been approved. \r\n\r\n**Cancelled**: The estimate has been cancelled.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "EstimateOptions": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/EstimateOptionsFlags"
        }
      },
      "ClaimMinimumChargeType": {
        "enum": [
          "MinimumChargeOnTotal",
          "MinimumChargePerComponentUpToTotal",
          "MinimumChargePerComponent"
        ],
        "type": "string",
        "description": "This type represents the types of claim minimum charge that the Symbility API supports.\r\n\r\n**MinimumChargeOnTotal**: The minimum charge is based on the sum of all component costs.\r\n\r\n**MinimumChargePerComponentUpToTotal**: The minimum charge is based on individual components not meeting their \r\ncomponent minimum charge, up to the minimum charge total.\r\n\r\n**MinimumChargePerComponent**: The minimum charge is based on individual components not meeting their component minimum charge."
      },
      "ClaimMinimumCharge": {
        "type": "object",
        "properties": {
          "UseMinimumChargeAdjustments": {
            "type": "boolean",
            "description": "True to use adjustments for minimum charges.",
            "default": true
          },
          "MinimumChargeType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimMinimumChargeType"
              }
            ],
            "description": "This type represents the types of claim minimum charge that the Symbility API supports.\r\n\r\n**MinimumChargeOnTotal**: The minimum charge is based on the sum of all component costs.\r\n\r\n**MinimumChargePerComponentUpToTotal**: The minimum charge is based on individual components not meeting their \r\ncomponent minimum charge, up to the minimum charge total.\r\n\r\n**MinimumChargePerComponent**: The minimum charge is based on individual components not meeting their component minimum charge."
          },
          "ApplyOverheadAndProfitToMinimumCharge": {
            "type": "boolean",
            "description": "True if overhead and profit are calculated on minimum charge adjustments.",
            "default": true
          },
          "ApplyTaxesToMinimumCharge": {
            "type": "boolean",
            "description": "True if taxes are calculated on minimum charge adjustments.",
            "default": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents the claim minimum charge info when using the Symbility API."
      },
      "ClaimTaxInfo": {
        "type": "object",
        "properties": {
          "UseTax1": {
            "type": "boolean",
            "description": "True if Tax1 is applied to the claim.",
            "default": false
          },
          "Tax1Name": {
            "maxLength": 30,
            "type": "string",
            "description": "The name of Tax1.",
            "nullable": true
          },
          "ApplyTax1ToMaterials": {
            "type": "boolean",
            "description": "True if Tax1 should be applied to materials.",
            "default": true
          },
          "ApplyTax1ToLabor": {
            "type": "boolean",
            "description": "True if Tax1 should be applied to labor.",
            "default": true
          },
          "ApplyTax1ToEquipment": {
            "type": "boolean",
            "description": "True if Tax1 should be applied to equipment.",
            "default": true
          },
          "ApplyTax1ToMarketConditions": {
            "type": "boolean",
            "description": "True if Tax1 should be applied to market conditions.",
            "default": true
          },
          "ApplyTax1ToOverheadAndProfit": {
            "type": "boolean",
            "description": "True if Tax1 should be applied to market conditions.",
            "default": true
          },
          "IsTax1OverriddenForSomeItems": {
            "type": "boolean",
            "description": "True if Tax1 applicability is overridden for some items in the estimate",
            "nullable": true
          },
          "UseTax2": {
            "type": "boolean",
            "description": "True if Tax2 is applied to the claim.",
            "default": false
          },
          "Tax2Name": {
            "maxLength": 30,
            "type": "string",
            "description": "The name of Tax2.",
            "nullable": true
          },
          "ApplyTax2ToMaterials": {
            "type": "boolean",
            "description": "True if Tax2 should be applied to materials.",
            "default": true
          },
          "ApplyTax2ToLabor": {
            "type": "boolean",
            "description": "True if Tax2 should be applied to labor.",
            "default": true
          },
          "ApplyTax2ToEquipment": {
            "type": "boolean",
            "description": "True if Tax2 should be applied to equipment.",
            "default": true
          },
          "ApplyTax2ToMarketConditions": {
            "type": "boolean",
            "description": "True if Tax2 should be applied to market conditions.",
            "default": true
          },
          "ApplyTax2ToOverheadAndProfit": {
            "type": "boolean",
            "description": "True if Tax2 should be applied to overhead and profit.",
            "default": true
          },
          "IsTax2OverriddenForSomeItems": {
            "type": "boolean",
            "description": "True if Tax2 applicability is overridden for some items in the estimate",
            "nullable": true
          },
          "UseTax3": {
            "type": "boolean",
            "description": "True if Tax3 is applied to the claim.",
            "default": false
          },
          "Tax3Name": {
            "maxLength": 30,
            "type": "string",
            "description": "The name of Tax3.",
            "nullable": true
          },
          "ApplyTax3ToMaterials": {
            "type": "boolean",
            "description": "True if Tax3 should be applied to materials.",
            "default": true
          },
          "ApplyTax3ToLabor": {
            "type": "boolean",
            "description": "True if Tax3 should be applied to labor.",
            "default": true
          },
          "ApplyTax3ToEquipment": {
            "type": "boolean",
            "description": "True if Tax3 should be applied to equipment.",
            "default": true
          },
          "ApplyTax3ToMarketConditions": {
            "type": "boolean",
            "description": "True if Tax3 should be applied to market conditions.",
            "default": true
          },
          "ApplyTax3ToOverheadAndProfit": {
            "type": "boolean",
            "description": "True if Tax3 should be applied to overhead and profit.",
            "default": true
          },
          "IsTax3OverriddenForSomeItems": {
            "type": "boolean",
            "description": "True if Tax3 applicability is overridden for some items in the estimate",
            "nullable": true
          },
          "UseTax4": {
            "type": "boolean",
            "description": "True if Tax4 is applied to the claim.",
            "default": false
          },
          "Tax4Name": {
            "maxLength": 30,
            "type": "string",
            "description": "The name of Tax4.",
            "nullable": true
          },
          "ApplyTax4ToMaterials": {
            "type": "boolean",
            "description": "True if Tax4 should be applied to materials.",
            "default": true
          },
          "ApplyTax4ToLabor": {
            "type": "boolean",
            "description": "True if Tax4 should be applied to labor.",
            "default": true
          },
          "ApplyTax4ToEquipment": {
            "type": "boolean",
            "description": "True if Tax4 should be applied to equipment.",
            "default": true
          },
          "ApplyTax4ToMarketConditions": {
            "type": "boolean",
            "description": "True if Tax4 should be applied to market conditions.",
            "default": true
          },
          "ApplyTax4ToOverheadAndProfit": {
            "type": "boolean",
            "description": "True if Tax4 should be applied to overhead and profit.",
            "default": true
          },
          "IsTax4OverriddenForSomeItems": {
            "type": "boolean",
            "description": "True if Tax4 applicability is overridden for some items in the estimate",
            "nullable": true
          },
          "CumulativeTaxes": {
            "type": "boolean",
            "description": "True if Tax2 is calculated including the Tax1 total (cumulative taxes is possible when only two taxes are specified).",
            "default": true
          },
          "Tax1Rate": {
            "type": "number",
            "description": "The Tax1 percentage applied to the claim.",
            "format": "decimal",
            "nullable": true
          },
          "Tax2Rate": {
            "type": "number",
            "description": "The Tax2 percentage applied to the claim.",
            "format": "decimal",
            "nullable": true
          },
          "Tax3Rate": {
            "type": "number",
            "description": "The Tax3 percentage applied to the claim.",
            "format": "decimal",
            "nullable": true
          },
          "Tax4Rate": {
            "type": "number",
            "description": "The Tax4 percentage applied to the claim.",
            "format": "decimal",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents the claim tax info when using the Symbility API."
      },
      "ClaimOverheadAndProfitInfo": {
        "type": "object",
        "properties": {
          "CumulativeOverheadProfit": {
            "type": "boolean",
            "description": "True if the profit is calculated including the overhead total.",
            "default": true
          },
          "CalculateOverheadProfitOnTotalCost": {
            "type": "boolean",
            "description": "True if the overhead and profit are calculated on the total cost; false if they are calculated on the actual cash value\r\n(total cost  depreciation)",
            "default": true
          },
          "OverheadRate": {
            "type": "number",
            "description": "The overhead percentage applied to the claim.",
            "format": "decimal",
            "nullable": true
          },
          "ProfitRate": {
            "type": "number",
            "description": "The profit percentage applied to the claim.",
            "format": "decimal",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents the claim overhead and profit info when using the Symbility API."
      },
      "EstimateSubcoverage": {
        "type": "object",
        "properties": {
          "ClaimSubcoverageID": {
            "type": "integer",
            "description": "The identifier of the subcoverage.",
            "format": "int32"
          },
          "ReplacementCost": {
            "type": "number",
            "description": "The replacement cost amount of the subcoverage.",
            "format": "decimal"
          },
          "TotalRecoverableDepreciation": {
            "type": "number",
            "description": "The total recoverable depreciation amount for the subcoverage.",
            "format": "decimal"
          },
          "TotalNonRecoverableDepreciation": {
            "type": "number",
            "description": "The total non-recoverable depreciation amount for the subcoverage.",
            "format": "decimal"
          },
          "Deductible": {
            "type": "number",
            "description": "The deductible in total cost mode. (currency).",
            "format": "decimal"
          },
          "DeductibleActualCashValue": {
            "type": "number",
            "description": "The deductible amount (ACV) applied to the subcoverage.",
            "format": "decimal"
          },
          "AmountPayableReplacementCost": {
            "type": "number",
            "description": "The amount payable in total cost mode. (currency).",
            "format": "decimal"
          },
          "AmountPayableActualCashValue": {
            "type": "number",
            "description": "The amount payable (ACV) for the subcoverage.",
            "format": "decimal"
          },
          "AdditionalDeductibleIfDepreciationRecovered": {
            "type": "number",
            "description": "The additional deductible amount for the subcoverage if the depreciation is recovered.",
            "format": "decimal"
          },
          "AmountPayableIfDepreciationRecovered": {
            "type": "number",
            "description": "The amount payable for the subcoverage if the depreciation is recovered.",
            "format": "decimal"
          }
        },
        "additionalProperties": false,
        "description": "This type represents an estimate subcoverage when using the Symbility API."
      },
      "EstimateCoverage": {
        "type": "object",
        "properties": {
          "ClaimCoverageID": {
            "type": "integer",
            "description": "The identifier of the claim coverage.",
            "format": "int32"
          },
          "ReplacementCost": {
            "type": "number",
            "description": "The replacement cost amount of the coverage (currency).",
            "format": "decimal"
          },
          "TotalRecoverableDepreciation": {
            "type": "number",
            "description": "The total recoverable depreciation amount for the coverage (currency).",
            "format": "decimal"
          },
          "TotalNonRecoverableDepreciation": {
            "type": "number",
            "description": "The total non-recoverable depreciation amount for the coverage (currency).",
            "format": "decimal"
          },
          "Deductible": {
            "type": "number",
            "description": "The deductible in total cost mode. (currency).",
            "format": "decimal"
          },
          "DeductibleActualCashValue": {
            "type": "number",
            "description": "The deductible amount (ACV) applied to the coverage (currency).",
            "format": "decimal"
          },
          "AmountPayableReplacementCost": {
            "type": "number",
            "description": "The amount payable in total cost mode. (currency).",
            "format": "decimal"
          },
          "AmountPayableActualCashValue": {
            "type": "number",
            "description": "The amount payable (ACV) for the coverage (currency).",
            "format": "decimal"
          },
          "AdditionalDeductibleIfDepreciationRecovered": {
            "type": "number",
            "description": "The additional deductible amount for the coverage if the depreciation is recovered (currency).",
            "format": "decimal"
          },
          "AmountPayableIfDepreciationRecovered": {
            "type": "number",
            "description": "The amount payable for the coverage if the depreciation is recovered (currency).",
            "format": "decimal"
          },
          "Subcoverages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EstimateSubcoverage"
            },
            "description": "The list of subcoverages for the current coverage.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents an estimate coverage when using the Symbility API."
      },
      "EstimateFinalizationStatus": {
        "enum": [
          "None",
          "CashSettled",
          "Invoiced",
          "Unknown"
        ],
        "type": "string",
        "description": "This type represents the available status of the estimate finalization in the Symbility API.\r\n\r\n**None**: The estimate has not been finalized yet.\r\n\r\n**CashSettled**: The estimate was settled by cash.\r\n\r\n**Invoiced**: The estimate was invoiced.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "EstimateItemLineType": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/EstimateItemLineTypeFlags"
        }
      },
      "EstimateItemSupplementType": {
        "enum": [
          "None",
          "Credit",
          "Supplement"
        ],
        "type": "string"
      },
      "ItemUnitOfMeasure": {
        "enum": [
          "SquareFoot",
          "LinearFoot",
          "SquareYard",
          "Each",
          "Hour",
          "CubicInch",
          "CubicYard",
          "CubicFoot",
          "Day",
          "Week",
          "Gallon",
          "Pair",
          "Roll",
          "Room",
          "Load",
          "LinearInch",
          "Ton",
          "Square",
          "SquareInch",
          "Mile",
          "Bag",
          "SRoll",
          "Section",
          "Set",
          "Sheet",
          "VerticalLinearFoot",
          "DoubleRoll",
          "Bolt",
          "Box",
          "Bundle",
          "BoardFeet",
          "Piece",
          "Minute",
          "Percentage",
          "Acre",
          "OneHundred",
          "LinearFeet100",
          "SquareFeet100",
          "Pound",
          "LumpSum",
          "OneThousand",
          "BoardFeet1000",
          "LinearFeet1000",
          "Month",
          "SquareFeet1000",
          "Pack",
          "SquareFootFormContactConcrete",
          "LinearCentimeter",
          "LinearMeter",
          "LinearKilometer",
          "SquareCentimeter",
          "SquareMeter",
          "CubicMeter",
          "LinearMillimeter",
          "Number",
          "Sum",
          "Tsubo",
          "Shakutsubo",
          "Kilogram",
          "Gram",
          "Milliliter",
          "Liter",
          "CubicCentimeter",
          "CubicDecimeter",
          "TatamiMat",
          "PintsPerDay",
          "LitersPerDay",
          "CubicFeetPerMinute",
          "CubicMetersPerHour",
          "SquareMeterXWeek",
          "PieceXWeek",
          "KiloWattHour",
          "MeterPerWeek",
          "PiecePerDay",
          "Unknown"
        ],
        "type": "string",
        "description": "This type represents the unit of measures that the Symbility API supports.\r\n\r\n**Basic values**: SquareFoot, LinearFoot, SquareYard, Each, Hour, CubicInch, CubicYard, CubicFoot, Day, Week, \r\nGallon, Pair, Roll, Room, Load, LinearInch, Ton, Square, SquareInch, Mile\r\n\r\n**Grouping values**: Bag, Sroll, Section, Set, Sheet, VerticalLinearFoot, DoubleRoll, Bolt, Box, Bundle, BoardFeet, Piece\\*, Minute\\*\r\n\r\n**Commercial values**: Percentage, Acre, OneHundred, LinearFeet100, SquareFeet100, Pound, LumpSum, OneThousand, BoardFeet100, LinearFeet100, \r\nMonth, SquareFeet100, Pack, SquareFootFormContactConcrete\r\n\r\n**Metric values**: LinearCentimeter, LinearMeter, LinearKilometer, SquareCentimeter, SquareMeter, CubicMeter, LinearMillimeter\r\n\r\n**Other values**: Number, Sum, TatamiMat, PintsPerDay, LitersPerDay, CubicFeetPerMinute, CubicMetersPerHour, SquareMeterXWeek, PieceXWeek, \r\nKiloWattHour, MeterPerWeek, PiecePerDay\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "ItemDepreciationType": {
        "enum": [
          "None",
          "Fixed",
          "PerYear",
          "Flat",
          "LifeExpectancy",
          "Unknown"
        ],
        "type": "string",
        "description": "This type represents the item depreciation type values that the Symbility API supports.\r\n\r\n**None**: No depreciation is calculated for the item.\r\n\r\n**Fixed**: The depreciation is calculated based on a fixed % of the item total.\r\n\r\n**PerYear**: The depreciation is calculated as a per year percentage.\r\n\r\n**Flat**: The depreciation is a flat amount.\r\n\r\n**LifeExpectancy**: The depreciation is calculated based on the useful life and current age of the item.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "ItemDepreciationUsage": {
        "enum": [
          "None",
          "New",
          "Light",
          "Normal",
          "Heavy",
          "Unknown"
        ],
        "type": "string",
        "description": "This type represents the condition of an estimate item which will be affecting its depreciation.\r\n\r\n**None**: Will be returned for older claims.\r\n\r\n**New**: The item is in a brand new condition.\r\n\r\n**Light**: The item has an above average condition.\r\n\r\n**Normal**: The item has an average condition.\r\n\r\n**Heavy**: The item has a below average condition.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "EstimateItemDepreciation": {
        "type": "object",
        "properties": {
          "DepreciationType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemDepreciationType"
              }
            ],
            "description": "The type of the depreciation of the estimate item.  When updating an item, the property is not updated if not specified.",
            "nullable": true
          },
          "DepreciationAge": {
            "type": "number",
            "description": "The age of the item in years.  Only used if DepreciationType is PerYear or LifeExpectancy.  When updating an item, the property is not updated if not specified.",
            "format": "decimal",
            "nullable": true
          },
          "DepreciationUsage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemDepreciationUsage"
              }
            ],
            "description": "The usage condition of the estimate item.  When updating an item, the property is not updated if not specified.",
            "nullable": true
          },
          "DepreciationFirstYear": {
            "type": "number",
            "description": "The first year depreciation %.  Only used if DepreciationType is PerYear.  When updating an item, the property is not updated if not specified.",
            "format": "decimal",
            "nullable": true
          },
          "DepreciationAdditionalYear": {
            "type": "number",
            "description": "The additional year depreciation %.  Only used if DepreciationType is PerYear.  When updating an item, the property is not updated if not specified.",
            "format": "decimal",
            "nullable": true
          },
          "DepreciationMaximum": {
            "type": "number",
            "description": "The maximum depreciation %.  Only used if DepreciationType is PerYear or LifeExpectancy.  When updating an item, the property is not updated if not specified.",
            "format": "decimal",
            "nullable": true
          },
          "DepreciationUsefulLife": {
            "type": "number",
            "description": "The useful life of the item in years.  Only used if DepreciationType is LifeExpectancy.  When updating an item, the property is not updated if not specified.",
            "format": "decimal",
            "nullable": true
          },
          "DepreciationFlat": {
            "type": "number",
            "description": "The depreciation amount.  Only used if DepreciationType is Flat. When updating an item, the property is not updated if not specified.",
            "format": "decimal",
            "nullable": true
          },
          "DepreciationFixed": {
            "type": "number",
            "description": "The depreciation %.  Only used if DepreciationType is Fixed.  When updating an item, the property is not updated if not specified.",
            "format": "decimal",
            "nullable": true
          },
          "RecoverableDepreciation": {
            "type": "boolean",
            "description": "True if the depreciation is recoverable.  When updating an item, the property is not updated if not specified.",
            "nullable": true
          },
          "ApplyDepreciationToUnitPrice": {
            "type": "boolean",
            "description": "True if the depreciation is applied to the unit price.  When updating an item, the property is not updated if not specified.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents estimate item depreciation when using the Symbility API."
      },
      "ItemLink": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ItemLinkFlags"
        }
      },
      "ItemLink2": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ItemLink2Flags"
        }
      },
      "EstimateItemContents": {
        "type": "object",
        "properties": {
          "Description": {
            "maxLength": 255,
            "type": "string",
            "description": "The description of the lost/damaged item.  When updating an item, the property is not updated if not specified.",
            "nullable": true
          },
          "PurchaseDate": {
            "type": "string",
            "description": "The date the lost/damaged item was purchased.  When updating an item, the property is not updated if not specified.",
            "format": "date-time",
            "nullable": true
          },
          "PurchaseCost": {
            "type": "number",
            "description": "The price of the lost/damaged item at the time of purchase.  When updating an item, the property is not updated if not specified.",
            "format": "decimal",
            "nullable": true
          },
          "Barcode": {
            "maxLength": 50,
            "type": "string",
            "description": "The barcode of the lost/damaged item.  When updating an item, the property is not updated if not specified.",
            "nullable": true
          },
          "PurchaseSource": {
            "maxLength": 100,
            "type": "string",
            "description": "The store where the lost/damaged item was purchased.  When updating an item, the property is not updated if not specified.",
            "nullable": true
          },
          "ReplacementBrand": {
            "maxLength": 50,
            "type": "string",
            "description": "The brand of the item replacement.  When updating an item, the property is not updated if not specified.",
            "nullable": true
          },
          "ReplacementModel": {
            "maxLength": 100,
            "type": "string",
            "description": "The model of the item replacement.  When updating an item, the property is not updated if not specified.",
            "nullable": true
          },
          "ReplacementDescription": {
            "maxLength": 150,
            "type": "string",
            "description": "The description of the item replacement.  When updating an item, the property is not updated if not specified.",
            "nullable": true
          },
          "ReplacementSource": {
            "maxLength": 100,
            "type": "string",
            "description": "The source of the item replacement.  When updating an item, the property is not updated if not specified.",
            "nullable": true
          },
          "FreightCost": {
            "type": "number",
            "description": "The freight cost of the replacement item.  When updating an item, the property is not updated if not specified.",
            "format": "decimal",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents the estimate item contents properties of an estimate item line type when using the Symbility API."
      },
      "EstimateItemNoteType": {
        "enum": [
          "Manual",
          "SystemGenerated",
          "Unknown"
        ],
        "type": "string",
        "description": "This type represents estimate item note types when using the Symbility API.\r\n\r\n**Manual**: The note is a manual note.\r\n\r\n**SystemGenerated**: The note has been automatically generated by the system.\r\n            \r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "EstimateItemNote": {
        "type": "object",
        "properties": {
          "EstimateItemNoteID": {
            "type": "integer",
            "description": "The identifier of the estimate item note.",
            "format": "int32"
          },
          "Note": {
            "type": "string",
            "description": "The note.",
            "nullable": true
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EstimateItemNoteType"
              }
            ],
            "description": "The type of the note."
          }
        },
        "additionalProperties": false,
        "description": "This type represents an estimate item note when using the Symbility API."
      },
      "EstimateItem": {
        "type": "object",
        "properties": {
          "EstimateItemID": {
            "type": "integer",
            "description": "The identifier of the estimate item in the claim.",
            "format": "int32"
          },
          "RootCopyFromEstimateItemID": {
            "type": "integer",
            "description": "The identifier of the root estimate item this one is based off of. (useful when dealing with supplements)",
            "format": "int32"
          },
          "CopyFromEstimateItemID": {
            "type": "integer",
            "description": "The identifier of the estimate item this one is directly based off of. (useful when dealing with supplements)",
            "format": "int32"
          },
          "ExternalReference": {
            "maxLength": 50,
            "type": "string",
            "description": "A string value that can be used to identify items when they are added using the API.",
            "nullable": true
          },
          "DiagramObjectID": {
            "type": "integer",
            "description": "The identifier of the diagram object this item is related to.",
            "format": "int32"
          },
          "LineType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EstimateItemLineType"
              }
            ],
            "description": "The type of line of the estimate item."
          },
          "SupplementType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EstimateItemSupplementType"
              }
            ],
            "description": "This type represents the type of an estimate item if in a supplement when using the Symbility API.\r\n\r\n**None**: The estimate item is a regular line item\r\n\r\n**Credit**: The estimate item represents a credit\r\n\r\n**Supplement**: The estimate item is a supplemental line item"
          },
          "ItemDescription": {
            "type": "string",
            "description": "The description of the item.",
            "nullable": true
          },
          "ActionName": {
            "maxLength": 150,
            "type": "string",
            "description": "The name of the action.",
            "nullable": true
          },
          "GradeDescription": {
            "maxLength": 150,
            "type": "string",
            "description": "The description of the grade.",
            "nullable": true
          },
          "UnitOfMeasure": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemUnitOfMeasure"
              }
            ],
            "description": "This type represents the unit of measures that the Symbility API supports.\r\n\r\n**Basic values**: SquareFoot, LinearFoot, SquareYard, Each, Hour, CubicInch, CubicYard, CubicFoot, Day, Week, \r\nGallon, Pair, Roll, Room, Load, LinearInch, Ton, Square, SquareInch, Mile\r\n\r\n**Grouping values**: Bag, Sroll, Section, Set, Sheet, VerticalLinearFoot, DoubleRoll, Bolt, Box, Bundle, BoardFeet, Piece\\*, Minute\\*\r\n\r\n**Commercial values**: Percentage, Acre, OneHundred, LinearFeet100, SquareFeet100, Pound, LumpSum, OneThousand, BoardFeet100, LinearFeet100, \r\nMonth, SquareFeet100, Pack, SquareFootFormContactConcrete\r\n\r\n**Metric values**: LinearCentimeter, LinearMeter, LinearKilometer, SquareCentimeter, SquareMeter, CubicMeter, LinearMillimeter\r\n\r\n**Other values**: Number, Sum, TatamiMat, PintsPerDay, LitersPerDay, CubicFeetPerMinute, CubicMetersPerHour, SquareMeterXWeek, PieceXWeek, \r\nKiloWattHour, MeterPerWeek, PiecePerDay\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "ItemCategoryFullName": {
            "maxLength": 255,
            "type": "string",
            "description": "The category names including all the parent categories for the estimate item.",
            "nullable": true
          },
          "ItemTradeName": {
            "maxLength": 150,
            "type": "string",
            "description": "The trade name for the estimate item.",
            "nullable": true
          },
          "ClaimCoverageID": {
            "type": "integer",
            "description": "The identifier of the claim coverage.",
            "format": "int32",
            "nullable": true
          },
          "ClaimSubcoverageID": {
            "type": "integer",
            "description": "The identifier of the claim subcoverage.",
            "format": "int32",
            "nullable": true
          },
          "Provisional": {
            "type": "boolean",
            "description": "True if the estimate item is provisional."
          },
          "IncludeSubtractions": {
            "type": "boolean",
            "description": "True if the item should include subtractions in its quantity."
          },
          "Waste": {
            "type": "number",
            "description": "The included waste percentage.",
            "format": "decimal"
          },
          "Materials": {
            "type": "number",
            "description": "The materials component of the total amount (currency).",
            "format": "decimal"
          },
          "UnitMaterials": {
            "type": "number",
            "description": "The materials component of the unit price (currency).",
            "format": "decimal"
          },
          "Labor": {
            "type": "number",
            "description": "The labor component of the total amount (currency).",
            "format": "decimal"
          },
          "UnitLabor": {
            "type": "number",
            "description": "The labor component of the unit price (currency).",
            "format": "decimal"
          },
          "TotalHours": {
            "type": "number",
            "description": "The total labor time in hours.",
            "format": "decimal"
          },
          "UnitHours": {
            "type": "number",
            "description": "The unit labor time in hours.",
            "format": "decimal"
          },
          "Equipment": {
            "type": "number",
            "description": "The equipment component of the total amount (currency).",
            "format": "decimal"
          },
          "UnitEquipment": {
            "type": "number",
            "description": "The equipment component of the unit price (currency).",
            "format": "decimal"
          },
          "MarketConditions": {
            "type": "number",
            "description": "The market conditions component of the total amount (currency).",
            "format": "decimal"
          },
          "UnitMarketConditions": {
            "type": "number",
            "description": "The market conditions component of the unit price (currency).",
            "format": "decimal"
          },
          "ApplyTax1": {
            "type": "boolean",
            "description": "True if Tax1 is applied to the estimate item."
          },
          "ApplyTax2": {
            "type": "boolean",
            "description": "True if Tax2 is applied to the estimate item."
          },
          "ApplyTax3": {
            "type": "boolean",
            "description": "True if Tax3 is applied to the estimate item."
          },
          "ApplyTax4": {
            "type": "boolean",
            "description": "True if Tax4 is applied to the estimate item."
          },
          "ApplyOverheadAndProfit": {
            "type": "boolean",
            "description": "True if the overhead and profit to the estimate item."
          },
          "TotalTax1": {
            "type": "number",
            "description": "The total tax 1 applied to the estimate item.  Will be 0 for claims created before Q1 2019.",
            "format": "decimal"
          },
          "TotalTax2": {
            "type": "number",
            "description": "The total tax 2 applied to the estimate item.  Will be 0 for claims created before Q1 2019.",
            "format": "decimal"
          },
          "TotalTax3": {
            "type": "number",
            "description": "The total tax 3 applied to the estimate item.  Will be 0 for claims created before Q1 2019.",
            "format": "decimal"
          },
          "TotalTax4": {
            "type": "number",
            "description": "The total tax 4 applied to the estimate item.  Will be 0 for claims created before Q1 2019.",
            "format": "decimal"
          },
          "TotalOverhead": {
            "type": "number",
            "description": "The total overhead applied to the estimate item.  Will be 0 for claims created before Q1 2019.",
            "format": "decimal"
          },
          "TotalProfit": {
            "type": "number",
            "description": "The total profit applied to the estimate item.  Will be 0 for claims created before Q1 2019.",
            "format": "decimal"
          },
          "TotalTax1ActualCashValue": {
            "type": "number",
            "description": "The total tax 1 applied to the estimate item's actual cash value.  Will be 0 for claims created before Q1 2019.",
            "format": "decimal"
          },
          "TotalTax2ActualCashValue": {
            "type": "number",
            "description": "The total tax 2 applied to the estimate item's actual cash value.  Will be 0 for claims created before Q1 2019.",
            "format": "decimal"
          },
          "TotalTax3ActualCashValue": {
            "type": "number",
            "description": "The total tax 3 applied to the estimate item's actual cash value.  Will be 0 for claims created before Q1 2019.",
            "format": "decimal"
          },
          "TotalTax4ActualCashValue": {
            "type": "number",
            "description": "The total tax 4 applied to the estimate item's actual cash value.  Will be 0 for claims created before Q1 2019.",
            "format": "decimal"
          },
          "TotalOverheadActualCashValue": {
            "type": "number",
            "description": "The total overhead applied to the estimate item's actual cash value.  Will be 0 for claims created before Q1 2019.",
            "format": "decimal"
          },
          "TotalProfitActualCashValue": {
            "type": "number",
            "description": "The total profit applied to the estimate item's actual cash value.  Will be 0 for claims created before Q1 2019.",
            "format": "decimal"
          },
          "TotalDepreciation": {
            "type": "number",
            "description": "The calculated depreciation value of the estimate item.",
            "format": "decimal"
          },
          "EstimateItemDepreciation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EstimateItemDepreciation"
              }
            ],
            "description": "The depreciation of the estimate item.",
            "nullable": true
          },
          "Links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemLink"
              }
            ],
            "description": "The links of the item."
          },
          "Links2": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemLink2"
              }
            ],
            "description": "The links of the item."
          },
          "Credit": {
            "type": "boolean",
            "description": "True if this estimate item is a credit."
          },
          "Quantity": {
            "type": "number",
            "description": "The quantity of the estimate item including waste and adjustments.",
            "format": "decimal"
          },
          "MaterialsQuantity": {
            "type": "number",
            "description": "The materials quantity of the estimate item.",
            "format": "decimal"
          },
          "Total": {
            "type": "number",
            "description": "The total amount of the estimate item (currency).",
            "format": "decimal"
          },
          "EstimateItemContents": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EstimateItemContents"
              }
            ],
            "description": "The contents properties of the estimate item.",
            "nullable": true
          },
          "EstimateItemNotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EstimateItemNote"
            },
            "description": "Notes attached to the estimate item.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents an estimate item when using the Symbility API."
      },
      "MinimumChargeAdjustmentItem": {
        "type": "object",
        "properties": {
          "Description": {
            "maxLength": 150,
            "type": "string",
            "description": "The description of the minimum charge.",
            "nullable": true
          },
          "Total": {
            "type": "number",
            "description": "The total amount of the minimum charge (currency).",
            "format": "decimal"
          }
        },
        "additionalProperties": false,
        "description": "This type represents a minimum charge estimate item when using the Symbility API."
      },
      "Estimate": {
        "type": "object",
        "properties": {
          "EstimateID": {
            "type": "integer",
            "description": "The identifier of the estimate.",
            "format": "int32"
          },
          "ParentEstimateID": {
            "type": "integer",
            "description": "The identifier of the parent estimate (if value is different than 0, indicates that this estimate is a supplement).",
            "format": "int32"
          },
          "AssignmentID": {
            "type": "integer",
            "description": "The identifier of the assignment the estimate is linked to.",
            "format": "int32"
          },
          "AuthorHeadOfficeCompanyID": {
            "maxLength": 11,
            "type": "string",
            "description": "The Symbility company ID of the head office of the author of the estimate.",
            "nullable": true
          },
          "AuthorCompanyID": {
            "maxLength": 11,
            "type": "string",
            "description": "The Symbility company ID of the author of the estimate.",
            "nullable": true
          },
          "AuthorExternalSystemCompanyCode": {
            "maxLength": 20,
            "type": "string",
            "description": "The external system company code of the author if defined in the API account.",
            "nullable": true
          },
          "AuthorCompanyName": {
            "maxLength": 255,
            "type": "string",
            "description": "The company name of the author of the estimate.",
            "nullable": true
          },
          "CreationDate": {
            "type": "string",
            "description": "The date and time (UTC) the estimate was created.",
            "format": "date-time"
          },
          "Status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EstimateStatus"
              }
            ],
            "description": "This type represents the estimate status values that the Symbility API supports.\r\n\r\n**InProgress**: The estimate is in progress.\r\n\r\n**ReadyForReview**: The estimate is ready for review.\r\n\r\n**RejectedReview**: The estimate has been rejected (review).\r\n\r\n**Completed**: The estimate has been completed.\r\n\r\n**RejectedApproval**: The estimate has been rejected (approval).\r\n\r\n**Approved**: The estimate has been approved. \r\n\r\n**Cancelled**: The estimate has been cancelled.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "External": {
            "type": "boolean",
            "description": "If true, the estimate is an external estimate which means all calculations are assumed by the external system.  If false, the estimate is a standard estimate."
          },
          "Options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EstimateOptions"
              }
            ],
            "description": "This type represents the estimate option values that the Symbility API supports. \r\nThis is a bit field, a set of flags, the EstimateOptions can be one or more of the following values.\r\n\r\n**None**: No flag is set.\r\n\r\n**Contents**: The estimate is a contents estimate.\r\n\r\n**Locked**: The estimate is locked.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "Name": {
            "maxLength": 64,
            "type": "string",
            "description": "The name of the estimate.",
            "nullable": true
          },
          "ParentEstimateName": {
            "maxLength": 64,
            "type": "string",
            "description": "The name of the parent estimate.",
            "nullable": true
          },
          "Type": {
            "maxLength": 255,
            "type": "string",
            "description": "The type of the estimate.",
            "nullable": true
          },
          "DefaultClaimCoverageID": {
            "type": "integer",
            "description": "The ID of the estimate's default coverage.",
            "format": "int32"
          },
          "SupplementReason": {
            "maxLength": 255,
            "type": "string",
            "description": "Reason for the estimate supplement",
            "nullable": true
          },
          "TotalMaterials": {
            "type": "number",
            "description": "The total materials amount of the estimate (currency).",
            "format": "decimal"
          },
          "TotalLabor": {
            "type": "number",
            "description": "The total labor amount of the estimate (currency).",
            "format": "decimal"
          },
          "TotalEquipment": {
            "type": "number",
            "description": "The total equipment amount of the estimate (currency).",
            "format": "decimal"
          },
          "TotalMarketConditions": {
            "type": "number",
            "description": "The total market conditions amount of the estimate (currency).",
            "format": "decimal"
          },
          "TotalFreightCost": {
            "type": "number",
            "description": "The total freight cost of the estimate (currency).",
            "format": "decimal"
          },
          "MinimumCharge": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimMinimumCharge"
              }
            ],
            "description": "The minimum charge adjustments information.",
            "nullable": true
          },
          "SubTotal": {
            "type": "number",
            "description": "The sub total of the estimate (currency).",
            "format": "decimal"
          },
          "TaxInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimTaxInfo"
              }
            ],
            "description": "The tax information.",
            "nullable": true
          },
          "TotalTax1": {
            "type": "number",
            "description": "The total Tax1 amount of the estimate (currency).",
            "format": "decimal"
          },
          "TotalTax2": {
            "type": "number",
            "description": "The total Tax2 amount of the estimate (currency).",
            "format": "decimal"
          },
          "TotalTax3": {
            "type": "number",
            "description": "The total Tax3 amount of the estimate (currency).",
            "format": "decimal"
          },
          "TotalTax4": {
            "type": "number",
            "description": "The total Tax4 amount of the estimate (currency).",
            "format": "decimal"
          },
          "OverheadAndProfitInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimOverheadAndProfitInfo"
              }
            ],
            "description": "The overhead and profit information.",
            "nullable": true
          },
          "TotalOverhead": {
            "type": "number",
            "description": "The total overhead amount of the estimate (currency).",
            "format": "decimal"
          },
          "TotalProfit": {
            "type": "number",
            "description": "The total profit amount of the estimate (currency).",
            "format": "decimal"
          },
          "SalvageAllowanceBeforeTaxes": {
            "type": "number",
            "description": "The salvage allowance amount (before taxes) (currency).",
            "format": "decimal"
          },
          "SalvageAllowanceAfterTaxes": {
            "type": "number",
            "description": "The salvage allowance amount (after taxes) (currency).",
            "format": "decimal"
          },
          "SalvageRecovery": {
            "type": "number",
            "description": "The salvage recovery amount (currency).",
            "format": "decimal"
          },
          "DiscountBeforeTaxes": {
            "type": "number",
            "description": "The discount amount (before taxes) (currency).",
            "format": "decimal"
          },
          "DiscountBeforeTaxesName": {
            "type": "string",
            "description": "The discount label (before taxes) (currency).",
            "nullable": true
          },
          "DiscountAfterTaxes": {
            "type": "number",
            "description": "The discount amount (after taxes) (currency).",
            "format": "decimal"
          },
          "DiscountAfterTaxesName": {
            "type": "string",
            "description": "The discount label (after taxes) (currency).",
            "nullable": true
          },
          "ReplacementCost": {
            "type": "number",
            "description": "The total of the estimate before discount and deductible (currency).",
            "format": "decimal"
          },
          "TotalRecoverableDepreciation": {
            "type": "number",
            "description": "The total recoverable depreciation amount of the estimate (currency).",
            "format": "decimal"
          },
          "NetRecoverableDepreciation": {
            "type": "number",
            "description": "The total non-recoverable depreciation amount of the estimate (currency).",
            "format": "decimal"
          },
          "TotalNonRecoverableDepreciation": {
            "type": "number",
            "description": "The net recoverable depreciation amount of the estimate after limits and deductible (currency).",
            "format": "decimal"
          },
          "ApplyFlatDuductible": {
            "type": "boolean",
            "description": "True if the claim's flat deductible is applied to the estimate.."
          },
          "Deductible": {
            "type": "number",
            "description": "The deductible amount (currency).",
            "format": "decimal"
          },
          "AmountPayableReplacementCost": {
            "type": "number",
            "description": "The estimate grand total (total cost) (currency).",
            "format": "decimal"
          },
          "DeductibleActualCashValue": {
            "type": "number",
            "description": "The actual cash value of the deductible of the estimate (currency).",
            "format": "decimal"
          },
          "AmountPayableActualCashValue": {
            "type": "number",
            "description": "Net estimate grand total (after depreciation) (currency).",
            "format": "decimal"
          },
          "AdditionalDeductibleIfDepreciationRecovered": {
            "type": "number",
            "description": "The additional deductible that will be applied if the depreciation is recovered on the estimate (currency).",
            "format": "decimal"
          },
          "AmountPayableIfDepreciationRecovered": {
            "type": "number",
            "description": "Net estimate if depreciation is recovered (currency).",
            "format": "decimal"
          },
          "Coverages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EstimateCoverage"
            },
            "description": "The coverages used in the estimate.",
            "nullable": true
          },
          "Comments": {
            "type": "string",
            "description": "The estimate comments.",
            "nullable": true
          },
          "FinalizationStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EstimateFinalizationStatus"
              }
            ],
            "description": "The status of the estimate finalization."
          },
          "FinalizationReference": {
            "maxLength": 50,
            "type": "string",
            "description": "The reference number associated with the estimate finalization.",
            "nullable": true
          },
          "FinalizationSettlementOrInvoiceDate": {
            "type": "string",
            "description": "The date and time (UTC) associated with the estimate finalization.",
            "format": "date-time",
            "nullable": true
          },
          "FinalizationCreationDate": {
            "type": "string",
            "description": "The date and time (UTC) when the estimate was finalized.",
            "format": "date-time",
            "nullable": true
          },
          "EstimateItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EstimateItem"
            },
            "description": "The list of items in the estimate.",
            "nullable": true
          },
          "MinimumChargeAdjustmentItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MinimumChargeAdjustmentItem"
            },
            "description": "The minimum charges automatically applied to the estimate.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents an estimate when using the Symbility API."
      },
      "PhotoElevation": {
        "enum": [
          "None",
          "Front",
          "Back",
          "Left",
          "Right",
          "Unknown"
        ],
        "type": "string",
        "description": "This type represents the photo elevations that the Symbility API supports.\r\n\r\n**Front**: The front of the property.\r\n\r\n**Back**: The back of the property.\r\n\r\n**Left**: The left side of the property.\r\n\r\n**Right**: The right side of the property."
      },
      "PhotoProperties": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/PhotoPropertiesFlags"
        }
      },
      "Photo": {
        "type": "object",
        "properties": {
          "PhotoID": {
            "type": "integer",
            "description": "The identifier of the photo.",
            "format": "int32"
          },
          "Caption": {
            "type": "string",
            "description": "The caption of the photo.",
            "nullable": true
          },
          "CaptureDate": {
            "type": "string",
            "description": "The date and time the photo was taken.",
            "format": "date-time",
            "nullable": true
          },
          "Filename": {
            "maxLength": 255,
            "type": "string",
            "description": "The original filename of the photo if any.",
            "nullable": true
          },
          "Elevation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhotoElevation"
              }
            ],
            "description": "The elevation of the photo."
          },
          "Direction": {
            "type": "number",
            "description": "Angle in degrees representing the direction of the photo.",
            "format": "double",
            "nullable": true
          },
          "RoofAngle": {
            "type": "number",
            "description": "The pitch of the roof in degrees associated with the photo.",
            "format": "double",
            "nullable": true
          },
          "Latitude": {
            "type": "number",
            "description": "The latitude at which the photo was taken.",
            "format": "double",
            "nullable": true
          },
          "Longitude": {
            "type": "number",
            "description": "The longitude at which the photo was taken.",
            "format": "double",
            "nullable": true
          },
          "Altitude": {
            "type": "number",
            "description": "The altitude at which the photo was taken.",
            "format": "double",
            "nullable": true
          },
          "Area": {
            "maxLength": 255,
            "type": "string",
            "description": "The name of the area the photo is associated to.",
            "nullable": true
          },
          "TakenByUserName": {
            "maxLength": 255,
            "type": "string",
            "description": "The full name of the user who has taken the photo.",
            "nullable": true
          },
          "TakenByCompanyName": {
            "maxLength": 255,
            "type": "string",
            "description": "The name of the company who has taken the photo.",
            "nullable": true
          },
          "Properties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhotoProperties"
              }
            ],
            "description": "The properties of the photo."
          }
        },
        "additionalProperties": false,
        "description": "This type represents the structure used to create a photo when using the Symbility API."
      },
      "PhotoPage": {
        "type": "object",
        "properties": {
          "PhotoPageID": {
            "type": "integer",
            "description": "The identifier of the photo page.",
            "format": "int32"
          },
          "AssignmentID": {
            "type": "integer",
            "description": "The identifier of the claim assignment.",
            "format": "int32"
          },
          "AuthorHeadOfficeCompanyID": {
            "maxLength": 11,
            "type": "string",
            "description": "The Symbility company ID of the head office of the author of the photo page.",
            "nullable": true
          },
          "AuthorCompanyID": {
            "maxLength": 11,
            "type": "string",
            "description": "The Symbility company ID of the author of the photo page.",
            "nullable": true
          },
          "AuthorExternalSystemCompanyCode": {
            "maxLength": 20,
            "type": "string",
            "description": "The external system company code of the author if defined in the API account.",
            "nullable": true
          },
          "AuthorCompanyName": {
            "maxLength": 255,
            "type": "string",
            "description": "The company name of the author of the photo page.",
            "nullable": true
          },
          "Name": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the photo page.",
            "nullable": true
          },
          "Photos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Photo"
            },
            "description": "The photos that are in the photo page.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents a photo page when using the Symbility API."
      },
      "FormValueType": {
        "enum": [
          "Text",
          "Numeric",
          "Percentage",
          "Currency",
          "Boolean",
          "Date",
          "Time",
          "DateTime",
          "Phone",
          "List",
          "EditableList",
          "Unknown"
        ],
        "type": "string",
        "description": "This type represents the type of form values that the Symbility API supports.\r\n\r\n**Text**: The form value represents textual entry.\r\n\r\n**Numeric**: The form value represents numerical value (examples: \"-35.48\", \"1329.33\").\r\n\r\n**Percentage**: The form value represents percentage value; note that the % sign is omitted and the value is divided by 100 (examples: \"0.10\" means 10%, \"0.075\" means 7.5%).\r\n\r\n**Currency**: The form value represents a currency value; note that the currency symbol ($, â¬ or Â£) is omitted (examples: \"-24.13\", \"2345.78\").\r\n\r\n**Boolean**: The form value represents a boolean (true/false) value, shown as a checkbox (examples: \"true\", \"false\").\r\n\r\n**Date**: The form value represents a date value in the format YYYY-MM-DD (examples: \"2008-01-21\", \"2008-05-14\").\r\n\r\n**Time**: The form value represents a time value in the format HH:mm:ss (examples: \"13:21:10\", \"08:56:01\").\r\n\r\n**DateTime**: The form value represents both a date and time value in the format YYYY-MM-DDTHH:mm:ss (examples: \"2008-01-21T13:21:10\", \"2008-05-14T08:56:01\").\r\n\r\n**Phone**: The form value represents a phone number value (examples: \"(555) 555-1234\" in North America, \"(020) 1234-5678\" in the United Kingdom).\r\n\r\n**List**: The form value represents an entry in a predefined list of available values.\r\n\r\n**EditableList**: The form value represents an entry in a predefined editable list of available values.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "FormValue": {
        "type": "object",
        "properties": {
          "Type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FormValueType"
              }
            ],
            "description": "This type represents the type of form values that the Symbility API supports.\r\n\r\n**Text**: The form value represents textual entry.\r\n\r\n**Numeric**: The form value represents numerical value (examples: \"-35.48\", \"1329.33\").\r\n\r\n**Percentage**: The form value represents percentage value; note that the % sign is omitted and the value is divided by 100 (examples: \"0.10\" means 10%, \"0.075\" means 7.5%).\r\n\r\n**Currency**: The form value represents a currency value; note that the currency symbol ($, â¬ or Â£) is omitted (examples: \"-24.13\", \"2345.78\").\r\n\r\n**Boolean**: The form value represents a boolean (true/false) value, shown as a checkbox (examples: \"true\", \"false\").\r\n\r\n**Date**: The form value represents a date value in the format YYYY-MM-DD (examples: \"2008-01-21\", \"2008-05-14\").\r\n\r\n**Time**: The form value represents a time value in the format HH:mm:ss (examples: \"13:21:10\", \"08:56:01\").\r\n\r\n**DateTime**: The form value represents both a date and time value in the format YYYY-MM-DDTHH:mm:ss (examples: \"2008-01-21T13:21:10\", \"2008-05-14T08:56:01\").\r\n\r\n**Phone**: The form value represents a phone number value (examples: \"(555) 555-1234\" in North America, \"(020) 1234-5678\" in the United Kingdom).\r\n\r\n**List**: The form value represents an entry in a predefined list of available values.\r\n\r\n**EditableList**: The form value represents an entry in a predefined editable list of available values.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "Name": {
            "type": "string",
            "description": "The name of the form value (unique through the form).",
            "nullable": true
          },
          "Value": {
            "type": "string",
            "description": "The string content associated with this value.\r\n\r\nSee FormValue Type for the format of the value depending on the value type.",
            "nullable": true
          },
          "Visible": {
            "type": "boolean",
            "description": "Indicates whether or not this form value is visible on the form."
          }
        },
        "additionalProperties": false,
        "description": "This type represents a value that was filled in the form (either automatically with information from the claim or\r\nmanually by the user)."
      },
      "FormStatus": {
        "enum": [
          "None",
          "Locked",
          "Unknown"
        ],
        "type": "string",
        "description": "This type represents the form statuses that the Symbility API supports.\r\n\r\n**Locked**: The form is locked (signed).\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "Form": {
        "type": "object",
        "properties": {
          "FormID": {
            "type": "integer",
            "description": "The identifier of the form.",
            "format": "int32"
          },
          "AssignmentID": {
            "type": "integer",
            "description": "The identifier of the claim assignment.",
            "format": "int32"
          },
          "Name": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the form.\r\n\r\nThe end-user can change this name.",
            "nullable": true
          },
          "OriginalName": {
            "maxLength": 50,
            "type": "string",
            "description": "The original name of the form.\r\n\r\nThis name is unique.",
            "nullable": true
          },
          "AuthorHeadOfficeCompanyID": {
            "maxLength": 11,
            "type": "string",
            "description": "The Symbility company ID of the head office of the person who added the form to the claim.",
            "nullable": true
          },
          "AuthorCompanyID": {
            "maxLength": 11,
            "type": "string",
            "description": "The Symbility company ID of the person who added the form to the claim.",
            "nullable": true
          },
          "AuthorExternalSystemCompanyCode": {
            "maxLength": 20,
            "type": "string",
            "description": "The external system company code of the author if defined in the API account.",
            "nullable": true
          },
          "AuthorCompanyName": {
            "maxLength": 255,
            "type": "string",
            "description": "The company name of the person who added the form to the claim.",
            "nullable": true
          },
          "FormValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormValue"
            },
            "nullable": true
          },
          "LastModificationDate": {
            "type": "string",
            "description": "The date and time (UTC) the form was last updated.",
            "format": "date-time"
          },
          "FormStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FormStatus"
              }
            ],
            "description": "This type represents the form statuses that the Symbility API supports.\r\n\r\n**Locked**: The form is locked (signed).\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          }
        },
        "additionalProperties": false
      },
      "ExternalDocumentType": {
        "enum": [
          "Document",
          "DiagramImportSource"
        ],
        "type": "string",
        "description": "This type represents the types of external documents that the Symbility API supports.\r\n\r\n**Document**: The document is a standard document.\r\n\r\n**DiagramImportSource**: The document has been used to import/generate diagrams."
      },
      "ExternalDocument": {
        "type": "object",
        "properties": {
          "ExternalDocumentID": {
            "type": "integer",
            "description": "The identifier of the external document.",
            "format": "int32"
          },
          "AssignmentID": {
            "type": "integer",
            "description": "The identifier of the claim assignment.",
            "format": "int32"
          },
          "Name": {
            "maxLength": 265,
            "type": "string",
            "description": "Complete file name of the external document.",
            "nullable": true
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalDocumentType"
              }
            ],
            "description": "This type represents the types of external documents that the Symbility API supports.\r\n\r\n**Document**: The document is a standard document.\r\n\r\n**DiagramImportSource**: The document has been used to import/generate diagrams."
          },
          "CreatorHeadOfficeCompanyID": {
            "maxLength": 11,
            "type": "string",
            "description": "The Symbility company ID of the head office of the creator of the external document.",
            "nullable": true
          },
          "CreatorCompanyID": {
            "maxLength": 11,
            "type": "string",
            "description": "The Symbility company ID of the creator of the external document.",
            "nullable": true
          },
          "CreatorExternalSystemCompanyCode": {
            "maxLength": 20,
            "type": "string",
            "description": "The external system company code of the creator if defined in the API account.",
            "nullable": true
          },
          "ClaimDocumentFolderPath": {
            "maxLength": 265,
            "type": "string",
            "description": "Complete folder path of the external document.",
            "nullable": true
          },
          "CreatorCompanyName": {
            "maxLength": 255,
            "type": "string",
            "description": "The company name of the creator of the external document.",
            "nullable": true
          },
          "CreatorUserFullName": {
            "maxLength": 101,
            "type": "string",
            "description": "The full name (&lt;first name&gt;&lt;space&gt;&lt;last name&gt;) of the creator of the external document.\r\n\r\nAn insured guest user's full name includes their title(&lt;title&gt;&lt;space&gt;&lt;first\r\nname&gt;&lt;space&gt;&lt;last name&gt;).",
            "nullable": true
          },
          "ShareWithOriginator": {
            "type": "boolean",
            "description": "True if the external document is shared with the originator.",
            "default": false
          },
          "ShareWithAssignees": {
            "type": "boolean",
            "description": "True if the external document is shared with the assignees.",
            "default": false
          },
          "ShareWithPeers": {
            "type": "boolean",
            "description": "True if the external document is shared with peers.",
            "default": false
          },
          "ShareWithAllCompanies": {
            "type": "boolean",
            "description": "True if the external document is shared with all companies.",
            "default": false
          },
          "ShareWithInsured": {
            "type": "boolean",
            "description": "True if the external document is shared with the insured.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "This type represents an external document when using the Symbility API."
      },
      "HandwrittenNote": {
        "type": "object",
        "properties": {
          "HandwrittenNoteID": {
            "type": "integer",
            "description": "The identifier of the handwritten note.",
            "format": "int32"
          },
          "AssignmentID": {
            "type": "integer",
            "description": "The identifier of the claim assignment.",
            "format": "int32"
          },
          "Name": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the handwritten note.",
            "nullable": true
          },
          "CreatorHeadOfficeCompanyID": {
            "maxLength": 11,
            "type": "string",
            "description": "The Symbility company ID of the head office of the creator of the handwritten note.",
            "nullable": true
          },
          "CreatorCompanyID": {
            "maxLength": 11,
            "type": "string",
            "description": "The Symbility company ID of the creator of the handwritten note.",
            "nullable": true
          },
          "CreatorExternalSystemCompanyCode": {
            "maxLength": 20,
            "type": "string",
            "description": "The external system company code of the creator if defined in the API account.",
            "nullable": true
          },
          "CreatorCompanyName": {
            "maxLength": 255,
            "type": "string",
            "description": "The company name of the creator of the handwritten note.",
            "nullable": true
          },
          "CreatorUserFullName": {
            "maxLength": 101,
            "type": "string",
            "description": "The full name (&lt;first name&gt;&lt;space&gt;&lt;last name&gt;) of the creator of the handwritten note.",
            "nullable": true
          },
          "ShareWithOriginator": {
            "type": "boolean",
            "description": "True if the handwritten note should be shared with the originator.",
            "default": false
          },
          "ShareWithAssignees": {
            "type": "boolean",
            "description": "True if the handwritten note should be shared with the assignees.",
            "default": false
          },
          "ShareWithPeers": {
            "type": "boolean",
            "description": "True if the handwritten note should be shared with peers.",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "GetClaimAssignmentDetails": {
        "type": "object",
        "properties": {
          "ClaimAssignment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimAssignment"
              }
            ],
            "description": "The summary of the claim assignment.",
            "nullable": true
          },
          "Diagrams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Diagram"
            },
            "description": "The diagrams attached to the claim assignment.",
            "nullable": true
          },
          "Estimates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Estimate"
            },
            "description": "The estimates attached to the claim assignment.",
            "nullable": true
          },
          "PhotoPages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhotoPage"
            },
            "description": "The photo pages attached to the claim assignment.",
            "nullable": true
          },
          "Forms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Form"
            },
            "description": "The forms attached to the claim assignment.",
            "nullable": true
          },
          "ExternalDocuments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalDocument"
            },
            "description": "The external documents attached to the claim assignment.",
            "nullable": true
          },
          "HandwrittenNotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HandwrittenNote"
            },
            "description": "The handwritten notes attached to the claim assignment.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents the details of a claim assignment when using the Symbility API."
      },
      "UserIDType": {
        "enum": [
          "None",
          "UserFullName",
          "UserLoginName",
          "UserEmail"
        ],
        "type": "string",
        "description": "This type represents the user identifier type values that the Symbility API supports.\r\n\r\nThis type is always used in conjunction with the userID field because it defines what the userID field contains.\r\n\r\n**None**: The user identifier is empty.\r\n\r\n**UserFullName**: The user identifier contains the full name (&lt;user first name&gt;&lt;space&gt;&lt;user last name&gt;).\r\n\r\n**UserLoginName**: The user identifier contains the login name.\r\n\r\n**UserEmail**: The user identifier contains the email address.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "UserIDSpecification": {
        "type": "object",
        "properties": {
          "UserID": {
            "type": "string",
            "description": "The unique user identifier.",
            "nullable": true
          },
          "UserIDType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserIDType"
              }
            ],
            "description": "This type represents the user identifier type values that the Symbility API supports.\r\n\r\nThis type is always used in conjunction with the userID field because it defines what the userID field contains.\r\n\r\n**None**: The user identifier is empty.\r\n\r\n**UserFullName**: The user identifier contains the full name (&lt;user first name&gt;&lt;space&gt;&lt;user last name&gt;).\r\n\r\n**UserLoginName**: The user identifier contains the login name.\r\n\r\n**UserEmail**: The user identifier contains the email address.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          }
        },
        "additionalProperties": false,
        "description": "This type represents a user when using the Symbility API."
      },
      "CompanyIDType": {
        "enum": [
          "None",
          "ExternalSystemCompanyCode",
          "CompanyName",
          "CompanyID"
        ],
        "type": "string",
        "description": "This type represents the company identifier type values that the Symbility API supports.\r\n\r\nThis type is always used in conjunction with the CompanyID field because it defines what the CompanyID field contains.\r\n\r\n**None**: The company identifier is empty.\r\n\r\n**CompanyID**: The company identifier contains a Symbility company ID.\r\n\r\n**ExternalSystemCompanyCode**: The company identifier contains an external system company code.\r\n\r\n**CompanyName**: The company identifier contains the company name."
      },
      "CompanyIDSpecification": {
        "type": "object",
        "properties": {
          "CompanyID": {
            "type": "string",
            "description": "The unique company identifier.",
            "nullable": true
          },
          "CompanyIDType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CompanyIDType"
              }
            ],
            "description": "This type represents the company identifier type values that the Symbility API supports.\r\n\r\nThis type is always used in conjunction with the CompanyID field because it defines what the CompanyID field contains.\r\n\r\n**None**: The company identifier is empty.\r\n\r\n**CompanyID**: The company identifier contains a Symbility company ID.\r\n\r\n**ExternalSystemCompanyCode**: The company identifier contains an external system company code.\r\n\r\n**CompanyName**: The company identifier contains the company name."
          }
        },
        "additionalProperties": false,
        "description": "This type represents the way to uniquely identify a company using the Symbility API."
      },
      "CompanyRole": {
        "enum": [
          "Assignee",
          "Peer",
          "Unknown"
        ],
        "type": "string",
        "description": "This type represents the company identifier type values that the Symbility API supports.\r\n\r\n**Assignee**: The company is an assignee.\r\n\r\n**Peer**: The company is a peer.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "ClaimAssignmentOption": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ClaimAssignmentOptionFlags"
        }
      },
      "AssigneeGroupIDType": {
        "enum": [
          "None",
          "AssigneeGroupCode",
          "AssigneeGroupName"
        ],
        "type": "string",
        "description": "This type represents the assignee group identifier type values that the Symbility API supports.\r\n\r\nThis type is always used in conjunction with the AssigneeGroupID field because it defines what the AssigneeGroupID field contains.\r\n\r\n**None**: The assignee group identifier is empty.\r\n\r\n**AssigneeGroupCode**: The assignee group identifier contains the assignee group code.\r\n\r\n**AssigneeGroupName**: The assignee group identifier contains the assignee group name."
      },
      "AssigneeGroupIDSpecification": {
        "type": "object",
        "properties": {
          "AssigneeGroupID": {
            "type": "string",
            "description": "The unique assignee group identifier.",
            "nullable": true
          },
          "AssigneeGroupIDType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AssigneeGroupIDType"
              }
            ],
            "description": "This type represents the assignee group identifier type values that the Symbility API supports.\r\n\r\nThis type is always used in conjunction with the AssigneeGroupID field because it defines what the AssigneeGroupID field contains.\r\n\r\n**None**: The assignee group identifier is empty.\r\n\r\n**AssigneeGroupCode**: The assignee group identifier contains the assignee group code.\r\n\r\n**AssigneeGroupName**: The assignee group identifier contains the assignee group name."
          }
        },
        "additionalProperties": false,
        "description": "This type represents the way to uniquely identify an assignee group using the Symbility API."
      },
      "AddClaimAssigneeSpecification": {
        "type": "object",
        "properties": {
          "AssignmentTypeCode": {
            "type": "string",
            "description": "The unique code of the assignment type.\r\n\r\nIf the assignmentTypeCode is empty, the default assignment type for the company will be used.\r\n\r\nIf assignmentTypeCode contains an invalid value, an error will be returned.",
            "nullable": true
          },
          "AssigneeCompanyIDSpecification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CompanyIDSpecification"
              }
            ],
            "description": "The identifier of the company related to the specified claimIDSpecification.\r\n\r\nThis is mostly useful in branch/head offices scenarios.\r\n\r\nIf no company is specified, Symbility will use the company of the account specified in the authentication header.",
            "nullable": true
          },
          "CompanyRole": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CompanyRole"
              }
            ],
            "description": "This type represents the company identifier type values that the Symbility API supports.\r\n\r\n**Assignee**: The company is an assignee.\r\n\r\n**Peer**: The company is a peer.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "ClaimAssignmentOption": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimAssignmentOption"
              }
            ],
            "description": "This type represents the claim assignment option values that the Symbility API supports.\r\n\r\n**None**: No option specified\r\n\r\n**DelegatedAuthority**: Assignee has Delegated Authority\r\n\r\n**ClaimStatusChange**: Assignee has the ability to change the claim status"
          },
          "AssignmentNotes": {
            "type": "string",
            "description": "The notes to be added to the assignment.\r\n\r\nIf the parameter is empty, the default notes associated with the assignment type will be used.",
            "nullable": true
          },
          "SetAssigneeAsInsuredContact": {
            "type": "boolean",
            "description": "This indicates whether the assignment should be the insured contact of the claim.\r\n\r\nIf the parameter is null, the insured contact will be determined by the assignment type value.",
            "nullable": true
          },
          "AssigneeGroupIDSpecification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AssigneeGroupIDSpecification"
              }
            ],
            "description": "The identifier of the assignee group of the company to assign the claim to.\r\n\r\nIf set the parameter is set to None the assignment options will be based on some of the options of the default group for the specified assignment type.",
            "nullable": true
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssigneeGroupOptions": {
        "type": "object",
        "properties": {
          "ConsiderSecondaryCoverage": {
            "type": "boolean",
            "description": "True to consider secondary coverage."
          }
        },
        "additionalProperties": false,
        "description": "This type represents various options when adding an assignee group using the Symbility API."
      },
      "AddClaimAssigneeGroupSpecification": {
        "type": "object",
        "properties": {
          "AssignmentTypeCode": {
            "type": "string",
            "description": "The unique code of the assignment type.\r\n\r\nIf the assignmentTypeCode is empty, the default assignment type for the company will be used.\r\n\r\nIf assignmentTypeCode contains an invalid value, an error will be returned.",
            "nullable": true
          },
          "AssigneeGroupIDSpecification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AssigneeGroupIDSpecification"
              }
            ],
            "description": "The identifier of the assignee group of the company to assign the claim to.",
            "nullable": true
          },
          "AssigneeGroupOptions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AssigneeGroupOptions"
              }
            ],
            "description": "The options applied to the assignee group.",
            "nullable": true
          },
          "AssignmentNotes": {
            "type": "string",
            "description": "The notes to be added to the assignment.\r\n\r\nIf the parameter is empty, the default notes associated with the assignment type will be used.",
            "nullable": true
          },
          "SetAssigneeAsInsuredContact": {
            "type": "boolean",
            "description": "This indicates whether the assignment should be the insured contact of the claim.\r\n\r\nIf the parameter is null, the insured contact will be determined by the assignment type value.",
            "nullable": true
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssigneeRepairOptions": {
        "type": "object",
        "properties": {
          "ConsiderSecondaryCoverage": {
            "type": "boolean",
            "description": "True to consider secondary coverage.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "This type represents various options when assigning with repair options business rules using the Symbility API."
      },
      "AddClaimAssigneeRepairOptionsSpecification": {
        "type": "object",
        "properties": {
          "EstimateID": {
            "type": "integer",
            "description": "The identifier of the estimate to use for the assignment, it can be omitted if not needed.",
            "format": "int32",
            "nullable": true
          },
          "AssigneeRepairOptions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AssigneeRepairOptions"
              }
            ],
            "description": "The options applied to the repair options.",
            "nullable": true
          },
          "AssignmentNotes": {
            "type": "string",
            "description": "The notes to be added to the assignment.\r\n\r\nIf the parameter is empty, the default notes associated with the assignment type will be used.",
            "nullable": true
          },
          "SetAssigneeAsInsuredContact": {
            "type": "boolean",
            "description": "This indicates whether the assignment should be the insured contact of the claim.\r\n\r\nIf the parameter is null, the insured contact will be determined by the assignment type value.",
            "nullable": true
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssigneeUserGroupIDType": {
        "enum": [
          "None",
          "AssigneeUserGroupCode",
          "AssigneeUserGroupName"
        ],
        "type": "string",
        "description": "This type represents the assignee user group identifier type values that the Symbility API supports.\r\n\r\nThis type is always used in conjunction with the AssigneeUserGroupID field because it defines what the AssigneeUserGroupID field contains.\r\n\r\n**None**: The assignee user group identifier is empty.\r\n\r\n**AssigneeUserGroupCode**: The assignee user group identifier contains the assignee user group code.\r\n\r\n**AssigneeUserGroupName**: The assignee user group identifier contains the assignee user group name."
      },
      "AssigneeUserGroupIDSpecification": {
        "type": "object",
        "properties": {
          "AssigneeUserGroupID": {
            "type": "string",
            "description": "The unique assignee user group identifier.",
            "nullable": true
          },
          "AssigneeUserGroupIDType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AssigneeUserGroupIDType"
              }
            ],
            "description": "This type represents the assignee user group identifier type values that the Symbility API supports.\r\n\r\nThis type is always used in conjunction with the AssigneeUserGroupID field because it defines what the AssigneeUserGroupID field contains.\r\n\r\n**None**: The assignee user group identifier is empty.\r\n\r\n**AssigneeUserGroupCode**: The assignee user group identifier contains the assignee user group code.\r\n\r\n**AssigneeUserGroupName**: The assignee user group identifier contains the assignee user group name."
          }
        },
        "additionalProperties": false,
        "description": "This type represents the way to uniquely identify an assignee group using the Symbility API."
      },
      "AssigneeUserGroupOptions": {
        "type": "object",
        "properties": {
          "ConsiderSecondaryCoverage": {
            "type": "boolean",
            "description": "True to consider secondary coverage.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "This type represents various options when adding an assignee user group using the Symbility API."
      },
      "AddClaimAssigneeUserGroupSpecification": {
        "type": "object",
        "properties": {
          "AssignmentTypeCode": {
            "type": "string",
            "description": "The identifier of the code used to select the claim assignment type.\r\n\r\nIf the assignmentTypeCode is empty, the default assignment type for the company will be used.\r\n\r\nIf assignmentTypeCode contains an invalid value, an error will be returned.",
            "nullable": true
          },
          "AssigneeUserGroupIDSpecification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AssigneeUserGroupIDSpecification"
              }
            ],
            "description": "The identifier of the assignee user group of the company to assign the claim to.",
            "nullable": true
          },
          "AssigneeUserGroupOptions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AssigneeUserGroupOptions"
              }
            ],
            "description": "The options applied to the assignee user group.",
            "nullable": true
          },
          "AssignmentNotes": {
            "type": "string",
            "description": "The notes to be added to the assignment.\r\n\r\nIf the parameter is empty, the default notes associated with the assignment type will be used.",
            "nullable": true
          },
          "SetAssigneeAsInsuredContact": {
            "type": "boolean",
            "description": "This indicates whether the assignment should be the insured contact of the claim.\r\n\r\nIf the parameter is null, the insured contact will be determined by the assignment type value.",
            "nullable": true
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ClaimUserRoleSpecification": {
        "type": "object",
        "properties": {
          "UserRoleLabel": {
            "maxLength": 50,
            "type": "string",
            "description": "The user role label as it is configured on the claim defaults page of Claims Connect.\r\n\r\nThe default role labels for insurance companies are: Loss Taker, Dispatcher, Desk Reviewer, Reinspector, Manager,\r\nAgent, Underwriter, Adjuster, Internal Supervisor, Field Supervisor.\r\n\r\nThe default role labels for contractors and independent adjusters are: Dispatcher, Supervisor, Manager, Estimator.\r\n\r\nIf the user role label is set to an empty string, the user won't have any role.",
            "nullable": true
          },
          "ForcePrimary": {
            "type": "boolean",
            "description": "When set to true and if the role is Adjuster/Estimator, the user will become the Primary Adjuster/Estimator.\r\n\r\nAny other Primary Adjuster/Estimator on the claim will no longer be Primary (there can only be one Primary on a claim)."
          },
          "ForceClaimPrimary": {
            "type": "boolean",
            "description": "When set to true and if \"ForcePrimary\" is true and if the role is Adjuster, the user will become primary adjuster\r\nfor the assignment as well as primary adjuster for the claim."
          }
        },
        "additionalProperties": false,
        "description": "This type represents a user's role in a claim when using the Symbility API."
      },
      "AddClaimInternalAssigneeSpecification": {
        "type": "object",
        "properties": {
          "AssignmentTypeCode": {
            "type": "string",
            "description": "The identifier of the code used to select the claim assignment type.\r\n\r\nIf the assignmentTypeCode is empty, the default assignment type for the company will be used.\r\n\r\nIf assignmentTypeCode contains an invalid value, an error will be returned.",
            "nullable": true
          },
          "AssigneeUserIDSpecification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserIDSpecification"
              }
            ],
            "description": "The identifier of the user to who the claim will be assigned.",
            "nullable": true
          },
          "ClaimUserRoleSpecification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimUserRoleSpecification"
              }
            ],
            "description": "The claim role of the user to assign.\r\n\r\nIf this parameter is set to null, Symbility will use the default role setup in the user's account.\r\n\r\nIf the user role label is not found, a warning will be returned and the parameter will be considered null.",
            "nullable": true
          },
          "AssignmentNotes": {
            "type": "string",
            "description": "The notes to be added to the assignment.\r\n\r\nIf the parameter is empty, the default notes associated with the assignment type will be used.",
            "nullable": true
          },
          "SetAssigneeAsInsuredContact": {
            "type": "boolean",
            "description": "This indicates whether the assignment should be the insured contact of the claim.\r\n\r\nIf the parameter is null, the insured contact will be determined by the assignment type value.",
            "nullable": true
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetClaimAssignmentStatusSpecification": {
        "type": "object",
        "properties": {
          "ClaimAssignmentStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimAssignmentStatus"
              }
            ],
            "description": "This type represents the claim assignment status values that the Symbility API supports.\r\n\r\n**None**: The claim is not assigned to a company.\r\n\r\n**AssignmentSent**: The claim assignment has been sent.\r\n\r\n**AssignmentReceived**: The claim assignment has been received.\r\n\r\n**InsuredContacted**: The insured has been contacted.\r\n\r\n**InspectionPerformed**: The inspection has been performed.\r\n\r\n**InspectionScheduled**: The inspection has been scheduled.\r\n\r\n**MitigationWorkStarted**: The mitigation work has started.\r\n\r\n**MitigationWorkCompleted**: The mitigation work has been completed.\r\n\r\n**EstimateReadyForReview**: One or many estimates have been marked Ready for Review.\r\n\r\n**EstimateCompleted**: One or many estimates have been completed.\r\n\r\n**EstimateApproved**: One or many estimates have been approved.\r\n\r\n**JobScheduled**: The job's start and completion dates have been scheduled.\r\n\r\n**JobNotSold**: The claim assignment has been marked Job Not Sold.\r\n\r\n**JobStarted**: The job has been started. \r\n\r\n**JobCompleted**: The job has been completed.\r\n\r\n**AssignmentCompleted**: The claim assignment has been completed.\r\n\r\n**AssignmentCancelled**: The claim assignment has been cancelled.\r\n\r\n**AssignmentDeclined**: The claim assignment has been declined.\r\n\r\n**AssignmentReopened**: The claim assignment has been reopened.\r\n\r\n**Multiple**: The claim has multiple claim assignment statuses.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "EventDate": {
            "type": "string",
            "description": "The date/time (UTC) the assignment status change has occurred.\r\n\r\nThis parameter can be left empty and the system will take the current date.\r\n\r\nNote that this parameter can't be in the future and can only be specified if the originator of the claim is allowing\r\nassignment status date changes and if the assignment status supports a user entered date.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetClaimAssignmentStatusInspectionScheduledSpecification": {
        "required": [
          "InspectionScheduledForDate"
        ],
        "type": "object",
        "properties": {
          "EventDate": {
            "type": "string",
            "description": "The date/time (UTC) the assignment status change (inspection scheduled) has occurred.\r\n\r\nThis parameter can be left empty and the system will take the current date.\r\n\r\nNote that this parameter can't be in the future and can only be specified if the originator of the claim is allowing\r\nassignment status date changes and if the assignment status supports a user entered date.",
            "format": "date-time",
            "nullable": true
          },
          "InspectionScheduledForDate": {
            "type": "string",
            "description": "The date/time (UTC) that the inspection is scheduled for.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "SetClaimAssignmentStatusJobScheduledSpecification": {
        "type": "object",
        "properties": {
          "EventDate": {
            "type": "string",
            "description": "The date/time (UTC) the assignment status change (job scheduled) has occurred.\r\n\r\nThis parameter can be left empty and the system will take the current date.\r\n\r\nNote that this parameter can't be in the future and can only be specified if the originator of the claim is allowing\r\nassignment status date changes and if the assignment status supports a user entered date.",
            "format": "date-time",
            "nullable": true
          },
          "JobScheduledStartDate": {
            "type": "string",
            "description": "The date/time (UTC) that the job is scheduled to start.",
            "format": "date-time"
          },
          "JobScheduledCompleteDate": {
            "type": "string",
            "description": "The date/time (UTC) that the job is scheduled to be completed.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "AuthenticationResponseDto": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "The requested authentication token.",
            "nullable": true
          },
          "expires_in": {
            "type": "integer",
            "description": "The number of seconds until the token expires.",
            "format": "int32"
          },
          "token_type": {
            "type": "string",
            "description": "The type of authentication token (will be set to `Bearer`).",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthenticationErrorResponseDto": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "The error code. Possible values: `invalid_request`, `invalid_client`, `invalid_grant`, `unauthorized_client`, `unsupported_grant_type`, `invalid_scope`.",
            "nullable": true
          },
          "error_description": {
            "type": "string",
            "description": "The detailed error description.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ItemDatabaseType": {
        "enum": [
          "Residential",
          "Commercial",
          "Contents",
          "Unknown"
        ],
        "type": "string",
        "description": "This type represents the item database types that the Symbility API supports.\r\n\r\n**Residential**: The item database is a residential item database.\r\n\r\n**Commercial**: The item database is a commercial item database.\r\n\r\n**Contents**: The item database is a contents item database.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "ItemDatabaseNodeType": {
        "enum": [
          "Database",
          "Version",
          "Region",
          "Customization",
          "Unknown"
        ],
        "type": "string",
        "description": "This type represents the item database node types that the Symbility API supports.\r\n\r\n**Database**: The node is the root database node.\r\n\r\n**Version**: The node is a version node.\r\n\r\n**Region**: The node is a region node.\r\n\r\n**Customization**: The node is a customization node.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "ItemDatabaseNode": {
        "type": "object",
        "properties": {
          "Name": {
            "maxLength": 150,
            "type": "string",
            "description": "The name of the item database node.",
            "nullable": true
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemDatabaseNodeType"
              }
            ],
            "description": "This type represents the item database node types that the Symbility API supports.\r\n\r\n**Database**: The node is the root database node.\r\n\r\n**Version**: The node is a version node.\r\n\r\n**Region**: The node is a region node.\r\n\r\n**Customization**: The node is a customization node.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          }
        },
        "additionalProperties": false,
        "description": "This type represents an item database node when using the Symbility API."
      },
      "ItemDatabase": {
        "type": "object",
        "properties": {
          "Name": {
            "maxLength": 150,
            "type": "string",
            "description": "The full name of the item database.",
            "nullable": true
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemDatabaseType"
              }
            ],
            "description": "This type represents the item database types that the Symbility API supports.\r\n\r\n**Residential**: The item database is a residential item database.\r\n\r\n**Commercial**: The item database is a commercial item database.\r\n\r\n**Contents**: The item database is a contents item database.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "Nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemDatabaseNode"
            },
            "description": "The nodes hierarchy for the item database.\r\n\r\nThe first element is the root.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents an item database when using the Symbility API."
      },
      "ClaimType": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ClaimTypeFlags"
        }
      },
      "ClaimContentsServiceLevel": {
        "enum": [
          "None",
          "Inventory",
          "Appraisal",
          "InventoryAndAppraisal",
          "Unknown"
        ],
        "type": "string",
        "description": "This type represents the contents replacement service level specified values that the Symbility API supports.\r\n\r\n**None**: No contents service level.\r\n\r\n**Inventory**: Our contents partner (Alliance member) is responsible for creating the inventory of the contents to be replaced.\r\n\r\n**Appraisal**: Our contents partner (Alliance member) is responsible for pricing the inventory of contents to be replaced.\r\n\r\n**InventoryAndAppraisal**: Our contents partner (Alliance member) is responsible for creating and pricing the inventory of contents to be replaced.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "GuestCompanyType": {
        "enum": [
          "None",
          "BrokerGeneral",
          "BrokerDomestic",
          "BrokerCommercial"
        ],
        "type": "string",
        "description": "This field represents the type of the guest/broker company."
      },
      "GuestCompany": {
        "type": "object",
        "properties": {
          "CompanyName": {
            "maxLength": 255,
            "type": "string",
            "description": "The name of the current guest company associated with the claim.",
            "nullable": true
          },
          "ParticipantGuestCompanyType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuestCompanyType"
              }
            ],
            "description": "This field represents the type of the guest/broker company."
          }
        },
        "additionalProperties": false,
        "description": "This type represents a guest company when using the Symbility API."
      },
      "ClaimStatus": {
        "enum": [
          "NotAssigned",
          "AssignmentSent",
          "AssignmentReceived",
          "InsuredContacted",
          "InspectionPerformed",
          "EstimateCompleted",
          "EstimateApproved",
          "JobStarted",
          "JobCompleted",
          "Closed",
          "Reopened",
          "ClosedCashedOut",
          "ClosedInvalid",
          "ResolvedResidential",
          "ResolvedCommercial",
          "ResolvedContents",
          "JobScheduled",
          "ClosedCanceled",
          "ClosedMerged",
          "Opened",
          "Contacted",
          "Inspected",
          "InProgress",
          "AtRepair",
          "Unknown"
        ],
        "type": "string",
        "description": "This type represents the claim status values that the Symbility API supports.\r\n\r\n**NotAssigned**: The claim is not assigned to a company.This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**AssignmentSent**: The claim assignment has been sent. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**AssignmentReceived**: The claim assignment has been received.This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**InsuredContacted**: The insured has been contacted. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**InspectionPerformed**: The inspection has been performed. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**EstimateCompleted**: One or many estimates have been completed. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**EstimateApproved**: One or many estimates have been approved. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**JobScheduled**: The job's start and completion dates have been scheduled. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**JobStarted**: The job has been started. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**JobPaused**: The job has been paused. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**JobCompleted**: The job has been completed. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**ResolvedResidential**: The residential part has been resolved.This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**ResolvedCommercial**: The commercial part has been resolved.This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**ResolvedContents**: The contents replacement part has been resolved. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**Closed**: The claim is closed.\r\n\r\n**ClosedCashedOut**: The claim is closed and cashed out.\r\n\r\n**ClosedInvalid**: The claim is closed and invalid (except for certain companies, all diagrams, estimates, forms, photos and external documents have been deleted). \r\n\r\n**ClosedCanceled**: The claim is closed and canceled(except for certain companies, all diagrams, estimates, forms, photos and external documents have been deleted).\r\n\r\n**ClosedMerged**: The claim is closed after being merged into another claim. ). This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**Reopened**: The claim has been reopened.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.\r\n\r\n**Opened**: The claim has been opened.\r\n\r\n**Contacted**: The insured has been contacted. In the case of multiple assignments, the timestamp for this status is when the insured first gets contacted.\r\n\r\n**Inspected**: The property has been inspected.\r\n\r\n**In Progress**: The claim is in progress.\r\n\r\n**At Repair**: The property is currently being repaired."
      },
      "PhoneLabel": {
        "enum": [
          "Business2",
          "BusinessFax",
          "Home2",
          "HomeFax",
          "Other",
          "Pager",
          "Unknown"
        ],
        "type": "string",
        "description": "This field represents the type of the guest company.\r\n\r\n**None**: No phone number specified. This value is now deprecated in version 1.3 (and above) of the API.\r\n\r\n**Business2**: Second business phone number.\r\n\r\n**BusinessFax**: Business fax number.\r\n\r\n**Home2**: Second home phone number.\r\n\r\n**HomeFax**: Home fax number.\r\n\r\n**Other**: Other phone number.\r\n\r\n**Pager**: Pager number.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "ClaimOverallRiskCondition": {
        "enum": [
          "None",
          "Excellent",
          "Average",
          "Poor",
          "SeeComments",
          "Unknown"
        ],
        "type": "string",
        "description": "This type represents the overall risk condition values that the Symbility API supports.\r\n\r\n**Excellent**: The overall risk condition is excellent.\r\n\r\n**Average**: The overall risk condition is average.\r\n\r\n**Poor**: The overall risk condition is poor.\r\n\r\n**SeeComments**: The overall risk condition is detailed in the comments section.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "DeductibleType": {
        "enum": [
          "None",
          "Fixed",
          "Variable"
        ],
        "type": "string",
        "description": "This type represents the type of deductible that the Symbility API supports.\r\n\r\n**None**: No deductible type.\r\n\r\n**Fixed**: The deductible will be set to a fixed type.\r\n\r\n**Variable**: The deductible will be set to a variable type."
      },
      "SublimitType": {
        "enum": [
          "FixedShared",
          "Fixed",
          "Variable"
        ],
        "type": "string",
        "description": "This type represents the type of sublimit when using the Symbility API.\r\n\r\n**Fixed**: The sublimit is fixed.\r\n\r\n**FixedShared**: The sublimit is fixed (shared).\r\n\r\n**Variable**: The sublimit is variable."
      },
      "ClaimSubcoverage": {
        "type": "object",
        "properties": {
          "ClaimSubcoverageID": {
            "type": "integer",
            "description": "The identifier of the claim coverage.  This property is ignored when creating a claim/subcoverage.",
            "format": "int32"
          },
          "Type": {
            "type": "string",
            "description": "Type of the subcoverage.\r\n\r\nIf the specified subcoverage type is not listed on Claims Connect, a new coverage type will be created on Claims\r\nConnect for that company.",
            "nullable": true
          },
          "Sublimit": {
            "type": "number",
            "description": "The sublimit value for the subcoverage.\r\n\r\nThe value is currency for FixedShared or Fixed SublimitType and percentage for Variable SublimitType.",
            "format": "decimal"
          },
          "SublimitType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SublimitType"
              }
            ],
            "description": "This type represents the type of sublimit when using the Symbility API.\r\n\r\n**Fixed**: The sublimit is fixed.\r\n\r\n**FixedShared**: The sublimit is fixed (shared).\r\n\r\n**Variable**: The sublimit is variable."
          },
          "SublimitMinimumAmount": {
            "type": "number",
            "description": "The minimum amount of the sublimit for the claim (currency).",
            "format": "decimal",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents a claim subcoverage when using the Symbility API."
      },
      "ClaimCoverage": {
        "type": "object",
        "properties": {
          "ClaimCoverageID": {
            "type": "integer",
            "description": "The identifier of the claim coverage.  This property is ignored when creating a claim/coverage.",
            "format": "int32"
          },
          "Name": {
            "maxLength": 255,
            "type": "string",
            "description": "Name of the coverage (often the same as Type).",
            "nullable": true
          },
          "Type": {
            "maxLength": 255,
            "type": "string",
            "description": "Type of the coverage.\r\n\r\nIf the specified coverage type is not listed on Claims Connect, a new coverage type will be created on Claims Connect\r\nfor that company.",
            "nullable": true
          },
          "RecoverableDepreciation": {
            "type": "boolean",
            "description": "True if the depreciation is recoverable by default for the coverage.",
            "default": true
          },
          "Default": {
            "type": "boolean",
            "description": "True if default coverage.",
            "default": false
          },
          "DeductibleType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeductibleType"
              }
            ],
            "description": "This type represents the type of deductible that the Symbility API supports.\r\n\r\n**None**: No deductible type.\r\n\r\n**Fixed**: The deductible will be set to a fixed type.\r\n\r\n**Variable**: The deductible will be set to a variable type."
          },
          "ClaimSubcoverages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClaimSubcoverage"
            },
            "description": "List of subcoverages for the current coverage.\r\n\r\nSet to null / empty if there are no subcoverages.",
            "nullable": true
          },
          "Reserve": {
            "type": "number",
            "description": "The reserve amount for the coverage (currency).",
            "format": "decimal",
            "nullable": true
          },
          "Limits": {
            "type": "number",
            "description": "The limits amount for the coverage (currency).",
            "format": "decimal",
            "nullable": true
          },
          "Deductible": {
            "type": "number",
            "description": "The deductible amount for the coverage.\r\n\r\nNote that this field can contain either a rate or an amount (currency).",
            "format": "decimal",
            "nullable": true
          },
          "DeductibleMinimumAmount": {
            "type": "number",
            "description": "The minimum amount of the deductible for the claim (currency).",
            "format": "decimal",
            "nullable": true
          },
          "DeductibleMaximumRate": {
            "type": "number",
            "description": "The maximum rate of the deductible for the claim (currency).",
            "format": "decimal",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents a claim coverage when using the Symbility API."
      },
      "InsuredContact": {
        "type": "object",
        "properties": {
          "Company": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Company"
              }
            ],
            "description": "The company set as the insured contact or the company of the user set as the insured contact.",
            "nullable": true
          },
          "User": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "description": "The user set as the insured contact â can be null.",
            "nullable": true
          },
          "DisplayName": {
            "maxLength": 255,
            "type": "string",
            "description": "The display name of the insured contact (as seen by the insured).",
            "nullable": true
          },
          "Phone": {
            "maxLength": 40,
            "type": "string",
            "description": "The phone number of the insured contact.",
            "nullable": true
          },
          "Email": {
            "maxLength": 255,
            "type": "string",
            "description": "The email address of the insured contact.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents an insured contact when using the Symbility API."
      },
      "ClaimUploadStatus": {
        "type": "object",
        "properties": {
          "PhotosUploaded": {
            "type": "boolean",
            "description": "True if all photos have been uploaded to Claims Connect or if no photos are present in the claim.\r\n\r\nFalse if there is at least one photo that has not been uploaded yet.",
            "default": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents the status of the claim upload from CoreLogic Mobile Claims to Claims Connect.\r\n\r\nThis type is typically used in combination with the ClaimPhotoUploadCompleted event."
      },
      "QuestionAnswer": {
        "type": "object",
        "properties": {
          "QuestionCode": {
            "type": "string",
            "description": "The code of the question.",
            "nullable": true
          },
          "AnswerCode": {
            "type": "string",
            "description": "The code of the answer.",
            "nullable": true
          },
          "AnswerValue": {
            "type": "string",
            "description": "The value of the answer.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents a claim question answer specified when using the Symbility API."
      },
      "GermanyAdditionalFields": {
        "type": "object",
        "properties": {
          "ParallelClaimNumber": {
            "maxLength": 50,
            "type": "string",
            "description": "The number of the parallel claim.",
            "nullable": true
          },
          "LossContactDescription": {
            "maxLength": 50,
            "type": "string",
            "description": "The description of the loss contact.",
            "nullable": true
          },
          "TermsAndConditionCode": {
            "maxLength": 50,
            "type": "string",
            "description": "The code of the terms and condition.",
            "nullable": true
          },
          "TermsAndConditionDescription": {
            "maxLength": 500,
            "type": "string",
            "description": "The description of the terms and condition.",
            "nullable": true
          },
          "HasPreviousClaims": {
            "type": "boolean",
            "description": "Whether or not previous claims exist.",
            "default": false
          },
          "LastSavedDate": {
            "type": "string",
            "description": "The last saved date of the claim.",
            "format": "date-time",
            "nullable": true
          },
          "PolicyLastChangedDate": {
            "type": "string",
            "description": "The last saved date of the policy.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents additional fields for the German market when using the Symbility API.\r\n\r\nThis type is only available for Germany."
      },
      "Claim": {
        "type": "object",
        "properties": {
          "WritingCompany": {
            "maxLength": 255,
            "type": "string",
            "description": "The writing company for the claim.",
            "nullable": true
          },
          "LetterheadLogoOverrideName": {
            "maxLength": 100,
            "type": "string",
            "description": "When a letterhead name is specified here, the logo of that letterhead will always be used when printing the claim.\r\n\r\nThis overrides any letterhead logo selected when printing.",
            "nullable": true
          },
          "ItemDatabases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemDatabase"
            },
            "description": "The item databases attached to the claim.",
            "nullable": true
          },
          "FileNumber": {
            "maxLength": 50,
            "type": "string",
            "description": "The claim's file number (if any), different from the claim number.",
            "nullable": true
          },
          "LossContactName": {
            "maxLength": 255,
            "type": "string",
            "description": "The loss contact name (if different than the insured name).",
            "nullable": true
          },
          "LossContactPhone": {
            "maxLength": 40,
            "type": "string",
            "description": "The loss contact phone number (if different than the insured's phone number).",
            "nullable": true
          },
          "InternalAssignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "description": "The internal users that are assigned to the claim.",
            "nullable": true
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimType"
              }
            ],
            "description": "This type represents the claim type values that the Symbility API supports. This is a bit field, a set of flags.\r\n\r\nThe ClaimType can be one or more of the following values.\r\n\r\n**Residential**: The claim concerns the structure of a residential property.\r\n\r\n**Commercial**: The claim concerns the structure of a commercial property.\r\n\r\n**Contents**: The claim involves contents replacement.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "ContentsServiceLevel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimContentsServiceLevel"
              }
            ],
            "description": "This type represents the contents replacement service level specified values that the Symbility API supports.\r\n\r\n**None**: No contents service level.\r\n\r\n**Inventory**: Our contents partner (Alliance member) is responsible for creating the inventory of the contents to be replaced.\r\n\r\n**Appraisal**: Our contents partner (Alliance member) is responsible for pricing the inventory of contents to be replaced.\r\n\r\n**InventoryAndAppraisal**: Our contents partner (Alliance member) is responsible for creating and pricing the inventory of contents to be replaced.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "GuestCompany": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuestCompany"
              }
            ],
            "description": "The broker/guest company for the claim.",
            "nullable": true
          },
          "ClosedDate": {
            "type": "string",
            "description": "The date and time (UTC) when the claim was closed.",
            "format": "date-time",
            "nullable": true
          },
          "Status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimStatus"
              }
            ],
            "description": "This type represents the claim status values that the Symbility API supports.\r\n\r\n**NotAssigned**: The claim is not assigned to a company.This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**AssignmentSent**: The claim assignment has been sent. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**AssignmentReceived**: The claim assignment has been received.This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**InsuredContacted**: The insured has been contacted. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**InspectionPerformed**: The inspection has been performed. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**EstimateCompleted**: One or many estimates have been completed. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**EstimateApproved**: One or many estimates have been approved. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**JobScheduled**: The job's start and completion dates have been scheduled. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**JobStarted**: The job has been started. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**JobPaused**: The job has been paused. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**JobCompleted**: The job has been completed. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**ResolvedResidential**: The residential part has been resolved.This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**ResolvedCommercial**: The commercial part has been resolved.This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**ResolvedContents**: The contents replacement part has been resolved. This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**Closed**: The claim is closed.\r\n\r\n**ClosedCashedOut**: The claim is closed and cashed out.\r\n\r\n**ClosedInvalid**: The claim is closed and invalid (except for certain companies, all diagrams, estimates, forms, photos and external documents have been deleted). \r\n\r\n**ClosedCanceled**: The claim is closed and canceled(except for certain companies, all diagrams, estimates, forms, photos and external documents have been deleted).\r\n\r\n**ClosedMerged**: The claim is closed after being merged into another claim. ). This value is now deprecated in version 1.22 (and above) of the API.\r\n\r\n**Reopened**: The claim has been reopened.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API.\r\n\r\n**Opened**: The claim has been opened.\r\n\r\n**Contacted**: The insured has been contacted. In the case of multiple assignments, the timestamp for this status is when the insured first gets contacted.\r\n\r\n**Inspected**: The property has been inspected.\r\n\r\n**In Progress**: The claim is in progress.\r\n\r\n**At Repair**: The property is currently being repaired."
          },
          "Number": {
            "maxLength": 50,
            "type": "string",
            "description": "The claim number.",
            "nullable": true
          },
          "UniqueID": {
            "type": "string",
            "description": "The claim globally unique identifier (Guid).",
            "nullable": true
          },
          "CreationDate": {
            "type": "string",
            "description": "The date and time (UTC) the claim was created on Claims Connect.",
            "format": "date-time"
          },
          "LossDate": {
            "type": "string",
            "description": "The date and time (UTC) of loss.",
            "format": "date-time"
          },
          "LossType": {
            "maxLength": 50,
            "type": "string",
            "description": "The type of loss.",
            "nullable": true
          },
          "CatastropheNumber": {
            "maxLength": 50,
            "type": "string",
            "description": "The catastrophe number.",
            "nullable": true
          },
          "Reinspection": {
            "type": "boolean",
            "description": "True if the claim is a reinspection.",
            "default": false
          },
          "Emergency": {
            "type": "boolean",
            "description": "True if the claim is an emergency.",
            "default": false
          },
          "Secure": {
            "type": "boolean",
            "description": "True if the claim is a secure claim."
          },
          "BuiltYear": {
            "type": "integer",
            "description": "The year the property was built.",
            "format": "int32",
            "nullable": true
          },
          "InsuredCompanyName": {
            "maxLength": 255,
            "type": "string",
            "description": "The company name of the insured.",
            "nullable": true
          },
          "InsuredTitle": {
            "maxLength": 50,
            "type": "string",
            "description": "The title of the insured.",
            "nullable": true
          },
          "InsuredFirstName": {
            "maxLength": 50,
            "type": "string",
            "description": "The first name of the insured.",
            "nullable": true
          },
          "InsuredLastName": {
            "maxLength": 50,
            "type": "string",
            "description": "The last name of the insured.",
            "nullable": true
          },
          "InsuredTitle2": {
            "maxLength": 50,
            "type": "string",
            "description": "The title of the second insured.",
            "nullable": true
          },
          "InsuredFirstName2": {
            "maxLength": 50,
            "type": "string",
            "description": "The first name of the second insured.",
            "nullable": true
          },
          "InsuredLastName2": {
            "maxLength": 50,
            "type": "string",
            "description": "The last name of the second insured.",
            "nullable": true
          },
          "InsuredHomePhone": {
            "maxLength": 40,
            "type": "string",
            "description": "The home phone of the insured.",
            "nullable": true
          },
          "InsuredBusinessPhone": {
            "maxLength": 40,
            "type": "string",
            "description": "The business phone of the insured.",
            "nullable": true
          },
          "InsuredMobilePhone": {
            "maxLength": 40,
            "type": "string",
            "description": "The mobile phone of the insured.",
            "nullable": true
          },
          "InsuredOtherPhone": {
            "maxLength": 40,
            "type": "string",
            "description": "The other phone of the insured.",
            "nullable": true
          },
          "InsuredOtherPhoneLabel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneLabel"
              }
            ],
            "description": "This field represents the type of the guest company.\r\n\r\n**None**: No phone number specified. This value is now deprecated in version 1.3 (and above) of the API.\r\n\r\n**Business2**: Second business phone number.\r\n\r\n**BusinessFax**: Business fax number.\r\n\r\n**Home2**: Second home phone number.\r\n\r\n**HomeFax**: Home fax number.\r\n\r\n**Other**: Other phone number.\r\n\r\n**Pager**: Pager number.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "InsuredEmail": {
            "maxLength": 255,
            "type": "string",
            "description": "The email address of the insured.",
            "nullable": true
          },
          "InsuredAddress": {
            "required": [
              "Country",
              "State"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "The address of the insured.",
            "nullable": true
          },
          "LossAddress": {
            "required": [
              "Country",
              "State"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "The loss address (if different than the insured's address).",
            "nullable": true
          },
          "InitialLossReport": {
            "type": "string",
            "description": "The initial loss report (multiline).",
            "nullable": true
          },
          "Cause": {
            "type": "string",
            "description": "The cause of the loss (multiline).",
            "nullable": true
          },
          "Damages": {
            "type": "string",
            "description": "The damages description (multiline).",
            "nullable": true
          },
          "GeneralComments": {
            "type": "string",
            "description": "The general comments (multiline).",
            "nullable": true
          },
          "OverallRiskCondition": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimOverallRiskCondition"
              }
            ],
            "nullable": true
          },
          "TaxInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimTaxInfo"
              }
            ],
            "description": "The tax information.",
            "nullable": true
          },
          "OverheadAndProfitInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimOverheadAndProfitInfo"
              }
            ],
            "description": "The overhead and profit information.",
            "nullable": true
          },
          "ContentsOverheadAndProfitInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimOverheadAndProfitInfo"
              }
            ],
            "description": "The contents overhead and profit information.",
            "nullable": true
          },
          "MinimumCharge": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimMinimumCharge"
              }
            ],
            "description": "The minimum charge adjustments information.",
            "nullable": true
          },
          "PolicyNumber": {
            "maxLength": 100,
            "type": "string",
            "description": "The policy number.",
            "nullable": true
          },
          "PolicyType": {
            "maxLength": 50,
            "type": "string",
            "description": "The policy type.",
            "nullable": true
          },
          "PolicyTimesRenewed": {
            "type": "integer",
            "description": "The number of times the policy was renewed.",
            "format": "int32",
            "default": 0
          },
          "WithoutPrejudice": {
            "type": "boolean",
            "description": "True if without prejudice.",
            "default": false
          },
          "Coverages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClaimCoverage"
            },
            "description": "The coverages for the claim.",
            "nullable": true
          },
          "DeductibleType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeductibleType"
              }
            ],
            "description": "This type represents the type of deductible that the Symbility API supports.\r\n\r\n**None**: No deductible type.\r\n\r\n**Fixed**: The deductible will be set to a fixed type.\r\n\r\n**Variable**: The deductible will be set to a variable type."
          },
          "ExcludeCoverageIfLessThanMinimumDeductible": {
            "type": "boolean",
            "description": "If true, the coverage will be excluded from estimates where the total amount is less than the minimum deductible.",
            "default": false
          },
          "PolicyStartDate": {
            "type": "string",
            "description": "The policy start date.",
            "format": "date-time",
            "nullable": true
          },
          "PolicyEndDate": {
            "type": "string",
            "description": "The policy end date.",
            "format": "date-time",
            "nullable": true
          },
          "FlatDeductible": {
            "type": "number",
            "description": "The flat deductible (currency).",
            "format": "decimal",
            "nullable": true
          },
          "DeductibleMinimumAmount": {
            "type": "number",
            "description": "The minimum amount of the deductible for the claim (currency).",
            "format": "decimal",
            "nullable": true
          },
          "DeductibleMaximumRate": {
            "type": "number",
            "description": "The maximum rate of the deductible for the claim (percentage).",
            "format": "decimal",
            "nullable": true
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            },
            "description": "The custom fields for the claim.\r\n\r\nThis also includes the public custom fields of the assignees.",
            "nullable": true
          },
          "CurrentOwner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "description": "The user who currently have the ownership of the claim (null if no user has ownership).",
            "nullable": true
          },
          "Originator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Company"
              }
            ],
            "description": "The company that created the claim.",
            "nullable": true
          },
          "InsuredContact": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InsuredContact"
              }
            ],
            "description": "The insured contact for the claim.",
            "nullable": true
          },
          "DelegatedAuthority": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Company"
            },
            "description": "The companies that were assigned to the claim with delegated authority.",
            "nullable": true
          },
          "Assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Company"
            },
            "description": "The companies that were assigned to the claim.",
            "nullable": true
          },
          "Peers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Company"
            },
            "description": "The users that were assigned to the claim.",
            "nullable": true
          },
          "UploadStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimUploadStatus"
              }
            ],
            "description": "The upload status of the claim.",
            "nullable": true
          },
          "Assignments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClaimAssignment"
            },
            "description": "The assignments currently associated with the claim.",
            "nullable": true
          },
          "QuestionAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuestionAnswer"
            },
            "description": "The question answers of the claim.",
            "nullable": true
          },
          "GermanyAdditionalFields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GermanyAdditionalFields"
              }
            ],
            "description": "The additional fields for Germany. This property is only available for Germany.",
            "nullable": true
          },
          "ExternalReference": {
            "maxLength": 50,
            "type": "string",
            "description": "A string value that can be used for claim lookup.",
            "nullable": true
          },
          "ClaimContact": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "description": "The user being the point of contact within the claim.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents the claim data returned by the Symbility API."
      },
      "VoiceAnnotation": {
        "type": "object",
        "properties": {
          "VoiceAnnotationID": {
            "type": "integer",
            "description": "The identifier of the voice annotation.",
            "format": "int32"
          },
          "Caption": {
            "type": "string",
            "description": "The caption of the voice annotation.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents a voice annotation when using the Symbility API."
      },
      "JournalEntryType": {
        "enum": [
          "Automatic",
          "Manual",
          "Unknown"
        ],
        "type": "string",
        "description": "This type represents the journal entry type values that the Symbility API supports.\r\n\r\n**Automatic**: The journal entry was automatically generated by the system.\r\n\r\n**Manual**: The journal entry was added manually by a user.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "JournalEntry": {
        "type": "object",
        "properties": {
          "CreationDate": {
            "type": "string",
            "description": "The date and time (UTC) the journal entry was entered.",
            "format": "date-time"
          },
          "Entry": {
            "type": "string",
            "description": "The journal entry text (multiline).",
            "nullable": true
          },
          "AuthorHeadOfficeCompanyID": {
            "maxLength": 11,
            "type": "string",
            "description": "The Symbility company ID of the head office of the author of the journal entry.",
            "nullable": true
          },
          "AuthorCompanyID": {
            "maxLength": 11,
            "type": "string",
            "description": "The Symbility company ID of the author of the journal entry.",
            "nullable": true
          },
          "AuthorExternalSystemCompanyCode": {
            "maxLength": 20,
            "type": "string",
            "description": "The external system company code of the author if defined in the API account.",
            "nullable": true
          },
          "AuthorCompanyName": {
            "maxLength": 255,
            "type": "string",
            "description": "The company name of the author of the journal entry.",
            "nullable": true
          },
          "AuthorUserFullName": {
            "maxLength": 101,
            "type": "string",
            "description": "The full name (&lt;first name&gt;&lt;space&gt;&lt;last name&gt;) of the author of the journal entry.\r\nAn insured guest user's full name includes their title(&lt;title&gt;&lt;space&gt;&lt;first\r\nname&gt;&lt;space&gt;&lt;last name&gt;).",
            "nullable": true
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/JournalEntryType"
              }
            ],
            "description": "This type represents the journal entry type values that the Symbility API supports.\r\n\r\n**Automatic**: The journal entry was automatically generated by the system.\r\n\r\n**Manual**: The journal entry was added manually by a user.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          }
        },
        "additionalProperties": false,
        "description": "This type represents a journal entry when using the Symbility API."
      },
      "ClaimPaymentStatus": {
        "enum": [
          "None",
          "Pending",
          "Submitted",
          "Approved",
          "Cancelled",
          "Rejected",
          "Unknown"
        ],
        "type": "string",
        "description": "This type represents the status of a payment.\r\n\r\n**Pending**: The payment status is pending.\r\n\r\n**Submitted**: The payment status is submitted.\r\n\r\n**Approved**: The payment status is approved.\r\n\r\n**Cancelled**: The payment status is cancelled.\r\n\r\n**Rejected**: The payment status is rejected.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "ClaimPaymentProperties": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ClaimPaymentPropertiesFlags"
        }
      },
      "ClaimPayment": {
        "type": "object",
        "properties": {
          "PaymentID": {
            "type": "integer",
            "description": "The identifier of the payment.",
            "format": "int32"
          },
          "CreationDate": {
            "type": "string",
            "description": "The date and time (UTC) the payment was created.",
            "format": "date-time"
          },
          "AuthorHeadOfficeCompanyID": {
            "maxLength": 11,
            "type": "string",
            "description": "The Symbility company ID of the head office of the author of the payment.",
            "nullable": true
          },
          "AuthorCompanyID": {
            "maxLength": 11,
            "type": "string",
            "description": "The Symbility company ID of the author of the payment.",
            "nullable": true
          },
          "AuthorExternalSystemCompanyCode": {
            "maxLength": 20,
            "type": "string",
            "description": "The external system company code of the author if defined in the API account.",
            "nullable": true
          },
          "AuthorCompanyName": {
            "maxLength": 255,
            "type": "string",
            "description": "The company name of the author of the payment.",
            "nullable": true
          },
          "Name": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the payment.",
            "nullable": true
          },
          "Status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimPaymentStatus"
              }
            ],
            "description": "This type represents the status of a payment.\r\n\r\n**Pending**: The payment status is pending.\r\n\r\n**Submitted**: The payment status is submitted.\r\n\r\n**Approved**: The payment status is approved.\r\n\r\n**Cancelled**: The payment status is cancelled.\r\n\r\n**Rejected**: The payment status is rejected.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "TotalReplacementCost": {
            "type": "number",
            "description": "Total of the replacement cost value of all completed estimates (currency).",
            "format": "decimal"
          },
          "TotalActualCashValue": {
            "type": "number",
            "description": "Total of the net ACV of all completed estimates (currency).",
            "format": "decimal"
          },
          "TotalAmountPayable": {
            "type": "number",
            "description": "Total of the amount payable of all completed estimates (currency).",
            "format": "decimal"
          },
          "TotalAmountPayableDepreciationRecovered": {
            "type": "number",
            "description": "Total of the amount if depreciation is recovered of all completed estimates (currency).",
            "format": "decimal"
          },
          "Amount": {
            "type": "number",
            "description": "The amount of the payment (currency).",
            "format": "decimal"
          },
          "InvoiceNumber": {
            "maxLength": 50,
            "type": "string",
            "description": "The invoice number of the payment.",
            "nullable": true
          },
          "DeductibleActualCashValue": {
            "type": "number",
            "description": "The actual cash value of the deducitble of the payment (currency).",
            "format": "decimal"
          },
          "TotalPreviousAppliedDeductible": {
            "type": "number",
            "description": "The total amount of the deductible previously applied on the payment (currency).",
            "format": "decimal"
          },
          "AdditionalDeductibleIfDepreciationRecovered": {
            "type": "number",
            "description": "The additional deductible that will be applied if the depreciation is recovered (currency).",
            "format": "decimal"
          },
          "AppliedDeductible": {
            "type": "number",
            "description": "The amount of the payment applied to the deductible (currency).",
            "format": "decimal"
          },
          "PaymentAmount": {
            "type": "number",
            "description": "The effective payment amount (the invoice amount minus deductible and after limits) (currency).",
            "format": "decimal"
          },
          "CheckNumber": {
            "maxLength": 50,
            "type": "string",
            "description": "The check number of the payment.",
            "nullable": true
          },
          "PaidToTheOrderOf": {
            "maxLength": 255,
            "type": "string",
            "description": "The \"Paid to\" of the payment.",
            "nullable": true
          },
          "Comments": {
            "type": "string",
            "description": "The comments of the payment.",
            "nullable": true
          },
          "Properties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimPaymentProperties"
              }
            ],
            "description": "This type represents the properties of the payment that the Symbility API supports.\r\n\r\n**None**: There are no properties applied to the payment.\r\n\r\n**ApplyDeductible**: The payment should be applied towards the deductible.\r\n\r\n**FullPayment**: The payment fully covers all estimate items of the payment.\r\n\r\n**DepreciationRecovered**: The payment covers the recoverable depreciation of the estimate items of the payment.\r\n\r\n**PartialPayment**: The payment partially covers the estimate items of the payment without covering their actual cash value.\r\n\r\n**AcvPayment**: The payment covers the actual cash value of the estimate items of the payment.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "ExternalDocuments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalDocument"
            },
            "description": "The external documents attached to this payment.",
            "nullable": true
          },
          "ApprovedDate": {
            "type": "string",
            "description": "The date and time (UTC) the payment was approved.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents a payment made to a claim when using the Symbility API."
      },
      "GetClaimDetails": {
        "type": "object",
        "properties": {
          "Claim": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Claim"
              }
            ],
            "description": "The summary of the claim.",
            "nullable": true
          },
          "Diagrams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Diagram"
            },
            "description": "The diagrams attached to the claim.",
            "nullable": true
          },
          "Estimates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Estimate"
            },
            "description": "The estimates attached to the claim.",
            "nullable": true
          },
          "PhotoPages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhotoPage"
            },
            "description": "The photo pages attached to the claim.",
            "nullable": true
          },
          "VoiceAnnotations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoiceAnnotation"
            },
            "description": "The voice annotations attached to the claim.",
            "nullable": true
          },
          "Forms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Form"
            },
            "description": "The forms attached to the claim.",
            "nullable": true
          },
          "JournalEntries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JournalEntry"
            },
            "description": "The journal entries attached to the claim.",
            "nullable": true
          },
          "ExternalDocuments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalDocument"
            },
            "description": "The external documents attached to the claim.",
            "nullable": true
          },
          "HandwrittenNotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HandwrittenNote"
            },
            "description": "The handwritten notes attached to the claim.",
            "nullable": true
          },
          "Payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClaimPayment"
            },
            "description": "The payments of the claim.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents the details of a claim when using the Symbility API."
      },
      "JournalEntrySpecification": {
        "type": "object",
        "properties": {
          "Entry": {
            "type": "string",
            "description": "The journal entry text (multiline).",
            "nullable": true
          },
          "NotifyParticipants": {
            "type": "boolean",
            "description": "True if the claim participants should be notified of this manual journal entry.",
            "default": false
          },
          "IntendedForInsured": {
            "type": "boolean",
            "description": "True if the journal entry should be visible to the insured in LINK.\r\n\r\nThe insured will also receive a notification if notifications are configured in his account."
          }
        },
        "additionalProperties": false,
        "description": "This type represents the journal entry structure needed to add a journal entry using the Symbility API."
      },
      "TimeZone": {
        "enum": [
          "Hawaii",
          "Alaska",
          "PacificTime",
          "MountainTime",
          "Arizona",
          "CentralTime",
          "Saskatchewan",
          "Mexico",
          "EasternTime",
          "IndianaEast",
          "AtlanticTime",
          "Newfoundland",
          "GreenwichMeanTime",
          "GreenwichStandardTime",
          "CentralEuropeanTime",
          "RomanceTime",
          "WesternEurope",
          "SouthAfrica",
          "GtbStandardTime",
          "WesternAustralia",
          "Tokyo",
          "AusCentralStandardTime",
          "CentralAustralia",
          "AusEasternStandardTime",
          "EasternAustralia",
          "Tasmania",
          "Utc",
          "UseApiAccountCompanyTimeZone"
        ],
        "type": "string",
        "description": "This type represents the time zone values that the Symbility API supports.\r\n\r\n**Special values**: UseApiAccountCompanyTimeZone, Utc"
      },
      "WritingCompanySpecification": {
        "type": "object",
        "properties": {
          "Name": {
            "maxLength": 255,
            "type": "string",
            "description": "The name of the writing company. If the name is empty, no writing company will be used.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents a writing company when using the Symbility API."
      },
      "GuestCompanyIDType": {
        "enum": [
          "None",
          "Code",
          "CompanyName"
        ],
        "type": "string",
        "description": "This type represents the guest/broker company identifier type values that the Symbility API supports.\r\n\r\n**None**: The guest/broker company identifier is empty.\r\n\r\n**Code**: The guest/broker company identifier contains the code of the company.\r\n\r\n**Company Name**: The guest/broker company identifier contains the company name."
      },
      "GuestCompanyIDSpecification": {
        "type": "object",
        "properties": {
          "GuestCompanyID": {
            "maxLength": 255,
            "type": "string",
            "description": "The identifier of the guest/broker company. \r\n\r\nIt can either represent a company name or a code which is specified in the second parameter. \r\n\r\nIf the field is empty, no guest/broker company will be used.",
            "nullable": true
          },
          "ParticipantGuestCompanyIDType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuestCompanyIDType"
              }
            ],
            "description": "This type represents the guest/broker company identifier type values that the Symbility API supports.\r\n\r\n**None**: The guest/broker company identifier is empty.\r\n\r\n**Code**: The guest/broker company identifier contains the code of the company.\r\n\r\n**Company Name**: The guest/broker company identifier contains the company name."
          }
        },
        "additionalProperties": false,
        "description": "This type represents a guest company specification when using the Symbility API."
      },
      "ClaimAssignmentSpecification": {
        "type": "object",
        "properties": {
          "ClaimAssignmentCode": {
            "maxLength": 20,
            "type": "string",
            "description": "The assignment code to be used.",
            "nullable": true
          },
          "Assignee": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CompanyIDSpecification"
              }
            ],
            "description": "The company the claim is assigned to.",
            "nullable": true
          },
          "InternalAssignee": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserIDSpecification"
              }
            ],
            "description": "The user the claim is assigned to.",
            "nullable": true
          },
          "Options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimAssignmentOption"
              }
            ],
            "description": "This type represents the claim assignment option values that the Symbility API supports.\r\n\r\n**None**: No option specified\r\n\r\n**DelegatedAuthority**: Assignee has Delegated Authority\r\n\r\n**ClaimStatusChange**: Assignee has the ability to change the claim status"
          }
        },
        "additionalProperties": false,
        "description": "This type represents the claim assignment info when using the Symbility API."
      },
      "ClaimSpecification": {
        "required": [
          "InsuredFirstName",
          "InsuredLastName",
          "LossDate",
          "Number",
          "PolicyNumber"
        ],
        "type": "object",
        "properties": {
          "CreationDate": {
            "type": "string",
            "description": "The date and time (UTC) of the claim creation.\r\n\r\nBy default, the system uses the current date and time, if none is specified.",
            "format": "date-time"
          },
          "LossContactName": {
            "maxLength": 255,
            "type": "string",
            "description": "The loss contact name (if different than the insured name).",
            "nullable": true
          },
          "LossContactPhone": {
            "maxLength": 40,
            "type": "string",
            "description": "The loss contact phone number (if different than the insured's phone number).",
            "nullable": true
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimType"
              }
            ],
            "description": "This type represents the claim type values that the Symbility API supports. This is a bit field, a set of flags.\r\n\r\nThe ClaimType can be one or more of the following values.\r\n\r\n**Residential**: The claim concerns the structure of a residential property.\r\n\r\n**Commercial**: The claim concerns the structure of a commercial property.\r\n\r\n**Contents**: The claim involves contents replacement.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "ContentsServiceLevel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimContentsServiceLevel"
              }
            ],
            "description": "This type represents the contents replacement service level specified values that the Symbility API supports.\r\n\r\n**None**: No contents service level.\r\n\r\n**Inventory**: Our contents partner (Alliance member) is responsible for creating the inventory of the contents to be replaced.\r\n\r\n**Appraisal**: Our contents partner (Alliance member) is responsible for pricing the inventory of contents to be replaced.\r\n\r\n**InventoryAndAppraisal**: Our contents partner (Alliance member) is responsible for creating and pricing the inventory of contents to be replaced.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "Number": {
            "maxLength": 50,
            "type": "string",
            "description": "The claim number.\r\n\r\nAll claims within a company need to have a unique claim number.",
            "nullable": true
          },
          "LossDate": {
            "type": "string",
            "description": "The date and time of loss.",
            "format": "date-time"
          },
          "LossDateTimeZone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeZone"
              }
            ],
            "description": "The time zone associated with the date and time of loss.\r\n\r\nThe default value is UseApiAccountCompanyTimeZone which assumes that the LossDate is specified in the\r\ntime zone of the company associated with the API account.\r\n\r\n**Special values**: UseApiAccountCompanyTimeZone, Utc"
          },
          "LossType": {
            "maxLength": 50,
            "type": "string",
            "description": "The type of loss.",
            "nullable": true
          },
          "CatastropheNumber": {
            "maxLength": 50,
            "type": "string",
            "description": "The catastrophe number.",
            "nullable": true
          },
          "Reinspection": {
            "type": "boolean",
            "description": "True if the claim is a reinspection.",
            "default": false
          },
          "Emergency": {
            "type": "boolean",
            "description": "True if the claim is an emergency.",
            "default": false
          },
          "WritingCompanySpecification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WritingCompanySpecification"
              }
            ],
            "description": "The writing company associated with the claim.\r\n\r\nIf no WritingCompanySpecification is specified, Symbility will use the company's default writing company or the user's\r\nif specified.",
            "nullable": true
          },
          "LetterheadLogoOverrideName": {
            "maxLength": 100,
            "type": "string",
            "description": "When a letterhead name is specified here, the logo of that letterhead will always be used when printing the claim.\r\n\r\nThis overrides any letterhead logo selected when printing.",
            "nullable": true
          },
          "FileNumber": {
            "maxLength": 50,
            "type": "string",
            "description": "The claim's file number (if any), different from the claim number.\r\n\r\nThis property should only be used by vendors.",
            "nullable": true
          },
          "BrokerCompanyIDSpecification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuestCompanyIDSpecification"
              }
            ],
            "description": "The identifier and type of identifier used to find the broker company associated with the claim.\r\n\r\nIf no BrokerCompanyIDSpecification is specified, Symbility will use the company's default broker company or the user's\r\nif specified.",
            "nullable": true
          },
          "BuiltYear": {
            "type": "integer",
            "description": "The year the property was built.",
            "format": "int32",
            "nullable": true
          },
          "InsuredCompanyName": {
            "maxLength": 255,
            "type": "string",
            "description": "The company name of the insured.\r\n\r\nThis field is mandatory when creating a new claim unless a first name, last name have been specified.",
            "nullable": true
          },
          "InsuredTitle": {
            "maxLength": 50,
            "type": "string",
            "description": "The title of the insured.",
            "nullable": true
          },
          "InsuredFirstName": {
            "maxLength": 50,
            "type": "string",
            "description": "The first name of the insured.\r\n\r\nThis field is mandatory when creating a new claim unless a company has been specified.",
            "nullable": true
          },
          "InsuredLastName": {
            "maxLength": 50,
            "type": "string",
            "description": "The last name of the insured.\r\n\r\nThis field is mandatory when creating a new claim unless a company has been specified.",
            "nullable": true
          },
          "InsuredTitle2": {
            "maxLength": 50,
            "type": "string",
            "description": "The title of the second insured.",
            "nullable": true
          },
          "InsuredFirstName2": {
            "maxLength": 50,
            "type": "string",
            "description": "The first name of the second insured.",
            "nullable": true
          },
          "InsuredLastName2": {
            "maxLength": 50,
            "type": "string",
            "description": "The last name of the second insured.",
            "nullable": true
          },
          "InsuredHomePhone": {
            "maxLength": 40,
            "type": "string",
            "description": "The home phone of the insured.",
            "nullable": true
          },
          "InsuredBusinessPhone": {
            "maxLength": 40,
            "type": "string",
            "description": "The business phone of the insured.",
            "nullable": true
          },
          "InsuredMobilePhone": {
            "maxLength": 40,
            "type": "string",
            "description": "The mobile phone of the insured.",
            "nullable": true
          },
          "InsuredOtherPhone": {
            "maxLength": 40,
            "type": "string",
            "description": "The other phone of the insured.",
            "nullable": true
          },
          "InsuredOtherPhoneLabel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneLabel"
              }
            ],
            "description": "This field represents the type of the guest company.\r\n\r\n**None**: No phone number specified. This value is now deprecated in version 1.3 (and above) of the API.\r\n\r\n**Business2**: Second business phone number.\r\n\r\n**BusinessFax**: Business fax number.\r\n\r\n**Home2**: Second home phone number.\r\n\r\n**HomeFax**: Home fax number.\r\n\r\n**Other**: Other phone number.\r\n\r\n**Pager**: Pager number.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "InsuredEmail": {
            "maxLength": 255,
            "type": "string",
            "description": "The email address of the insured.",
            "nullable": true
          },
          "Secure": {
            "type": "boolean",
            "description": "True if the claim is a secure claim.",
            "default": false
          },
          "InsuredAddress": {
            "required": [
              "Country",
              "State"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "The address of the insured.",
            "nullable": true
          },
          "LossAddress": {
            "required": [
              "Country",
              "State"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "The loss address (if different than the insured's address).",
            "nullable": true
          },
          "AddInsuredAsParticipant": {
            "type": "boolean",
            "description": "If true, the insured will be added as a guest user to the claim.",
            "default": false
          },
          "InitialLossReport": {
            "type": "string",
            "description": "The initial loss report (multiline).",
            "nullable": true
          },
          "Cause": {
            "type": "string",
            "description": "The cause of the loss (multiline).",
            "nullable": true
          },
          "Damages": {
            "type": "string",
            "description": "The damages description (multiline).",
            "nullable": true
          },
          "GeneralComments": {
            "type": "string",
            "description": "The general comments (multiline).",
            "nullable": true
          },
          "OverallRiskCondition": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimOverallRiskCondition"
              }
            ],
            "nullable": true
          },
          "TaxInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimTaxInfo"
              }
            ],
            "description": "The tax information.\r\n\r\nIf no ClaimTaxInfo is specified, Symbility will use the company's Claim Defaults for the tax info.",
            "nullable": true
          },
          "OverheadAndProfitInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimOverheadAndProfitInfo"
              }
            ],
            "description": "The overhead and profit information.\r\n\r\nIf no ClaimOverheadAndProfitInfo is specified, Symbility will use the company's Claim Defaults for the O&P info.",
            "nullable": true
          },
          "ContentsOverheadAndProfitInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimOverheadAndProfitInfo"
              }
            ],
            "description": "The overhead and profit information for contents.\r\n\r\nIf no ClaimOverheadAndProfitInfo is specified, Symbility will use the company's Claim Defaults for the O&P info.",
            "nullable": true
          },
          "MinimumCharge": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimMinimumCharge"
              }
            ],
            "description": "The minimum charge adjustments information.\r\n\r\nIf no ClaimMinimumCharge is specified, Symbility will use the company's Claim Defaults for the minimum charge info.",
            "nullable": true
          },
          "PolicyNumber": {
            "maxLength": 100,
            "type": "string",
            "description": "The policy number.",
            "nullable": true
          },
          "PolicyType": {
            "maxLength": 50,
            "type": "string",
            "description": "The policy type.\r\n\r\nIf the specified policy type is not listed on Claims Connect, a new policy type will be created on Claims Connect for\r\nthat company.",
            "nullable": true
          },
          "PolicyTimesRenewed": {
            "type": "integer",
            "description": "The number of times the policy was renewed.",
            "format": "int32",
            "default": 0
          },
          "WithoutPrejudice": {
            "type": "boolean",
            "description": "True if without prejudice.\r\n\r\nThis field is deprecated in version 1.2 (and above) of the API.",
            "default": false
          },
          "Coverages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClaimCoverage"
            },
            "description": "The coverages for the claim.",
            "nullable": true
          },
          "DeductibleType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeductibleType"
              }
            ],
            "description": "This type represents the type of deductible that the Symbility API supports.\r\n\r\n**None**: No deductible type.\r\n\r\n**Fixed**: The deductible will be set to a fixed type.\r\n\r\n**Variable**: The deductible will be set to a variable type."
          },
          "ExcludeCoverageIfLessThanMinimumDeductible": {
            "type": "boolean",
            "description": "If true, the coverage will be excluded from estimates where the total amount is less than the minimum deductible.",
            "default": false
          },
          "PolicyStartDate": {
            "type": "string",
            "description": "The policy start date.",
            "format": "date-time",
            "nullable": true
          },
          "PolicyEndDate": {
            "type": "string",
            "description": "The policy end date.",
            "format": "date-time",
            "nullable": true
          },
          "FlatDeductible": {
            "type": "number",
            "description": "The flat deductible (currency).",
            "format": "decimal",
            "nullable": true
          },
          "DeductibleMinimumAmount": {
            "type": "number",
            "description": "The minimum amount of the deductible for the claim.",
            "format": "decimal",
            "nullable": true
          },
          "DeductibleMaximumRate": {
            "type": "number",
            "description": "The maximum rate of the deductible for the claim.",
            "format": "decimal",
            "nullable": true
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            },
            "description": "The values for the company's custom fields.\r\n\r\nIf values aren't specified for some custom fields, the default value for the custom field will be used.",
            "nullable": true
          },
          "Originator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CompanyIDSpecification"
              }
            ],
            "description": "The company that created the claim.\r\n\r\nIf no CompanyIDSpecification is specified, Symbility will use the company making the web service call as the originator\r\nof the claim.\r\n\r\nNote that the originator of the claim can be either the company making the web service call or one of its branches.",
            "nullable": true
          },
          "OriginatorParticipantUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserIDSpecification"
            },
            "description": "The users from the originator company that are participating in the claim.",
            "nullable": true
          },
          "Peers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyIDSpecification"
            },
            "description": "The companies that are assigned as peers to the claim.",
            "nullable": true
          },
          "Assignments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClaimAssignmentSpecification"
            },
            "description": "The assignments of the claim.",
            "nullable": true
          },
          "QuestionAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuestionAnswer"
            },
            "description": "The question answers of the claim.",
            "nullable": true
          },
          "GermanyAdditionalFields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GermanyAdditionalFields"
              }
            ],
            "description": "This type represents additional fields for the German market when using the Symbility API.\r\n\r\nThis type is only available for Germany.",
            "nullable": true
          },
          "ExternalReference": {
            "maxLength": 50,
            "type": "string",
            "description": "A string value that can be used for claim lookup when ClaimTypeID = ExternalReference in ClaimIDSpecification.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents the claim structure needed to create a claim using the Symbility API."
      },
      "ClaimUpdateSpecification": {
        "type": "object",
        "properties": {
          "Number": {
            "maxLength": 50,
            "type": "string",
            "description": "The claim number.",
            "nullable": true
          },
          "LossDate": {
            "type": "string",
            "description": "The date and time of loss.",
            "format": "date-time",
            "nullable": true
          },
          "LossDateTimeZone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeZone"
              }
            ],
            "description": "The time zone associated with the date and time of loss.\r\n\r\nThe default value is UseApiAccountCompanyTimeZone which assumes that the LossDate is specified in the\r\ntime zone of the company associated with the API account.\r\n\r\n**Special values**: UseApiAccountCompanyTimeZone, Utc",
            "nullable": true
          },
          "LossType": {
            "maxLength": 50,
            "type": "string",
            "description": "The type of loss.\r\n\r\nIf the specified type of loss is not listed on Claims Connect, a new type of loss will be created on Claims Connect for\r\nthat company.",
            "nullable": true
          },
          "CatastropheNumber": {
            "maxLength": 50,
            "type": "string",
            "description": "The catastrophe number.",
            "nullable": true
          },
          "BuiltYear": {
            "type": "integer",
            "description": "The year the property was built.",
            "format": "int32",
            "nullable": true
          },
          "Reinspection": {
            "type": "boolean",
            "description": "True if the claim is a reinspection.",
            "nullable": true
          },
          "InsuredCompanyName": {
            "maxLength": 255,
            "type": "string",
            "description": "The company name of the insured.",
            "nullable": true
          },
          "InsuredTitle": {
            "maxLength": 50,
            "type": "string",
            "description": "The title of the insured.",
            "nullable": true
          },
          "InsuredFirstName": {
            "maxLength": 50,
            "type": "string",
            "description": "The first name of the insured.",
            "nullable": true
          },
          "InsuredLastName": {
            "maxLength": 50,
            "type": "string",
            "description": "The last name of the insured.",
            "nullable": true
          },
          "InsuredTitle2": {
            "maxLength": 50,
            "type": "string",
            "description": "The title of the second insured.",
            "nullable": true
          },
          "InsuredFirstName2": {
            "maxLength": 50,
            "type": "string",
            "description": "The first name of the second insured.",
            "nullable": true
          },
          "InsuredLastName2": {
            "maxLength": 50,
            "type": "string",
            "description": "The last name of the second insured.",
            "nullable": true
          },
          "InsuredHomePhone": {
            "maxLength": 40,
            "type": "string",
            "description": "The home phone of the insured.",
            "nullable": true
          },
          "InsuredBusinessPhone": {
            "maxLength": 40,
            "type": "string",
            "description": "The business phone of the insured.",
            "nullable": true
          },
          "InsuredMobilePhone": {
            "maxLength": 40,
            "type": "string",
            "description": "The mobile phone of the insured.",
            "nullable": true
          },
          "InsuredOtherPhone": {
            "maxLength": 40,
            "type": "string",
            "description": "The other phone of the insured.",
            "nullable": true
          },
          "InsuredOtherPhoneLabel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneLabel"
              }
            ],
            "nullable": true
          },
          "InsuredEmail": {
            "maxLength": 255,
            "type": "string",
            "description": "The email address of the insured.",
            "nullable": true
          },
          "InsuredAddress": {
            "required": [
              "Country",
              "State"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "The address of the insured.",
            "nullable": true
          },
          "AddInsuredAsParticipant": {
            "type": "boolean",
            "description": "If true, the insured will be added as a guest user to the claim.",
            "default": false,
            "nullable": true
          },
          "LossDifferentThanInsured": {
            "type": "boolean",
            "description": "True if loss address is different than insured address.",
            "nullable": true
          },
          "LossAddress": {
            "required": [
              "Country",
              "State"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "The loss address (if different than the insured's address).",
            "nullable": true
          },
          "LossContactName": {
            "maxLength": 255,
            "type": "string",
            "description": "The loss contact name (if different than the insured name).",
            "nullable": true
          },
          "LossContactPhone": {
            "maxLength": 40,
            "type": "string",
            "description": "The loss contact phone number (if different than the insured's phone number).",
            "nullable": true
          },
          "InitialLossReport": {
            "type": "string",
            "description": "The initial loss report (multiline).",
            "nullable": true
          },
          "Cause": {
            "type": "string",
            "description": "The cause of the loss (multiline).",
            "nullable": true
          },
          "Damages": {
            "type": "string",
            "description": "The damages description (multiline).",
            "nullable": true
          },
          "OverallRiskCondition": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimOverallRiskCondition"
              }
            ],
            "nullable": true
          },
          "GeneralComments": {
            "type": "string",
            "description": "The general comments (multiline).",
            "nullable": true
          },
          "PolicyNumber": {
            "maxLength": 100,
            "type": "string",
            "description": "The policy number.",
            "nullable": true
          },
          "PolicyType": {
            "maxLength": 50,
            "type": "string",
            "description": "The policy type.\r\n\r\nIf the specified policy type is not listed on Claims Connect, a new policy type will be  created on Claims Connect for\r\nthat company.",
            "nullable": true
          },
          "PolicyStartDate": {
            "type": "string",
            "description": "The policy start date.",
            "format": "date-time",
            "nullable": true
          },
          "PolicyEndDate": {
            "type": "string",
            "description": "The policy end date.",
            "format": "date-time",
            "nullable": true
          },
          "PolicyTimesRenewed": {
            "type": "integer",
            "description": "The number of times the policy was renewed.",
            "format": "int32",
            "nullable": true
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            },
            "description": "The values for the company's custom fields.",
            "nullable": true
          },
          "WritingCompanySpecification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WritingCompanySpecification"
              }
            ],
            "description": "The writing company associated with the claim.",
            "nullable": true
          },
          "BrokerCompanyIDSpecification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuestCompanyIDSpecification"
              }
            ],
            "description": "The identifier and type of identifier used to find the broker company associated with the claim.",
            "nullable": true
          },
          "LetterheadLogoOverrideName": {
            "maxLength": 100,
            "type": "string",
            "description": "When a letterhead name is specified here, the logo of that letterhead will always be used when printing the claim.\r\n\r\nThis overrides any letterhead logo selected when printing.",
            "nullable": true
          },
          "FileNumber": {
            "maxLength": 50,
            "type": "string",
            "description": "The claim's file number (if any), different from the claim number.\r\n\r\nThis property should only be used by vendors.",
            "nullable": true
          },
          "QuestionAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuestionAnswer"
            },
            "description": "The question answers of the claim.",
            "nullable": true
          },
          "GermanyAdditionalFields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GermanyAdditionalFields"
              }
            ],
            "description": "The additional fields for Germany.",
            "nullable": true
          },
          "ExternalReference": {
            "maxLength": 50,
            "type": "string",
            "description": "A string value that can be used for claim lookup when ClaimTypeID = ExternalReference in *ClaimIDSpecification*.",
            "nullable": true
          },
          "Secure": {
            "type": "boolean",
            "description": "True if the claim is a secure claim.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents the claim structure needed to update a claim using the Symbility API."
      },
      "ClaimDocumentSpecification": {
        "type": "object",
        "properties": {
          "IncludeAdministrationPage": {
            "type": "boolean",
            "description": "True if the administration page should be included in the document.",
            "default": false
          },
          "IncludeDiagrams": {
            "type": "boolean",
            "description": "True if the diagrams should be included in the document.",
            "default": false
          },
          "DiagramIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Only used when IncludeDiagrams is true.\r\n\r\nIf the array is empty, all diagrams are included; if not, only the specified IDs are included.",
            "nullable": true
          },
          "IncludeEstimates": {
            "type": "boolean",
            "description": "True if the estimates should be included in the document.",
            "default": false
          },
          "EstimateIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Only used when IncludeEstimates is true.\r\n\r\nIf the array is empty, all estimates are included; if not, only the specified IDs are included.",
            "nullable": true
          },
          "IncludeHandwrittenNotes": {
            "type": "boolean",
            "description": "True if the accessible handwritten notes should be included in the document.",
            "default": false
          },
          "HandwrittenNoteIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Only used when IncludeHandwrittenNotes is true.\r\n\r\nIf the array is empty, all handwritten notes are included; if not, only the specified IDs are included.",
            "nullable": true
          },
          "IncludePhotos": {
            "type": "boolean",
            "description": "True if the photos should be included in the document.",
            "default": false
          },
          "PhotoPageIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Only used when IncludePhotos is true.\r\n\r\nIf the array is empty, all photo pages are included; if not, only the specified IDs are included.",
            "nullable": true
          },
          "IncludeForms": {
            "type": "boolean",
            "description": "True if the forms should be included in the document.",
            "default": false
          },
          "FormIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Only used when IncludeForms is true.\r\n\r\nIf the array is empty, all forms are included; if not, only the specified IDs are included.",
            "nullable": true
          },
          "IncludeJournalEntries": {
            "type": "boolean",
            "description": "True if the journal entries should be included in the document.",
            "default": false
          },
          "IncludePaymentSummary": {
            "type": "boolean",
            "description": "True if the payment summary of the claim should be included in the document.",
            "default": false
          },
          "IncludePayments": {
            "type": "boolean",
            "description": "True if the payments of the claim should be included in the document.",
            "default": false
          },
          "PaymentIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Only used when IncludePayments is true.\r\n\r\nIf the array is empty, all payments are included; if not, only the specified IDs are included.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents the document options to be used with the Symbility API when retrieving a claim document."
      },
      "GetClaimDocumentV2Specification": {
        "type": "object",
        "properties": {
          "ClaimDocumentSpecification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimDocumentSpecification"
              }
            ],
            "description": "This type represents the document options to be used with the Symbility API when retrieving a claim document.",
            "nullable": true
          },
          "PrintProfileName": {
            "type": "string",
            "description": "The name of the print profile to use for formatting the claim document.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomDiagramSpecification": {
        "type": "object",
        "properties": {
          "CustomDiagramID": {
            "type": "integer",
            "description": "The temporary identifier of the diagram.  It is used to link an EstimateItemSpecification or an EstimateItemUpdateSpecification.  This identifier will not be retained by Claims Connect and the new diagram will be attributed a unique DiagramID.",
            "format": "int32"
          },
          "Name": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the diagram.",
            "nullable": true
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DiagramType"
              }
            ],
            "description": "The type of the diagram."
          }
        },
        "additionalProperties": false,
        "description": "This type represents the diagram structure needed to create a diagram using the Symbility API."
      },
      "EstimateItemNoteSpecification": {
        "type": "object",
        "properties": {
          "Note": {
            "type": "string",
            "description": "The note.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents the estimate item note structure needed to create an estimate item note using the Symbility API."
      },
      "ExternalEstimateItemSpecification": {
        "type": "object",
        "properties": {
          "Materials": {
            "type": "number",
            "description": "The materials component of the total amount.",
            "format": "decimal"
          },
          "Labor": {
            "type": "number",
            "description": "The labor component of the total amount.",
            "format": "decimal"
          },
          "Equipment": {
            "type": "number",
            "description": "The equipment component of the total amount.",
            "format": "decimal"
          },
          "MarketConditions": {
            "type": "number",
            "description": "The market conditions component of the total amount.",
            "format": "decimal"
          },
          "TotalTax1": {
            "type": "number",
            "description": "The total tax 1 applied to the estimate item.",
            "format": "decimal"
          },
          "TotalTax2": {
            "type": "number",
            "description": "The total tax 2 applied to the estimate item.",
            "format": "decimal"
          },
          "TotalTax3": {
            "type": "number",
            "description": "The total tax 3 applied to the estimate item.",
            "format": "decimal"
          },
          "TotalTax4": {
            "type": "number",
            "description": "The total tax 4 applied to the estimate item.",
            "format": "decimal"
          },
          "TotalOverhead": {
            "type": "number",
            "description": "The total overhead applied to the estimate item.",
            "format": "decimal"
          },
          "TotalProfit": {
            "type": "number",
            "description": "The total profit applied to the estimate item.",
            "format": "decimal"
          },
          "TotalTax1ActualCashValue": {
            "type": "number",
            "description": "The total tax 1 applied to the estimate item's actual cash value.",
            "format": "decimal"
          },
          "TotalTax2ActualCashValue": {
            "type": "number",
            "description": "The total tax 2 applied to the estimate item's actual cash value.",
            "format": "decimal"
          },
          "TotalTax3ActualCashValue": {
            "type": "number",
            "description": "The total tax 3 applied to the estimate item's actual cash value.",
            "format": "decimal"
          },
          "TotalTax4ActualCashValue": {
            "type": "number",
            "description": "The total tax 4 applied to the estimate item's actual cash value.",
            "format": "decimal"
          },
          "TotalOverheadActualCashValue": {
            "type": "number",
            "description": "The total overhead applied to the estimate item's actual cash value.",
            "format": "decimal"
          },
          "TotalProfitActualCashValue": {
            "type": "number",
            "description": "The total profit applied to the estimate item's actual cash value.",
            "format": "decimal"
          },
          "TotalDepreciation": {
            "type": "number",
            "description": "The calculated depreciation value of the estimate item.",
            "format": "decimal"
          },
          "MaterialsQuantity": {
            "type": "number",
            "description": "The materials quantity of the estimate item.",
            "format": "decimal"
          },
          "Total": {
            "type": "number",
            "description": "The total amount of the estimate item.",
            "format": "decimal"
          }
        },
        "additionalProperties": false,
        "description": "This type represents the external estimate item structure needed to create an external estimate item using the Symbility API."
      },
      "EstimateItemSpecification": {
        "type": "object",
        "properties": {
          "ExternalReference": {
            "maxLength": 50,
            "type": "string",
            "description": "A string value that can be used to identify items when they are added using the API.",
            "nullable": true
          },
          "DiagramObjectID": {
            "type": "integer",
            "description": "The identifier of the diagram object this item is linked to.  If not specified, the API will look at DiagramID or CustomDiagramID or CustomDiagramObjectName.",
            "format": "int32",
            "nullable": true
          },
          "DiagramID": {
            "type": "integer",
            "description": "The identifier of the diagram this item is linked to (this will link the item to all objects in the diagram).  This parameter is ignored if DiagramObjectID has already been specified.",
            "format": "int32",
            "nullable": true
          },
          "CustomDiagramID": {
            "type": "integer",
            "description": "The identifier of the custom diagram this item is linked to.  This parameter is ignored if DiagramObjectID or DiagramID have already been specified.",
            "format": "int32",
            "nullable": true
          },
          "CustomDiagramObjectName": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the diagram object this item is linked to.  This parameter is ignored if DiagramObjectID or DiagramID have already been specified.",
            "nullable": true
          },
          "LineType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EstimateItemLineType"
              }
            ],
            "description": "The type of line of the estimate item.  When Title or Text are used, only the ItemDescription will be used in the properties that follow."
          },
          "ActionCode": {
            "maxLength": 15,
            "type": "string",
            "description": "The pricing database code of the item action.  The API will use that code to lookup the item action in the pricing database.  If a GradeCode has been provided, the ActionCode is ignored and the GradeCode is used instead.  If no ActionCode and GradeCode have been specified, the API will use a generic item.",
            "nullable": true
          },
          "GradeCode": {
            "maxLength": 15,
            "type": "string",
            "description": "The pricing database code of the item grade.  The API will use that code to lookup the item grade in the pricing database.  If no ActionCode and GradeCode have been specified, the API will use a generic item.",
            "nullable": true
          },
          "ItemDescription": {
            "type": "string",
            "description": "The description of the item.  If not specified, the default description will be used.",
            "nullable": true
          },
          "ActionName": {
            "maxLength": 150,
            "type": "string",
            "description": "The name of the action.  If not specified, the default name will be used.",
            "nullable": true
          },
          "GradeDescription": {
            "maxLength": 150,
            "type": "string",
            "description": "The description of the grade.  If not specified, the default grade will be used.",
            "nullable": true
          },
          "UnitOfMeasure": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemUnitOfMeasure"
              }
            ],
            "description": "The unit of measure of the estimate item.  This property will only be used when ActionCode and GradeCode have not been specified.",
            "nullable": true
          },
          "ClaimCoverageID": {
            "type": "integer",
            "description": "The identifier of the claim coverage.  If set to null, the estimate item will use the default coverage.  If set to 0, the estimate item will not be linked to a coverage.  If a ClaimSubcoverageID has been specified, the ClaimCoverageID is ignored.",
            "format": "int32",
            "nullable": true
          },
          "ClaimSubcoverageID": {
            "type": "integer",
            "description": "The identifier of the claim subcoverage.",
            "format": "int32",
            "nullable": true
          },
          "Provisional": {
            "type": "boolean",
            "description": "True if the estimate item is provisional.  If not specified, false will be used.",
            "nullable": true
          },
          "IncludeSubtractions": {
            "type": "boolean",
            "description": "True if the item should include subtractions in its quantity.  If not specified, the default include subtractions value will be used.",
            "nullable": true
          },
          "Waste": {
            "type": "number",
            "description": "The included waste percentage.  If not specified, the default waste will be used.",
            "format": "decimal",
            "nullable": true
          },
          "UnitMaterials": {
            "type": "number",
            "description": "The materials component of the unit price.  If not specified, the default materials price will be used.",
            "format": "decimal",
            "nullable": true
          },
          "UnitLabor": {
            "type": "number",
            "description": "The labor component of the unit price.  If not specified, the default labor price will be used.",
            "format": "decimal",
            "nullable": true
          },
          "UnitHours": {
            "type": "number",
            "description": "The unit labor time in hours.  If not specified, the default hours will be used.",
            "format": "decimal",
            "nullable": true
          },
          "UnitEquipment": {
            "type": "number",
            "description": "The equipment component of the unit price.  If not specified, the default equipment price will be used.",
            "format": "decimal",
            "nullable": true
          },
          "UnitMarketConditions": {
            "type": "number",
            "description": "The market conditions component of the unit price.  If not specified, the default marked conditions price will be used.",
            "format": "decimal",
            "nullable": true
          },
          "ApplyTax1": {
            "type": "boolean",
            "description": "True if Tax1 is applied to the estimate item.  If not specified, the default Tax1 applicability will be used.",
            "nullable": true
          },
          "ApplyTax2": {
            "type": "boolean",
            "description": "True if Tax2 is applied to the estimate item.  If not specified, the default Tax2 applicability will be used.",
            "nullable": true
          },
          "ApplyTax3": {
            "type": "boolean",
            "description": "True if Tax3 is applied to the estimate item.  If not specified, the default Tax3 applicability will be used.",
            "nullable": true
          },
          "ApplyTax4": {
            "type": "boolean",
            "description": "True if Tax4 is applied to the estimate item.  If not specified, the default Tax4 applicability will be used.",
            "nullable": true
          },
          "ApplyOverheadAndProfit": {
            "type": "boolean",
            "description": "True if the overhead and profit to the estimate item.  If not specified, the default overhead and profit applicability will be used.",
            "nullable": true
          },
          "EstimateItemDepreciation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EstimateItemDepreciation"
              }
            ],
            "description": "The depreciation of the estimate item.  If not specified, the item is not depreciated.",
            "nullable": true
          },
          "Links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemLink"
              }
            ],
            "description": "The links of the item.  If not specified, the default links will be used.",
            "nullable": true
          },
          "Links2": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemLink2"
              }
            ],
            "description": "The links of the item.  If not specified, the default links will be used.",
            "nullable": true
          },
          "Credit": {
            "type": "boolean",
            "description": "True if this estimate item is a credit.  If not specified, the default is false.",
            "nullable": true
          },
          "Quantity": {
            "type": "number",
            "description": "The quantity of the estimate item including waste and adjustments.  If not specified and the item has links, the quantity will automatically be calculated.  If not specified and the item doesn't have links, the quantity will be set to 1.",
            "format": "decimal",
            "nullable": true
          },
          "EstimateItemContents": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EstimateItemContents"
              }
            ],
            "description": "The contents properties of the estimate item.  Only used if the estimate is a contents estimate.",
            "nullable": true
          },
          "EstimateItemNoteSpecifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EstimateItemNoteSpecification"
            },
            "description": "Notes attached to the estimate item.",
            "nullable": true
          },
          "ExternalEstimateItemSpecification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalEstimateItemSpecification"
              }
            ],
            "description": "The additional estimate item information for external estimates.  This is ignored for standard estimates.  If not specified for external estimates, all ExternalEstimateItemSpecification values are set to 0.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents the estimate item structure needed to create an estimate item using the Symbility API."
      },
      "ExternalEstimateSpecification": {
        "type": "object",
        "properties": {
          "TotalMaterials": {
            "type": "number",
            "description": "The total materials amount of the estimate.",
            "format": "decimal"
          },
          "TotalLabor": {
            "type": "number",
            "description": "The total labor amount of the estimate.",
            "format": "decimal"
          },
          "TotalEquipment": {
            "type": "number",
            "description": "The total equipment amount of the estimate.",
            "format": "decimal"
          },
          "TotalMarketConditions": {
            "type": "number",
            "description": "The total market conditions amount of the estimate.",
            "format": "decimal"
          },
          "SubTotal": {
            "type": "number",
            "description": "The sub total of the estimate.",
            "format": "decimal"
          },
          "TotalTax1": {
            "type": "number",
            "description": "The total Tax1 amount of the estimate.",
            "format": "decimal"
          },
          "TotalTax2": {
            "type": "number",
            "description": "The total Tax2 amount of the estimate.",
            "format": "decimal"
          },
          "TotalTax3": {
            "type": "number",
            "description": "The total Tax3 amount of the estimate.",
            "format": "decimal"
          },
          "TotalTax4": {
            "type": "number",
            "description": "The total Tax4 amount of the estimate.",
            "format": "decimal"
          },
          "TotalOverhead": {
            "type": "number",
            "description": "The total overhead amount of the estimate.",
            "format": "decimal"
          },
          "TotalProfit": {
            "type": "number",
            "description": "The total profit amount of the estimate.",
            "format": "decimal"
          },
          "SalvageAllowanceBeforeTaxes": {
            "type": "number",
            "description": "The salvage allowance amount (before taxes).",
            "format": "decimal"
          },
          "SalvageAllowanceAfterTaxes": {
            "type": "number",
            "description": "The salvage allowance amount (after taxes).",
            "format": "decimal"
          },
          "SalvageRecovery": {
            "type": "number",
            "description": "The salvage recovery amount.",
            "format": "decimal"
          },
          "DiscountBeforeTaxes": {
            "type": "number",
            "description": "The discount amount (before taxes).",
            "format": "decimal"
          },
          "DiscountBeforeTaxesName": {
            "maxLength": 64,
            "type": "string",
            "description": "The discount label (before taxes).",
            "nullable": true
          },
          "DiscountAfterTaxes": {
            "type": "number",
            "description": "The discount amount (after taxes).",
            "format": "decimal"
          },
          "DiscountAfterTaxesName": {
            "maxLength": 64,
            "type": "string",
            "description": "The discount label (after taxes).",
            "nullable": true
          },
          "ReplacementCost": {
            "type": "number",
            "description": "The total of the estimate before discount and deductible.",
            "format": "decimal"
          },
          "TotalRecoverableDepreciation": {
            "type": "number",
            "description": "The total recoverable depreciation amount of the estimate.",
            "format": "decimal"
          },
          "NetRecoverableDepreciation": {
            "type": "number",
            "description": "The net recoverable depreciation amount of the estimate after limits and deductible.",
            "format": "decimal"
          },
          "TotalNonRecoverableDepreciation": {
            "type": "number",
            "description": "The total non-recoverable depreciation amount of the estimate.",
            "format": "decimal"
          },
          "Deductible": {
            "type": "number",
            "description": "The deductible amount.",
            "format": "decimal"
          },
          "AmountPayableReplacementCost": {
            "type": "number",
            "description": "The estimate grand total (total cost).",
            "format": "decimal"
          },
          "DeductibleActualCashValue": {
            "type": "number",
            "description": "The actual cash value of the deductible of the estimate.",
            "format": "decimal"
          },
          "AmountPayableActualCashValue": {
            "type": "number",
            "description": "Net estimate grand total (after depreciation).",
            "format": "decimal"
          },
          "AdditionalDeductibleIfDepreciationRecovered": {
            "type": "number",
            "description": "The additional deductible that will be applied if the depreciation is recovered on the estimate.",
            "format": "decimal"
          },
          "AmountPayableIfDepreciationRecovered": {
            "type": "number",
            "description": "Net estimate if depreciation is recovered.",
            "format": "decimal"
          },
          "EstimateCoverages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EstimateCoverage"
            },
            "description": "The coverages used in the estimate.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents the external estimate structure needed to create an external estimate using the Symbility API."
      },
      "EstimateSpecification": {
        "required": [
          "Type"
        ],
        "type": "object",
        "properties": {
          "External": {
            "type": "boolean",
            "description": "If true, the estimate is an external estimate which means all calculations are assumed by the external system and the estimate totals need to be provided.  If false, the estimate is a standard estimate."
          },
          "Name": {
            "maxLength": 64,
            "type": "string",
            "description": "The name of the estimate.  If not specified, the default name of the estimate type will be used.",
            "nullable": true
          },
          "Type": {
            "maxLength": 255,
            "type": "string",
            "description": "The type of the estimate.  This field is mandatory.",
            "nullable": true
          },
          "DefaultClaimCoverageID": {
            "type": "integer",
            "description": "The default coverage to use for the estimate.  If not specified, this will first try to fallback on the default coverage setup for the estimate Name/Type combination and if it doesn't exist, this will automatically fallback to the default diagram coverage or the default claim coverage.",
            "format": "int32",
            "nullable": true
          },
          "MinimumCharge": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimMinimumCharge"
              }
            ],
            "description": "The minimum charge adjustments information.  If not specified, this will first try to fallback on the minimum charge setup for the estimate Name/Type combination and if it doesn't exist, this will automatically fallback to the claim options.",
            "nullable": true
          },
          "TaxInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimTaxInfo"
              }
            ],
            "description": "The tax information.  If not specified, the tax information of the claim will be used.",
            "nullable": true
          },
          "OverheadAndProfitInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimOverheadAndProfitInfo"
              }
            ],
            "description": "The overhead and profit information.  If not specified, the overhead and profit information of the claim will be used.",
            "nullable": true
          },
          "Comments": {
            "type": "string",
            "description": "The estimate comments.",
            "nullable": true
          },
          "EstimateItemSpecifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EstimateItemSpecification"
            },
            "description": "The list of items in the estimate.",
            "nullable": true
          },
          "ExternalEstimateSpecification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalEstimateSpecification"
              }
            ],
            "description": "The additional estimate information for external estimates.  This is ignored for standard estimates.  If not specified for external estimates, all ExternalEstimateSpecification values are set to 0.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents the estimate structure needed to create an estimate using the Symbility API."
      },
      "CreateClaimEstimateSpecification": {
        "required": [
          "EstimateSpecification"
        ],
        "type": "object",
        "properties": {
          "CustomDiagramSpecifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomDiagramSpecification"
            },
            "description": "The custom diagrams to create.  This information is not mandatory.",
            "nullable": true
          },
          "EstimateSpecification": {
            "required": [
              "Type"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/EstimateSpecification"
              }
            ],
            "description": "The estimate information.  This field is mandatory.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateClaimEstimate": {
        "type": "object",
        "properties": {
          "Diagrams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Diagram"
            },
            "description": "The diagrams attached to the claim.",
            "nullable": true
          },
          "Estimate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Estimate"
              }
            ],
            "description": "The estimates attached to the claim.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents the details of adding a estimate with diagrams when using the Symbility API."
      },
      "DiagramImportSpecification": {
        "type": "object",
        "properties": {
          "Name": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the diagram.",
            "nullable": true
          },
          "Bytes": {
            "type": "string",
            "description": "The XML data of the diagram.\r\n\r\nThe XML needs to follow the Symbility specifications.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents the diagram information needed to import a diagram using the Symbility API."
      },
      "AddDiagamImportSpecification": {
        "required": [
          "AssignmentID"
        ],
        "type": "object",
        "properties": {
          "AssignmentID": {
            "type": "integer",
            "description": "The identifier of the assignment to which to add the diagram to.",
            "format": "int32"
          },
          "DiagramImportSpecification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DiagramImportSpecification"
              }
            ],
            "description": "This type represents the diagram information needed to import a diagram using the Symbility API.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EstimateItemNoteUpdateSpecification": {
        "type": "object",
        "properties": {
          "EstimateItemNoteID": {
            "type": "integer",
            "description": "The identifier of the estimate item note.",
            "format": "int32"
          },
          "Note": {
            "type": "string",
            "description": "The note.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents the estimate item note structure needed to update an estimate item note using the Symbility API."
      },
      "EstimateItemUpdateSpecification": {
        "type": "object",
        "properties": {
          "EstimateItemID": {
            "type": "integer",
            "description": "The identifier of the estimate item in the claim.",
            "format": "int32"
          },
          "ItemDescription": {
            "maxLength": 150,
            "type": "string",
            "description": "The description of the item.  If not specified, the property is not updated.",
            "nullable": true
          },
          "ActionName": {
            "maxLength": 150,
            "type": "string",
            "description": "The name of the action.  If not specified, the property is not updated.",
            "nullable": true
          },
          "GradeDescription": {
            "maxLength": 150,
            "type": "string",
            "description": "The description of the grade.  If not specified, the property is not updated.",
            "nullable": true
          },
          "ClaimCoverageID": {
            "type": "integer",
            "description": "The identifier of the claim coverage.  If set to null, the property is not updated.  If set to 0, the estimate item will be updated to not be linked to a coverage.  If a ClaimSubcoverageID has been specified and is not 0, the ClaimCoverageID is ignored.",
            "format": "int32",
            "nullable": true
          },
          "ClaimSubcoverageID": {
            "type": "integer",
            "description": "The identifier of the claim subcoverage.  If set to null, the property is not updated.  If set to 0, the estimate item will be updated to not be linked to a subcoverage.",
            "format": "int32",
            "nullable": true
          },
          "Provisional": {
            "type": "boolean",
            "description": "True if the estimate item is provisional.  If not specified, the property is not updated.",
            "nullable": true
          },
          "IncludeSubtractions": {
            "type": "boolean",
            "description": "True if the item should include subtractions in its quantity.  If not specified, the property is not updated.",
            "nullable": true
          },
          "Waste": {
            "type": "number",
            "description": "The included waste percentage.  If not specified, the property is not updated.",
            "format": "decimal",
            "nullable": true
          },
          "UnitMaterials": {
            "type": "number",
            "description": "The materials component of the unit price.  If not specified, the property is not updated.",
            "format": "decimal",
            "nullable": true
          },
          "UnitLabor": {
            "type": "number",
            "description": "The labor component of the unit price.  If not specified, the property is not updated.",
            "format": "decimal",
            "nullable": true
          },
          "UnitHours": {
            "type": "number",
            "description": "The unit labor time in hours.  If not specified, the property is not updated.",
            "format": "decimal",
            "nullable": true
          },
          "UnitEquipment": {
            "type": "number",
            "description": "The equipment component of the unit price.  If not specified, the property is not updated.",
            "format": "decimal",
            "nullable": true
          },
          "UnitMarketConditions": {
            "type": "number",
            "description": "The market conditions component of the unit price.  If not specified, the property is not updated.",
            "format": "decimal",
            "nullable": true
          },
          "ApplyTax1": {
            "type": "boolean",
            "description": "True if Tax1 is applied to the estimate item.  If not specified, the property is not updated.",
            "nullable": true
          },
          "ApplyTax2": {
            "type": "boolean",
            "description": "True if Tax2 is applied to the estimate item.  If not specified, the property is not updated.",
            "nullable": true
          },
          "ApplyTax3": {
            "type": "boolean",
            "description": "True if Tax3 is applied to the estimate item.  If not specified, the property is not updated.",
            "nullable": true
          },
          "ApplyTax4": {
            "type": "boolean",
            "description": "True if Tax4 is applied to the estimate item.  If not specified, the property is not updated.",
            "nullable": true
          },
          "ApplyOverheadAndProfit": {
            "type": "boolean",
            "description": "True if the overhead and profit to the estimate item.  If not specified, the property is not updated.",
            "nullable": true
          },
          "EstimateItemDepreciation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EstimateItemDepreciation"
              }
            ],
            "description": "The depreciation of the estimate item.  If not specified, the property is not updated.",
            "nullable": true
          },
          "Links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemLink"
              }
            ],
            "description": "The links of the item.  If not specified, the property is not updated.",
            "nullable": true
          },
          "Links2": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemLink2"
              }
            ],
            "description": "The links of the item.  If not specified, the property is not updated.",
            "nullable": true
          },
          "Credit": {
            "type": "boolean",
            "description": "True if this estimate item is a credit.  If not specified, the property is not updated.",
            "nullable": true
          },
          "Quantity": {
            "type": "number",
            "description": "The quantity of the estimate item including waste and adjustments.  If not specified, the property is not updated.",
            "format": "decimal",
            "nullable": true
          },
          "EstimateItemContents": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EstimateItemContents"
              }
            ],
            "description": "The contents properties of the estimate item.",
            "nullable": true
          },
          "EstimateItemNoteSpecifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EstimateItemNoteSpecification"
            },
            "description": "Notes to add to the estimate item.",
            "nullable": true
          },
          "EstimateItemNoteUpdateSpecifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EstimateItemNoteUpdateSpecification"
            },
            "description": "Notes to update in the estimate item.",
            "nullable": true
          },
          "EstimateItemNoteIDsToDelete": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Notes to delete from the estimate item.",
            "nullable": true
          },
          "ExternalEstimateItemSpecification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalEstimateItemSpecification"
              }
            ],
            "description": "The additional estimate item information for external estimates.  This is ignored for standard estimates.  If not specified, the properties are not updated.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents the estimate item structure needed to update an estimate item using the Symbility API."
      },
      "EstimateUpdateSpecification": {
        "type": "object",
        "properties": {
          "Name": {
            "maxLength": 64,
            "type": "string",
            "description": "The name of the estimate.  If not specified, the property is not updated.",
            "nullable": true
          },
          "DefaultClaimCoverageID": {
            "type": "integer",
            "description": "The default coverage to use for the estimate.  If set to null, the property is not updated.  If set to 0, the estimate will not be linked to a default coverage.",
            "format": "int32",
            "nullable": true
          },
          "MinimumCharge": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimMinimumCharge"
              }
            ],
            "description": "The minimum charge adjustments information.  If not specified, the property is not updated.",
            "nullable": true
          },
          "TaxInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimTaxInfo"
              }
            ],
            "description": "The tax information.  If not specified, the property is not updated.",
            "nullable": true
          },
          "OverheadAndProfitInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimOverheadAndProfitInfo"
              }
            ],
            "description": "The overhead and profit information.  If not specified, the property is not updated.",
            "nullable": true
          },
          "Comments": {
            "type": "string",
            "description": "The estimate comments.  If not specified, the property is not updated.",
            "nullable": true
          },
          "EstimateItemSpecifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EstimateItemSpecification"
            },
            "description": "The list of items to add to the estimate.",
            "nullable": true
          },
          "EstimateItemUpdateSpecifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EstimateItemUpdateSpecification"
            },
            "description": "The list of items to update in the estimate.",
            "nullable": true
          },
          "EstimateItemIDsToDelete": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The list of items to delete from the estimate.",
            "nullable": true
          },
          "ExternalEstimateSpecification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalEstimateSpecification"
              }
            ],
            "description": "The additional estimate information for external estimates.  This is ignored for standard estimates.  If not specified, the properties are not updated.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents the estimate structure needed to update an estimate using the Symbility API."
      },
      "UpdateClaimEstimateSpecification": {
        "type": "object",
        "properties": {
          "CustomDiagramSpecifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomDiagramSpecification"
            },
            "description": "The custom diagrams to create.  This information is not mandatory.",
            "nullable": true
          },
          "EstimateUpdateSpecification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EstimateUpdateSpecification"
              }
            ],
            "description": "The update estimate information.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateClaimEstimate": {
        "type": "object",
        "properties": {
          "Diagrams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Diagram"
            },
            "description": "The diagrams attached to the claim.",
            "nullable": true
          },
          "Estimate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Estimate"
              }
            ],
            "description": "The estimates attached to the claim.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents the details of updating a estimate with diagrams when using the Symbility API."
      },
      "SetEstimateFinalizationSpecification": {
        "type": "object",
        "properties": {
          "EstimateFinalizationStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EstimateFinalizationStatus"
              }
            ],
            "description": "This type represents the available status of the estimate finalization in the Symbility API.\r\n\r\n**None**: The estimate has not been finalized yet.\r\n\r\n**CashSettled**: The estimate was settled by cash.\r\n\r\n**Invoiced**: The estimate was invoiced.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "ReferenceNumber": {
            "maxLength": 30,
            "type": "string",
            "description": "The finalization reference number to set for the estimate.",
            "nullable": true
          },
          "Date": {
            "type": "string",
            "description": "The finalization date to set for the estimate.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ExternalDocumentSpecification": {
        "type": "object",
        "properties": {
          "Path": {
            "maxLength": 265,
            "type": "string",
            "description": "Complete folder path of the external document starting at the root folder.",
            "nullable": true
          },
          "Name": {
            "maxLength": 265,
            "type": "string",
            "description": "Complete file name of the external document.",
            "nullable": true
          },
          "ShareWithOriginator": {
            "type": "boolean",
            "description": "True if the external document should be shared with the originator.",
            "default": false
          },
          "ShareWithAssignees": {
            "type": "boolean",
            "description": "True if the external document should be shared with the assignees.",
            "default": false
          },
          "ShareWithPeers": {
            "type": "boolean",
            "description": "True if the external document should be shared with peers.",
            "default": false
          },
          "ShareWithAllCompanies": {
            "type": "boolean",
            "description": "True if the external document should be shared with all companies in the claim.",
            "default": false
          },
          "ShareWithInsured": {
            "type": "boolean",
            "description": "True if the external document should be shared with the insured.",
            "default": false
          },
          "Bytes": {
            "type": "string",
            "description": "The external document actual content.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents the external document structure needed to attach an external document using the Symbility API."
      },
      "AddClaimExternalDocumentSpecification": {
        "required": [
          "AssignmentID"
        ],
        "type": "object",
        "properties": {
          "AssignmentID": {
            "type": "integer",
            "description": "The identifier of the assignment to which to add the document to.",
            "format": "int32"
          },
          "ExternalDocumentSpecification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalDocumentSpecification"
              }
            ],
            "description": "This type represents the external document structure needed to attach an external document using the Symbility API.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PhotoSpecification": {
        "type": "object",
        "properties": {
          "Caption": {
            "type": "string",
            "description": "The caption of the photo.",
            "nullable": true
          },
          "Bytes": {
            "type": "string",
            "description": "The bytes of the photo.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents the photo that the Symbility API supports."
      },
      "AddClaimPhotoSpecification": {
        "required": [
          "AssignmentID"
        ],
        "type": "object",
        "properties": {
          "PhotoPageName": {
            "type": "string",
            "description": "The name of the photo page in which to insert the photos. If the photo page does not exist, it will be created.\r\nAn exception will be thrown if this parameter is empty.",
            "nullable": true
          },
          "AssignmentID": {
            "type": "integer",
            "description": "The identifier of the assignment to which to add the photo page to.",
            "format": "int32"
          },
          "PhotoSpecification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhotoSpecification"
              }
            ],
            "description": "The identifier of the photos being added.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ClaimQuestionnaireSpecification": {
        "type": "object",
        "properties": {
          "Code": {
            "maxLength": 255,
            "type": "string",
            "description": "The code of the questionnaire to add.\r\n\r\nIf the code is already specified in the XML, this property is ignored.",
            "nullable": true
          },
          "Bytes": {
            "type": "string",
            "description": "The XML prefill answers for the questionnaire.\r\n\r\nThe XML needs to follow the Symbility specifications.\r\n\r\nIf this parameter is left empty or null, no prefill answers are imported in the questionnaire.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddClaimQuestionnaireSpecification": {
        "required": [
          "AssignmentID"
        ],
        "type": "object",
        "properties": {
          "AssignmentID": {
            "type": "integer",
            "description": "The identifier of the assignment to which to add the questionnaire to.",
            "format": "int32"
          },
          "ClaimQuestionnaireSpecification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClaimQuestionnaireSpecification"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TaskPriority": {
        "enum": [
          "Low",
          "Medium",
          "High",
          "Unknown"
        ],
        "type": "string",
        "description": "This type represents the task priorities supported by the Symbility API.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "TaskStatus": {
        "enum": [
          "Pending",
          "InProgress",
          "Completed",
          "Cancelled",
          "Unknown",
          "Assigned"
        ],
        "type": "string",
        "description": "This type represents the task statuses supported by the Symbility API.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "TaskVisibility": {
        "enum": [
          "Internal",
          "External",
          "Global",
          "Unknown"
        ],
        "type": "string",
        "description": "This type represents the task visibility options supported by the Symbility API.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "TaskProperties": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/TaskPropertiesFlags"
        }
      },
      "TaskSpecification": {
        "required": [
          "DueDate",
          "Name",
          "Priority",
          "Properties",
          "Status",
          "Visibility"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "The name of the task.",
            "nullable": true
          },
          "TaskGroupCode": {
            "maxLength": 10,
            "type": "string",
            "description": "The code of the group for the task.",
            "nullable": true
          },
          "Priority": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskPriority"
              }
            ],
            "description": "This type represents the task priorities supported by the Symbility API.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "DueDate": {
            "type": "string",
            "description": "The due date and time (UTC) for the task.",
            "format": "date-time"
          },
          "Status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskStatus"
              }
            ],
            "description": "This type represents the task statuses supported by the Symbility API.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "TaskTemplateCompletedCode": {
            "maxLength": 10,
            "type": "string",
            "description": "The successor task template code when the task is completed.",
            "nullable": true
          },
          "TaskTemplateCancelledCode": {
            "maxLength": 10,
            "type": "string",
            "description": "The successor task template code when the task is cancelled.",
            "nullable": true
          },
          "Visibility": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskVisibility"
              }
            ],
            "description": "This type represents the task visibility options supported by the Symbility API.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "Properties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskProperties"
              }
            ],
            "description": "This type represents the task properties supported by the Symbility API. \r\nThis is a bit field, a set of flags, the TaskProperties can be one or more of the following values.\r\n\r\n**AllowChangesOnlyByMyCompany**: Only the company who created the task can modify it.\r\n\r\n**AddTaskOwnerAsClaimParticipant**: The owner set for this task will automatically be added as a claim participant."
          },
          "OwnerUserRole": {
            "maxLength": 50,
            "type": "string",
            "description": "The user role to look for as the owner of the task.\r\n\r\nThis property is ignored if OwnerUser is not null.",
            "nullable": true
          },
          "OwnerUser": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserIDSpecification"
              }
            ],
            "description": "The owner of the task.",
            "nullable": true
          },
          "Comments": {
            "type": "string",
            "description": "The comments for the task (multiline).",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents the structure used to create a task."
      },
      "Task": {
        "type": "object",
        "properties": {
          "TaskID": {
            "type": "integer",
            "description": "The identifier of the task.",
            "format": "int32"
          },
          "CreationDate": {
            "type": "string",
            "description": "The creation date and time (UTC) of the task.",
            "format": "date-time"
          },
          "CreatorUser": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "description": "The user who created the task.",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "The name of the task.",
            "nullable": true
          },
          "TaskTemplateCode": {
            "maxLength": 10,
            "type": "string",
            "description": "The code of the template used to create the task.",
            "nullable": true
          },
          "TaskGroupCode": {
            "maxLength": 10,
            "type": "string",
            "description": "The code of the task group the task is part of.",
            "nullable": true
          },
          "Priority": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskPriority"
              }
            ],
            "description": "This type represents the task priorities supported by the Symbility API.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "DueDate": {
            "type": "string",
            "description": "The due date and time (UTC) of the task.",
            "format": "date-time"
          },
          "Status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskStatus"
              }
            ],
            "description": "This type represents the task statuses supported by the Symbility API.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "TaskTemplateCompletedCode": {
            "maxLength": 10,
            "type": "string",
            "description": "The successor task template code when the task is completed.",
            "nullable": true
          },
          "TaskTemplateCancelledCode": {
            "maxLength": 10,
            "type": "string",
            "description": "The successor task template code when the task is cancelled.",
            "nullable": true
          },
          "Visibility": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskVisibility"
              }
            ],
            "description": "This type represents the task visibility options supported by the Symbility API.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
          },
          "Properties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskProperties"
              }
            ],
            "description": "This type represents the task properties supported by the Symbility API. \r\nThis is a bit field, a set of flags, the TaskProperties can be one or more of the following values.\r\n\r\n**AllowChangesOnlyByMyCompany**: Only the company who created the task can modify it.\r\n\r\n**AddTaskOwnerAsClaimParticipant**: The owner set for this task will automatically be added as a claim participant."
          },
          "OwnerUser": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "description": "The owner of the task.",
            "nullable": true
          },
          "Comments": {
            "type": "string",
            "description": "The comments for the task (multiline).",
            "nullable": true
          },
          "ClosedDate": {
            "type": "string",
            "description": "The date and time (UTC) the task was closed (completed or cancelled).",
            "format": "date-time",
            "nullable": true
          },
          "ClosedUser": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "description": "The user who closed the task.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents a task when using the Symbility API."
      },
      "TaskUpdateSpecification": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "The name of the task.",
            "nullable": true
          },
          "TaskGroupCode": {
            "maxLength": 10,
            "type": "string",
            "description": "The code of the group for the task.",
            "nullable": true
          },
          "Priority": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskPriority"
              }
            ],
            "nullable": true
          },
          "DueDate": {
            "type": "string",
            "description": "The due date and time (UTC) for the task.",
            "format": "date-time",
            "nullable": true
          },
          "Status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskStatus"
              }
            ],
            "nullable": true
          },
          "TaskTemplateCompletedCode": {
            "maxLength": 10,
            "type": "string",
            "description": "The successor task template code when the task is completed.",
            "nullable": true
          },
          "TaskTemplateCancelledCode": {
            "maxLength": 10,
            "type": "string",
            "description": "The successor task template code when the task is cancelled.",
            "nullable": true
          },
          "Visibility": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskVisibility"
              }
            ],
            "nullable": true
          },
          "Properties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskProperties"
              }
            ],
            "nullable": true
          },
          "OwnerUserRole": {
            "maxLength": 50,
            "type": "string",
            "description": "The user role to look for as the owner of the task.",
            "nullable": true
          },
          "OwnerUser": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserIDSpecification"
              }
            ],
            "description": "The owner of the task.",
            "nullable": true
          },
          "Comments": {
            "type": "string",
            "description": "The comments for the task.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This type represents the structure used to update a task.\r\n\r\nThe method will only update fields that are specified in the request. \r\n\r\nFor example, if you donât want to update the Comments information, omit the Comments from the request. \r\nIf you want to empty the Comments field, specify an empty Comments attribute."
      },
      "DiagramOptionsFlags": {
        "enum": [
          "None",
          "Locked",
          "Unknown"
        ],
        "type": "string",
        "description": "This type represents the diagram options that the Symbility API supports. \r\nThis is a bit field, a set of flags, the DiagramOptions can be one or more of the following values.\r\n\r\n**Locked**: The diagram is locked.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "EstimateOptionsFlags": {
        "enum": [
          "None",
          "Locked",
          "Contents",
          "Unknown"
        ],
        "type": "string",
        "description": "This type represents the estimate option values that the Symbility API supports. \r\nThis is a bit field, a set of flags, the EstimateOptions can be one or more of the following values.\r\n\r\n**None**: No flag is set.\r\n\r\n**Contents**: The estimate is a contents estimate.\r\n\r\n**Locked**: The estimate is locked.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "EstimateItemLineTypeFlags": {
        "enum": [
          "EstimateItem",
          "Title",
          "Text"
        ],
        "type": "string",
        "description": "This type represents an estimate item line type when using the Symbility API.\r\n\r\n**EstimateItem**: The estimate item line type is an EstimateItem\r\n\r\n**Title**: The estimate item line type is a Title\r\n\r\n**Text**: The estimate item line type is a Text"
      },
      "ItemLinkFlags": {
        "enum": [
          "None",
          "Wall",
          "Ceiling",
          "Floor",
          "Volume",
          "Door",
          "Window",
          "Block",
          "Step",
          "Opening",
          "Ridge",
          "Rafter",
          "Eave",
          "Panel",
          "Valley",
          "Soffit",
          "HipRafter",
          "RoofFloor",
          "Fascia",
          "Trusses",
          "StepFlash",
          "Flashing",
          "Parapet",
          "Unknown"
        ],
        "type": "string",
        "description": "This type represents item links when using the Symbility API."
      },
      "ItemLink2Flags": {
        "enum": [
          "None",
          "Rakes",
          "Sill",
          "TransitionStrips",
          "Unknown"
        ],
        "type": "string",
        "description": "This type represents item links (2) when using the Symbility API."
      },
      "PhotoPropertiesFlags": {
        "enum": [
          "None",
          "DamageYes",
          "DamageNo",
          "LiveRoofAngle",
          "Captured",
          "Imported",
          "Unknown"
        ],
        "type": "string",
        "description": "This type represents the photo properties that the Symbility API supports.\r\n\r\n**DamageYes**: The photo has been marked as having damage.\r\n\r\n**DamageNo**: The photo has been marked as not having damage.\r\n\r\n**LiveRoofAngle**: The roof angle measure was taken using the device.\r\n\r\n**Captured**: This flag is set when the photo has been captured within the application.\r\n\r\n**Imported**: This flag is set when the photo has been imported from a file."
      },
      "ClaimAssignmentOptionFlags": {
        "enum": [
          "None",
          "DelegatedAuthority",
          "ClaimStatusChange",
          "AssigneeGroupDefault"
        ],
        "type": "string",
        "description": "This type represents the claim assignment option values that the Symbility API supports.\r\n\r\n**None**: No option specified\r\n\r\n**DelegatedAuthority**: Assignee has Delegated Authority\r\n\r\n**ClaimStatusChange**: Assignee has the ability to change the claim status"
      },
      "ClaimTypeFlags": {
        "enum": [
          "Residential",
          "Commercial",
          "Contents",
          "Unknown"
        ],
        "type": "string",
        "description": "This type represents the claim type values that the Symbility API supports. This is a bit field, a set of flags.\r\n\r\nThe ClaimType can be one or more of the following values.\r\n\r\n**Residential**: The claim concerns the structure of a residential property.\r\n\r\n**Commercial**: The claim concerns the structure of a commercial property.\r\n\r\n**Contents**: The claim involves contents replacement.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "ClaimPaymentPropertiesFlags": {
        "enum": [
          "None",
          "ApplyDeductible",
          "FullPayment",
          "DepreciationRecovered",
          "PartialPayment",
          "AcvPayment",
          "Unknown"
        ],
        "type": "string",
        "description": "This type represents the properties of the payment that the Symbility API supports.\r\n\r\n**None**: There are no properties applied to the payment.\r\n\r\n**ApplyDeductible**: The payment should be applied towards the deductible.\r\n\r\n**FullPayment**: The payment fully covers all estimate items of the payment.\r\n\r\n**DepreciationRecovered**: The payment covers the recoverable depreciation of the estimate items of the payment.\r\n\r\n**PartialPayment**: The payment partially covers the estimate items of the payment without covering their actual cash value.\r\n\r\n**AcvPayment**: The payment covers the actual cash value of the estimate items of the payment.\r\n\r\n**Unknown**: This value is returned in the eventuality that other values are added to this type in future versions of the API."
      },
      "TaskPropertiesFlags": {
        "enum": [
          "None",
          "AllowChangesOnlyByMyCompany",
          "AddTaskOwnerAsClaimParticipant"
        ],
        "type": "string",
        "description": "This type represents the task properties supported by the Symbility API. \r\nThis is a bit field, a set of flags, the TaskProperties can be one or more of the following values.\r\n\r\n**AllowChangesOnlyByMyCompany**: Only the company who created the task can modify it.\r\n\r\n**AddTaskOwnerAsClaimParticipant**: The owner set for this task will automatically be added as a claim participant."
      }
    },
    "securitySchemes": {
      "OAuth2": {
        "type": "oauth2",
        "description": "Refer to the [Authentication section](#tag/Authentication) below.",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "/authentication/token",
            "scopes": { }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "OAuth 2.0 must be used to authenticate with the API. The authentication must follow the OAuth 2.0 Client Credentials authorization grant (refer to https://tools.ietf.org/html/rfc6749#section-4.4).\r\n\r\nIn order to make requests to the API, the client must first obtain a token which is valid for a limited period of time.  Once obtained, the token can then be used to make requests.\r\n\r\n1. **Obtaining a token:** A client can obtain a bearer token using the [Request an authentication token](#operation/AuthenticationAuthenticate) operation.  The operation returns the token and how long the token is valid for. The client should reuse the token until it is expired.  When the token is expired, the client should call [Request an authentication token](#operation/AuthenticationAuthenticate) again to obtain a new one.\r\n\r\n2. **Making requests:** Once a token is obtained, a client can start making requests. Each request must include a valid bearer token in an HTTP header: `Authorization: Bearer [token]`",
      "x-displayName": "Authentication"
    },
    {
      "name": "Assignment",
      "x-displayName": "Assignments"
    },
    {
      "name": "Claim",
      "x-displayName": "Claims"
    },
    {
      "name": "Diagram",
      "x-displayName": "Diagrams"
    },
    {
      "name": "Estimate",
      "x-displayName": "Estimates"
    },
    {
      "name": "ExternalDocument",
      "x-displayName": "External Documents"
    },
    {
      "name": "Form",
      "x-displayName": "Forms"
    },
    {
      "name": "HandwrittenNote",
      "x-displayName": "Handwritten Notes"
    },
    {
      "name": "Payment",
      "x-displayName": "Payments"
    },
    {
      "name": "Photo",
      "x-displayName": "Photos"
    },
    {
      "name": "Questionnaire",
      "x-displayName": "Questionnaires"
    },
    {
      "name": "Task",
      "x-displayName": "Tasks"
    },
    {
      "name": "VoiceAnnotation",
      "x-displayName": "Voice Annotations"
    },
    {
      "name": "Error Codes",
      "description": "\r\n\r\n## Error Codes - Authentication\r\n\r\n| No. | Name | Description |\r\n|-------------------------|-------------------------|-------------------------|\r\n| 1 | AuthenticationFailed | This error is returned when the supplied account number and or password are invalid. |\r\n| 2 | AuthenticationDisabled | This error is returned when the supplied account number is disabled. |\r\n| 3 | AuthenticationIPAddressInvalid | This error is returned when the IP address of the client calling the method is not within the range specified for the supplied account number. |\r\n| 4 | AuthenticationExcessivePolling | This error is returned when the client is calling methods at an excessive rate. |\r\n| 5 | AuthenticationInvalidAccountStatus | This error is returned if the company related to the supplied account number is disabled or blocked. |\r\n| 6 | AuthenticationSecureConnectionRequired | This error is returned when the API account is setup to force secure connections and the client is making an unsecure web method call (using HTTP instead of HTTPS). |\r\n| 7 | AuthenticationAuthorizationHeaderMissing | This error is returned when the Authorization HTTP header is missing. |\r\n| 8 | AuthenticationAuthorizationHeaderSchemeInvalid | This error is returned when the Authorization HTTP header schema is invalid. |\r\n| 9 | AuthenticationTokenExpired | This error is returned when the Bearer authorization token has expired. |\r\n| 10 | AuthenticationUnsupportedGrantType | This error is returned when the received grant_type is unsupported. |\r\n| 11 | AuthenticationTokenSignatureInvalid | This error is returned when the Bearer authorization token has an invalid signature. |\r\n| 12 | AuthenticationIPAddressBlocked | This error is returned when an IP Address has been blocked due to excessive login failure. The IP address needs to be unblocked in order to make calls from that address. |\r\n\r\n\r\n## Error Codes - Lookup\r\n\r\n| No. | Name | Description |\r\n|-------------------------|-------------------------|-------------------------|\r\n| 56 | ApiRouteNotFound | This error is returned when specified API route was not found. |\r\n| 101 | ClaimIDTypeInvalid | This error is returned when the ClaimIDSpecification contains an invalid claim ID type. |\r\n| 102 | ClaimIDNotFound | This error is returned when the ClaimIDSpecification contains a claim ID that canât be found. |\r\n| 103 | CustomFieldNotFound | This warning is logged when a custom field has been specified, but it doesnât match any custom field for that company on Claims Connect. When this happens, the operation still is executed, but the custom field is ignored. |\r\n| 104 | LetterheadNotFound | This warning is logged when the ClaimDocumentFormatSpecification, ClaimSpecification.LetterheadLogoOverrideName or ClaimUpdateSpecification.LetterheadLogoOverrideName contains a letterhead name that canât be found. When this happens, the operation still is executed and the default letterhead is used. |\r\n| 105 | WritingCompanyNotFound | This warning is logged when the WritingCompanySpecification contains a writing company name that canât be found. When this happens, the operation still is executed and no writing company is used. |\r\n| 106 | BrokerCompanyNotFound | This error (a warning when the broker company is not mandatory with regards to the CompanyPreferences) is returned or logged when the BrokerCompanyIDSpecification is not defined, if the GuestCompanyIDType within the BrokerCompanyIDSpecification is set to None or if the BrokerCompany is not found during calls to CreateClaim or UpdateClaim. |\r\n| 107 | GuestCompanyIDMissing | This error is returned when the guest company ID is missing from the ClaimUpdateSpecification object. |\r\n| 201 | AssigneeCompanyIDTypeInvalid | This error (a warning when calling CreateClaim) is returned or logged when the CompanyIDSpecification related to the assignee contains an invalid company ID type. When this happens within CreateClaim, the operation still is executed, but the assignee is ignored. |\r\n| 202 | AssigneeCompanyIDNotFound | This error (a warning when calling CreateClaim) is returned or logged when the CompanyIDSpecification related to the assignee contains a company ID that canât be found. When this happens within CreateClaim, the operation still is executed, but the assignee is ignored. |\r\n| 203 | OriginatorCompanyIDTypeInvalid | This error is returned when the CompanyIDSpecification related to the originator of the claim contains an invalid company ID type. |\r\n| 204 | OriginatorCompanyIDNotFound | This error is returned when the CompanyIDSpecification related to the originator of the claim contains a company ID that canât be found. |\r\n| 205 | CompanyIDTypeInvalid | This error is returned when the CompanyIDSpecification related to the originator of the claim contains an invalid company ID type. |\r\n| 206 | CompanyIDNotFound | This error is returned when the CompanyIDSpecification related to the originator of the claim contains a company ID that canât be found. |\r\n| 207 | RemoveClaimAssigneeCompanyNotAssigned | This warning is returned when trying to unassign a company thatâs currently not assigned to the claim. |\r\n| 208 | PrintProfileNotFound | This error is returned when the specified print profile could not be found. |\r\n| 301 | ClaimUserIDTypeInvalid | This error is returned when trying to assign a company with the ClaimStatusChange flag and the caller is not the claim originator or the delegated authority. |\r\n| 302 | ClaimUserIDNotFound | This error is returned when the UserIDSpecification related to the user to add contains a user ID that canât be found. |\r\n| 303 | CreatorUserIDTypeInvalid | This error is returned when the UserIDSpecification related to the creator of the claim contains an invalid user ID type. |\r\n| 304 | CreatorUserIDNotFound | This error is returned when the UserIDSpecification related to the claim or calendar event creator contains a user ID that canât be found. |\r\n| 305 | CreatorUserFallbackNotFound | This error is returned when no creator has been specified (or if itâs invalid) when creating a claim and when Claims Connect is unable to find an appropriate fallback user (ie: a valid administrator account within the company). |\r\n| 306 | OriginatorParticipantUserIDTypeInvalid | This error is returned when the UserIDSpecification related to the claim originator participant contains an invalid user ID type. |\r\n| 307 | OriginatorParticipantUserIDNotFound | This error is returned when the UserIDSpecification related to the claim originator participant contains a user ID that canât be found. |\r\n| 308 | FromUserIDTypeInvalid | This warning is returned when the UserIDSpecification related to the user responsible for the event contains an invalid user ID type. When this happens, the operation still is executed, but the user is ignored. |\r\n| 309 | FromUserIDNotFound | This warning is returned when the UserIDSpecification related to the user responsible for the event contains a user ID that canât be found. When this happens, the operation still is executed, but the user is ignored. |\r\n| 310 | InternalAssigneeUserIDTypeInvalid | This error (a warning when calling CreateClaim) is returned when the UserIDSpecification related to the claim internal assignee contains an invalid user ID type. When this happens within CreateClaim, the operation still is executed, but the internal assignee is ignored. |\r\n| 311 | InternalAssigneeUserIDNotFound | This error (a warning when calling CreateClaim) is returned when the UserIDSpecification related to the claim internal assignee contains a user ID that canât be found. When this happens within CreateClaim, the operation still is executed, but the internal assignee is ignored. |\r\n| 312 | UserIDTypeInvalid | This warning is logged when the UserIDSpecification related to the user responsible for the event contains an invalid user ID type. When this happens, the operation still is executed, but the user is ignored. |\r\n| 313 | UserIDNotFound | This warning is logged when the UserIDSpecification canât be found. |\r\n| 314 | ClaimUserRoleNotFound | This warning is logged when the ClaimUserRoleSpecification is not able to find a match for the provided user role label. When this happens, the operation still is executed, but the user is ignored. |\r\n| 315 | ClaimContactUserIDNotFound | This error is returned when the UserIDSpecification related to the claim contact user contains a user ID that canât be found. |\r\n| 316 | ClaimContactUserIDTypeInvalid | This error is returned when the UserIDSpecification related to the user claim contact user contains an invalid user ID type. |\r\n| 317 | RemoveClaimInternalAssigneeUserNotAssigned | This error is returned when the assignee to be removed is not assigned to the claim. When this happens, the operation still is executed but no assignees are removed from the claim. |\r\n| 401 | EstimateIDNotFound | This error is returned when the supplied estimate ID canât be found. |\r\n| 410 | EstimateTypeNotFound | This error is returned when the estimate type cannot be found in the list of estimate types of the originator of the claim. |\r\n| 414 | EstimateClaimCoverageNotFound | This error is returned when the supplied ClaimCoverageID canât be found. |\r\n| 415 | EstimateClaimSubcoverageNotFound | This error is returned when the supplied ClaimSubcoverageID canât be found. |\r\n| 417 | EstimateItemDiagramObjectIDNotFound | This error is returned when the supplied DiagramObjectID canât be found. |\r\n| 418 | EstimateItemDiagramIDNotFound | This error is returned when the supplied DiagramID canât be found. |\r\n| 419 | EstimateItemCustomDiagramIDNotFound | This error is returned when the supplied CustomDiagramID canât be found in the customDiagrams array. |\r\n| 421 | EstimateItemActionCodeNotFound | This error is returned when the supplied ActionCode canât be found in the pricing database of the estimate. |\r\n| 422 | EstimateItemGradeCodeNotFound | This error is returned when the supplied GradeCode canât be found in the pricing database of the estimate. |\r\n| 424 | EstimateItemClaimCoverageNotFound | This error is returned when the supplied ClaimCoverageID canât be found. |\r\n| 425 | EstimateItemClaimSubcoverageNotFound | This error is returned when the supplied ClaimSubcoverageID canât be found. |\r\n| 427 | EstimateItemUpdateIDNotFound | This error is returned when the supplied EstimateItemID canât be found. |\r\n| 429 | EstimateItemUpdateClaimCoverageNotFound | This error is returned when the supplied ClaimCoverageID canât be found. |\r\n| 430 | EstimateItemUpdateClaimSubcoverageNotFound | This error is returned when the supplied ClaimSubcoverageID canât be found. |\r\n| 432 | EstimateItemNoteUpdateIDNotFound | This error is returned when the supplied EstimateItemNoteID canât be found. |\r\n| 433 | EstimateItemNoteDeleteIDNotFound | This error is returned when the supplied EstimateItemNoteID to delete canât be found. |\r\n| 434 | EstimateItemDeleteIDNotFound | This error is returned when the supplied EstimateItemID to delete canât be found. |\r\n| 501 | FormIDNotFound | This warning is logged when the supplied form ID canât be found. |\r\n| 601 | DiagramIDNotFound | This error is returned when the supplied diagram ID canât be found. |\r\n| 701 | PhotoIDNotFound | This error is returned when the supplied photo ID canât be found. |\r\n| 801 | VoiceAnnotationIDNotFound | This error is returned when the supplied voice annotation ID canât be found. |\r\n| 901 | ExternalDocumentIDNotFound | This error is returned when the supplied external document ID canât be found. |\r\n| 1001 | HandwrittenNoteIDNotFound | This error is returned when the supplied handwritten note ID canât be found. |\r\n| 1301 | GroupAssignmentGroupNotFound | This error is returned when the supplied group for assignment canât be found. |\r\n| 1302 | GroupAssignmentNoSupplierAvailable | This error is returned when there are no users available for assignment in the specified group. |\r\n| 1303 | GroupAssignmentNoUserAvailable | This error is returned when there are no users available for assignment in the specified group. |\r\n| 1317 | ClaimSubcoverageNotFound | This error is returned when the specified subcoverage canât be found. |\r\n| 1400 | CalendarEventIDTypeInvalid | This error is returned then the CalendarEventIDSpecification contains an invalid calendar event ID type. |\r\n| 1401 | CalendarEventIDNotFound | This error is returned when the CalendarEventIDSpecification could not be found. |\r\n| 1402 | CalendarEventCategoryNotFound | This warning is logged when the name of the event category could not be found. |\r\n| 1501 | ClaimAssignmentNotFound | This error is returned when the assignment has not been found based on the assignmentID passed as a parameter. |\r\n| 1513 | RepairOptionAssignmentNoRepairOptionAvailable | This error is returned when the assignment with repair options couldnât find an appropriate route for the assignment. |\r\n| 1516 | RepairOptionAssignmentUnsupportedRepairOption | This error is returned when the assignment with repair options has selected a route that is not supported by the API. |\r\n| 1552 | QuestionAnswerNotFound | This error is returned when a question cannot be located from the question code provided in the QuestionAnswer object. |\r\n| 1601 | ClaimPaymentNotFound | This error is returned when the payment cannot be found with the paymentID provided. |\r\n| 1607 | ClaimPaymentIDNotFound | This warning is logged when the supplied payment ID canât be found. |\r\n| 1700 | ClaimTaskIDNotFound | This error is returned when the specified task ID can't be found. |\r\n| 1701 | ParticipantTaskTemplateCodeInvalid | This error is returned when the specified task template code can't be found. |\r\n| 1702 | ParticipantTaskGroupCodeInvalid | This error is returned when an invalid task group code was supplied in either the TaskSpecification or TaskUpdateSpecification objects. |\r\n| 1703 | ParticipantTaskTemplateCancelledCodeInvalid | This error is returned when an invalid task template cancelled code was supplied in either the TaskSpecification or TaskUpdateSpecification objects. |\r\n| 1704 | ParticipantTaskTemplateCompletedCodeInvalid | This error is returned when an invalid task template completed code was supplied in either the TaskSpecification or TaskUpdateSpecification objects. |\r\n| 1803 | ClaimTaskOwnerAddAsClaimParticipantNotFound | This warning is logged when no assignment could be found to add the task owner. |\r\n\r\n\r\n## Error Codes - Miscellaneous\r\n\r\n| No. | Name | Description |\r\n|-------------------------|-------------------------|-------------------------|\r\n| 51 | UnexpectedError | This error is returned when an unexpected server error has occurred while performing the requested operation. |\r\n\r\n\r\n## Error Codes - Validation\r\n\r\n| No. | Name | Description |\r\n|-------------------------|-------------------------|-------------------------|\r\n| 53 | EnumerationValueInvalid | This error is returned if one of the parameters contains an invalid enumeration value (such as specifying Unknown as the InsuredAddress.State within ClaimSpecification). |\r\n| 55 | PasswordInvalid | This error is returned when the password provided doesnât match the password policy in place. |\r\n| 57 | FrameworkValidationError | This error is returned when validation errors have occurred for a specific field/attribute. |\r\n| 151 | ClaimNumberAlreadyExists | This error is returned when trying to create a claim with a claim number (or set the number of an existing claim) that already exists on Claims Connect for the accountâs company. |\r\n| 152 | ClaimNumberMissing | This error is returned when no claim number has been specified when creating a new claim. |\r\n| 153 | PolicyNumberMissing | This error is returned when no policy number has been specified when creating a new claim. |\r\n| 154 | LossDateMissing | This error is returned when no loss date has been specified when creating a new claim. |\r\n| 155 | InsuredNameMissing | This error is returned when neither the insured company name, nor the insured first name and insured last name have been specified. The company name or the first name and last name need to be filled. |\r\n| 156 | ClaimStatusNotAllowed | This error is returned when the claim status canât be changed to the new status. |\r\n| 157 | CustomFieldFormatInvalid | This warning is logged when the custom field value is in a format incompatible to the custom field type stored on Claims Connect for that company (ex: trying to set a date value in a decimal custom field). When this happens, the operation still is executed, but the custom field is ignored. |\r\n| 158 | CustomFieldListValueInvalid | This warning is logged when the custom field value doesnât match any of available values for that custom field. This applies only to custom fields of type âlistâ. When this happens, the operation still is executed, but the custom field is ignored. |\r\n| 159 | CustomFieldMandatoryNotSpecified | This warning is logged when no value has been specified for a mandatory custom field. When this happens, the operation still is executed, but the mandatory custom field stays empty. |\r\n| 160 | CustomFieldAlreadySpecified | This warning is logged when a custom field value has been specified more than once. When this happens, the operation still is executed and the first occurrence of the custom field is used. |\r\n| 161 | IndividualTaxPrecedenceNotImplemented | This warning is logged when the values specified for Tax1BeforeOverheadAndProfit and Tax2BeforeOverheadAndProfit are different. Symbility doesnât support that feature yet. When this happens, the value of Tax1BeforeOverheadAndProfit is used for both fields. |\r\n| 162 | LossDateFuture | This error is returned when the loss date is specified in the future. |\r\n| 163 | ClaimTypeContentsNotAllowed | This error is returned when the originating company of the claim is not allowed to create âContentsâ claims. |\r\n| 164 | ClaimTypeCommercialNotAllowed | This error is returned when the originating company of the claim is not allowed to create âCommercialâ claims. |\r\n| 165 | ClaimBuiltYearInvalid | This warning is logged when the BuiltYear in ClaimSpecification represents a year in the future. When this happens, the operation still is executed, but the specified BuiltYear is ignored. |\r\n| 166 | ClaimCreationDateInvalid | This warning is logged when the CreationDate in ClaimSpecification is invalid (in the future). When this happens, the claim is still created but its CreationDate defaults to the current date/time (UTC). |\r\n| 167 | ClaimLockedByOwnership | This error is returned when attempting to modify a claim for which the ownership has already been taken by a user. |\r\n| 168 | CumulativeTaxesInvalid | This warning is logged if CumulativeTaxes is set to true in ClaimSpecification.TaxInfo and taxes are not set properly. Cumulative taxes is allowed only if both tax 1 and tax 2 are used and tax 3 and tax 4 are not used. |\r\n| 169 | PostalOrZipCodeMissing | This error is returned when no Postal or ZipCode has been specified when creating a new claim. |\r\n| 170 | ClaimCloseNotAllowedAssignmentsOpen | This error is returned when the claim canât be closed because there is still one or more open assignments. For this error to happen, the company must have the âForce users to complete or cancel assignments before closing claimâ option checked in Claim Defaults. |\r\n| 171 | ClaimMustSupportMultipleOwnership | This error is returned when the claim does not support multiple ownership. Therefore a claim update for this claim is not possible. |\r\n| 172 | ClaimAssignmentStatusNotAllowed | This error code is returned when one of these conditions occur: - the assignment is checked out - sent status is EstimateCompleted or EstimateApproved - system was not able to change status |\r\n| 173 | LossTypeMissing | This error is returned when no loss type has been specified when creating a new claim. |\r\n| 174 | WritingCompanyMissing | This error is returned when no Writing Company has been specified when creating a new claim. |\r\n| 175 | ClaimCloseAssignmentsCancelled | This warning is logged when a claim is cancelled and has one or more open assignments. In order for this warning to be returned, the option âForce users to complete or cancel assignments before closing claimâ must be enabled. |\r\n| 176 | GuestCompanyTypeInvalid | This error is returned when a GuestCompanyType is specified which is not BrokerGeneral, BrokerDomestic, or BrokerCommercial. |\r\n| 177 | WritingCompanyNotAllowed | This warning is logged when a Writing Company has been specified which is unavailable to the claimâs guest company. When this happens, the operation is still executed but the writing company parameter is ignored. |\r\n| 178 | SuburbInvalid | This error is returned when no valid suburb has been specified when creating/updating a new claim and that the company uses suburb lookup. |\r\n| 179 | WritingCompanyRemoved | This warning is logged when the previous writing company needs to be removed. |\r\n| 180 | WritingCompanyMismatch | This error is returned when a claim is to be updated via the UpdateClaim method and the writing company specified could not be matched with the claimâs guest company. |\r\n| 181 | InsuredEmailInvalid | This error is returned when the e-mail address is invalid when calling either the UpdateClaim or CreateClaim methods and AddInsuredAsParticipant is true. |\r\n| 182 | GuestUserAlreadyInClaim | This warning is logged when AddInsuredAsParticipant is true when calling the UpdateClaim method and the guest user has already been added to the claim. When this happens, the operation is still executed but the guest user is not added to the claim. |\r\n| 183 | AddInsuredAsParticipantNotAllowed | This error is returned when AddInsuredAsParticipant is true when calling either the UpdateClaim or CreateClaim methods and the caller is not the claim originator. |\r\n| 184 | InsuredEmailMissing | This error is returned when the e-mail address is missing when calling either the UpdateClaim or CreateClaim methods and AddInsuredAsParticipant is true. |\r\n| 185 | UpdateClaimReinspectionNotAllowed | This warning is logged when trying to set the reinspection flag to false while the claim still has reinspection assignments in progress |\r\n| 186 | InsuredAddress1Missing | This error is returned when the first line of the insured address has not been specified, but it was required as per the companyâs configuration. |\r\n| 187 | LossAddress1Missing | This error is returned when the first line of the loss address has not been specified, but it was required as per the companyâs configuration. |\r\n| 188 | CustomFieldReadOnly | This warning is logged when the custom field is read-only and canât be updated. When this happens, the operation still is executed, but the custom field is ignored. |\r\n| 189 | ClaimModificationNotAllowed | This error is returned when trying to modify a claim that canât be edited anymore (ex: a closed claim). |\r\n| 190 | InsuredTitleMissing | This error is returned when an insured title has not been specified and itâs mandatory. |\r\n| 191 | InsuredTitle2Missing | This error is returned when a title has not been specified for the second insured and itâs mandatory. |\r\n| 192 | SecureNotAllowed | This error is returned when setting a claim as secure is not allowed. |\r\n| 251 | AssigneeCompanyTypeNotAllowed | This error is returned when trying to assign a company which is neither a contractor nor an independent adjuster. When creating a claim, a warning is logged instead. The operation still is executed, but that specific assignee is ignored. |\r\n| 252 | AssigneeCompanyAccountStatusInvalid | This error is returned when trying to assign a claim to a company which is currently disabled or blocked. When creating a claim, a warning is logged instead. The operation still is executed, but that specific assignee is ignored. |\r\n| 253 | AssigneeCompanyMaxCountExceeded | This error is returned when trying to add too many assignees to a claim. The maximum number of assignees is 9. When creating a claim, a warning is logged instead. The operation still is executed, but the extra assignees are ignored. |\r\n| 254 | AssigneeCompanyAlreadyAssigned | This warning is returned when trying to add an assignee thatâs already assigned to the claim. When this happens, the operation still is executed, but that specific assignee is ignored. |\r\n| 255 | OriginatorCompanyAccountStatusInvalid | This error is returned when the specified originatorâs account is currently disabled or blocked. |\r\n| 256 | CompanyAccountStatusInvalid | This error is returned when trying to perform an operation for a company which is currently disabled or blocked. |\r\n| 257 | ClaimAccessDenied | This error is returned when trying to access a claim (or claim list) that the current account isnât allowed to view. This error will occur if the current account has no authority on the specified companyIDSpecification. |\r\n| 258 | AssigneeCompanyRoleNotAllowed | This error is returned when trying to assign a company with a role which is incompatible with available roles. When creating a claim, a warning is logged instead. The operation still is executed, but the assignees with that specific role are ignored. |\r\n| 259 | AssigneeDelegatedAuthorityNotAllowed | This error is returned when trying to assign a company other than an intermediary as delegated authority. |\r\n| 260 | AddClaimInternalAssigneeFromParticipantInvalid | This error is returned when the company is not allowed to add internal assignees this claim. |\r\n| 261 | RemoveClaimAssigneeFromParticipantInvalid | This error is returned when the company trying to remove the assignee is not allowed to perform this action. |\r\n| 262 | CompanyNameMissing | This warning is logged when the Company Name is missing from the companySpecification parameter. When this happens, the operation is still executed, but the field is ignored. |\r\n| 263 | ContactFirstNameMissing | This warning is logged when the Contact First Name is missing from the companySpecification parameter. When this happens, the operation is still executed, but the field is ignored. |\r\n| 264 | ContactLastNameMissing | This warning is logged when the Contact Last Name is missing from the companySpecification parameter. When this happens, the operation is still executed, but the field is ignored. |\r\n| 265 | AddressMissing | This warning is logged when the Address is missing from the companySpecification parameter. When this happens, the operation is still executed, but the field is ignored. |\r\n| 266 | PhoneMissing | This warning is logged when the Phone is missing from the companySpecification parameter. When this happens, the operation is still executed, but the field is ignored. |\r\n| 267 | EmailMissing | This warning is logged when the Email is missing from the companySpecification parameter. When this happens, the operation is still executed, but the entry is skipped. |\r\n| 268 | CityMissing | This warning is logged when City is missing in the Address from the companySpecification parameter. When this happens, the operation is still executed, but the field is ignored. This error is also returned when no city has been specified when creating/updating a claim and that originator company uses suburb lookup. |\r\n| 269 | Line1Missing | This warning is logged when Line1 is missing in the Address from the companySpecification parameter. When this happens, the operation is still executed, but the field is ignored. |\r\n| 270 | Line2Missing | This warning is logged when Line2 is missing in the Address from the companySpecification parameter. When this happens, the operation is still executed, but the field is ignored. |\r\n| 271 | ZipCodeMissing | This error is returned when no Postal or ZipCode has been specified when creating a new claim. |\r\n| 272 | CompanyNameAlreadyExists | This warning is logged when the Company Name specified in the companySpecification parameter is a duplicate of a company name already in the system. When this happens, the operation is still executed, but the field is ignored. |\r\n| 273 | CompanyClaimContactNotAllowed | This error is returned when the company is not allowed to use the Claim Contact feature. |\r\n| 274 | RemoveClaimAssigneeInvalidAssigneeHasChildren | This error is returned when the assignee to be removed has sub-assignments. When this happens, the operation is halter and the assignee will not be removed. |\r\n| 275 | RemoveClaimAssigneeInvalidAssigneeClaimCheckedOut | This error is returned when trying to remove an assignee from a claim that is checked out. |\r\n| 276 | AssigneeClaimStatusChangeNotAllowed | This error is returned when trying to assign a company with the ClaimStatusChange flag and the caller is not the claim originator or the delegated authority. |\r\n| 277 | AssigneeGroupIDInvalid | This warning is returned when the group ID canât be found or when the assignee doesnât belong to the specified group ID. |\r\n| 331 | ClaimUserGroupInvalid | This error is returned when trying to add a user which doesnât have the permission to participate in claims (ex: techadmin). |\r\n| 332 | ClaimUserAccountStatusInvalid | This error is returned when trying to add a user which is currently disabled, blocked or expired. |\r\n| 333 | ClaimUserAlreadyParticipant | This warning is returned when trying to add a user which is already participating in the claim. |\r\n| 334 | CreatorUserGroupInvalid | This warning is logged when creatorUserIDSpecification points to a user which doesnât have the permission to be a claim creator. When this happens, the operation still is executed, but the claim creator is ignored. |\r\n| 335 | CreatorUserAccountStatusInvalid | This warning is logged when creatorUserIDSpecification points to a user which is currently disabled, blocked or expired. When this happens, the operation still is executed, but the claim creator is ignored. |\r\n| 336 | OriginatorParticipantUserGroupInvalid | This warning is logged when specifying an originator user which doesnât have the permission to participate in claims. When this happens, the operation still is executed, but the originator user is ignored. |\r\n| 337 | OriginatorParticipantUserAccountStatusInvalid | This warning is logged when specifying an originator user which is currently disabled, blocked or expired. When this happens, the operation still is executed, but the originator user is ignored. |\r\n| 338 | OriginatorParticipantUserAlreadyParticipant | This warning is logged when specifying an originator user which is already participating in the claim. When this happens, the operation still is executed, but the originator user is ignored. |\r\n| 339 | InternalAssigneeUserGroupInvalid | This error (a warning when calling CreateClaim) is returned or logged when specifying an internal assignee user which doesnât have the permission to participate in claims. When this happens within CreateClaim, the operation still is executed, but the internal assignee user is ignored. |\r\n| 340 | InternalAssigneeUserAccountStatusInvalid | This error (a warning when calling CreateClaim) is returned or logged when specifying an internal assignee user which is currently disabled, blocked or expired. When this happens within CreateClaim, the operation still is executed, but the internal assignee user is ignored. |\r\n| 341 | InternalAssigneeUserAlreadyParticipant | This error is returned when trying to assign a user who is already participating in the claim or assigned to the claim. |\r\n| 342 | ClaimUserIsCreator | This warning is logged when trying to add a user which is the claimâs creator. |\r\n| 343 | OriginatorParticipantUserIsCreator | This warning is logged when specifying an originator user which is the claimâs creator. When this happens, the operation still is executed, but the originator user is ignored. |\r\n| 344 | InternalAssigneeUserIsCreator | This error (a warning when calling CreateClaim) is returned or logged when specifying an internal assignee user which is already the claimâs creator. When this happens within CreateClaim, the operation still is executed, but the internal assignee user is ignored. |\r\n| 345 | ClaimContactUserGroupInvalid | This error is returned when trying to set the claim contact to a user who doesn't have the permission. |\r\n| 346 | ClaimContactUserAccountStatusInvalid | This error is returned when trying to set the claim contact to a user who is currently disabled, blocked or expired. |\r\n| 347 | ClaimContactUserNotParticipant | This error is returned when trying to set the claim contact to a user who is not a participant in the claim. |\r\n| 348 | RemoveClaimInternalAssigneeClaimCheckedOut | This error is returned when the internal assignee selected to be unassigned from the claim has ownership of the claim. |\r\n| 349 | GuestCompanyEditionNotAllowed | This error is returned when an assignee or peer attempts to modify the guest company of a claim via the UpdateClaim method. |\r\n| 371 | SetClaimStatusFromUserNotParticipant | This warning is logged when the fromUserIDSpecification points to a user thatâs not a participant in the claim. When this happens, the operation still is executed, but the fromUserIDSpecification is ignored. |\r\n| 372 | SetClaimStatusFromUserGroupInvalid | This warning is logged when the fromUserIDSpecification points to a user that doesnât have the permission to change the claim status. When this happens, the operation still is executed, but the fromUserIDSpecification is ignored. |\r\n| 373 | SetClaimStatusFromUserAccountStatusInvalid | This warning is logged when the fromUserIDSpecification points to a user which is currently disabled, blocked or expired. When this happens, the operation still is executed, but the fromUserIDSpecification is ignored. |\r\n| 374 | AddClaimAssigneeFromUserNotParticipant | This warning is logged when the fromUserIDSpecification points to a user thatâs not a participant in the claim. When this happens, the operation still is executed, but the fromUserIDSpecification is ignored. |\r\n| 375 | AddClaimAssigneeFromUserGroupInvalid | This warning is logged when the fromUserIDSpecification points to a user that doesnât have the permission to add an assignee. When this happens, the operation still is executed, but the fromUserIDSpecification is ignored. |\r\n| 376 | AddClaimAssigneeFromUserAccountStatusInvalid | This warning is logged when the fromUserIDSpecification points to a user which is currently disabled, blocked or expired. When this happens, the operation still is executed, but the fromUserIDSpecification is ignored. |\r\n| 377 | AddClaimUserFromUserNotParticipant | This warning is logged when the fromUserIDSpecification points to a user thatâs not a participant in the claim. When this happens, the operation still is executed, but the fromUserIDSpecification is ignored. |\r\n| 378 | AddClaimUserFromUserGroupInvalid | This warning is logged when the fromUserIDSpecification points to a user that doesnât have the permission to add another user to a claim. When this happens, the operation still is executed, but the fromUserIDSpecification is ignored. |\r\n| 379 | AddClaimUserFromUserAccountStatusInvalid | This warning is logged when the fromUserIDSpecification points to a user which is currently disabled, blocked or expired. When this happens, the operation still is executed, but the fromUserIDSpecification is ignored. |\r\n| 380 | RemoveClaimAssigneeFromUserNotParticipant | This warning is logged when the fromUserIDSpecification points to a user thatâs not a participant in the claim. When this happens, the operation still is executed, but the fromUserIDSpecification is ignored. |\r\n| 381 | RemoveClaimAssigneeFromUserAccountStatusInvalid | This warning is logged when the fromUserIDSpecification points to a user which is currently disabled, blocked or expired. When this happens, the operation still is executed, but the fromUserIDSpecification is ignored. |\r\n| 382 | RemoveClaimAssigneeFromUserGroupInvalid | This warning is logged when the fromUserIDSpecification points to a user that doesnât have the permission to unassign a company. When this happens, the operation still is executed, but the fromUserIDSpecification is ignored. |\r\n| 383 | SetClaimCustomFieldsFromUserNotParticipant | This warning is logged when the fromUserIDSpecification points to a user thatâs not a participant in the claim. When this happens, the operation still is executed, but the fromUserIDSpecification is ignored. |\r\n| 384 | SetClaimCustomFieldsFromUserGroupInvalid | This warning is logged when the fromUserIDSpecification points to a user that doesnât have the permission to set claim custom fields. When this happens, the operation still is executed, but the fromUserIDSpecification is ignored. |\r\n| 385 | SetClaimCustomFieldsFromUserAccountStatusInvalid | This warning is logged when the fromUserIDSpecification points to a user which is currently disabled, blocked or expired. When this happens, the operation still is executed, but the fromUserIDSpecification is ignored. |\r\n| 386 | AddClaimJournalEntryFromUserGroupInvalid | This warning is logged when the fromUserIDSpecification points to a user that doesnât have the permission to add a journal entry. When this happens, the operation still is executed, but the fromUserIDSpecification is ignored. |\r\n| 387 | AddClaimJournalEntryFromUserAccountStatusInvalid | This warning is logged when the fromUserIDSpecification points to a user which is currently disabled, blocked or expired. When this happens, the operation still is executed, but the fromUserIDSpecification is ignored. |\r\n| 388 | SetClaimContactFromUserNotParticipant | This warning is logged when the fromUserIDSpecification points to a user thatâs not a participant in the claim. When this happens, the operation still is executed, but the fromUserIDSpecification is ignored. |\r\n| 389 | SetClaimContactFromUserGroupInvalid | This warning is logged when the fromUserIDSpecification points to a user that doesnât have the permission to change the claim status. When this happens, the operation still is executed, but the fromUserIDSpecification is ignored. |\r\n| 390 | SetClaimContactFromUserAccountStatusInvalid | This warning is logged when the fromUserIDSpecification points to a user which is currently disabled, blocked or expired. When this happens, the operation still is executed, but the fromUserIDSpecification is ignored. |\r\n| 391 | UpdateClaimFromUserNotParticipant | This warning is logged when the fromUserIDSpecification points to a user thatâs not a participant in the claim. When this happens, the operation still is executed, but the fromUserIDSpecification is ignored. |\r\n| 392 | UpdateClaimFromUserGroupInvalid | This warning is logged when the fromUserIDSpecification points to a user that doesnât have the permission to change the claim status. When this happens, the operation still is executed, but the fromUserIDSpecification is ignored. |\r\n| 393 | UpdateClaimFromUserAccountStatusInvalid | This warning is logged when the fromUserIDSpecification points to a user which is currently disabled, blocked or expired. When this happens, the operation still is executed, but the fromUserIDSpecification is ignored. |\r\n| 394 | SetClaimAssignmentStatusFromUserNotParticipant | This warning is logged when the fromUserIDSpecification points to a user thatâs not a participant in the claim. When this happens, the operation still is executed, but the fromUserIDSpecification is ignored. |\r\n| 395 | SetClaimAssignmentStatusFromUserGroupInvalid | This warning is logged when the fromUserIDSpecification points to a user that doesnât have the permission to set claim custom fields. When this happens, the operation still is executed, but the fromUserIDSpecification is ignored. |\r\n| 396 | SetClaimAssignmentStatusFromUserAccountStatusInvalid | This warning is logged when the fromUserIDSpecification points to a user which is currently disabled, blocked or expired. When this happens, the operation still is executed, but the fromUserIDSpecification is ignored. |\r\n| 397 | RemoveClaimUserFromUserGroupInvalid | This warning is logged when the fromUserIDSpecification points to a user that doesnât have the permission to remove a user from a claim. When this happens, the operation still is executed, but the fromUserIDSpecification is ignored. |\r\n| 398 | FromUserIDFormatInvalid | This error is returned when the header parameter From-User-ID-Specification is not in the appropriate format. |\r\n| 402 | EstimateModificationNotAllowed | This error is returned when a user attempts to modify an estimate within a claim and they do not have permission to do so. |\r\n| 403 | EstimateInvoicedFinalizationMandatoryParametersMissing | This error is returned when a user attempts to finalize an estimate and the date and/or reference are missing. |\r\n| 404 | CashSettledFinalizationNotAllowed | This error is returned when a user who is not the claim originator or delegated authority attempts to finalize an estimate with the cash-settled option. |\r\n| 405 | EstimateFinalizationDisabled | This error is returned when attempting to finalize an estimate which has had its finalization options disabled. |\r\n| 406 | CashSettledFinalizationDisabled | This error is returned when attempting to finalize an estimate using the âCash Settledâ option and the estimate has the option disabled. |\r\n| 407 | InvoicedOnlyFinalizationDisabled | This error is returned when attempting to finalize an estimate using the âInvoiced Onlyâ option and the estimate has the option disabled. |\r\n| 408 | FinalizationReferenceNumberLimit | This error is returned when reference number provided exceeds the maximum number of allowed characters. |\r\n| 409 | EstimateLockedByOwnership | This error is returned when attempting to modify an estimate for which the ownership has already been taken by a user. |\r\n| 411 | ContentsEstimateNotAllowed | This error is returned when Contents estimate type is not allowed for the originator company. |\r\n| 412 | EstimateTypeMissing | This error is returned when the estimate type is not specified. |\r\n| 413 | EstimateNameIgnored | This warning is returned when the estimate name provided is ignored because it does not match a name in the list of default names imposed by the originator of the claim. |\r\n| 416 | EstimateIDNotRoot | This error is returned when mergedView is set to true and the estimate ID provided is a supplement/revision estimate and is not a root estimate |\r\n| 423 | EstimateItemRolloutCalculatorNotSupported | This error is returned when trying to add a rollout calculator item â adding such items via the API currently isnât supported. |\r\n| 426 | EstimateItemPropertyLocked | This warning is returned when one or many properties of an item are locked and canât be modified. |\r\n| 428 | EstimateItemUpdateIDNotRoot | This error is returned when the EstimateItemID provided is a supplement/revision estimate item and is not a root estimate item. |\r\n| 431 | EstimateItemUpdatePropertyLocked | This warning is returned when one or many properties of an item are locked and canât be modified. |\r\n| 435 | EstimateItemDeleteIDNotRoot | This error is returned when the EstimateItemID to delete is a supplement/revision estimate item and is not a root estimate item. |\r\n| 436 | EstimateSpecificationMissing | This error is returned when the estimate specification is not specified. |\r\n| 437 | ExternalEstimateLocked | This error is returned when trying to update an external estimate that is locked. |\r\n| 438 | EstimateItemExternalReferenceInvalid | This error is returned when an item with the ExternalReference already exists. |\r\n| 602 | DiagramImportBytesInvalid | This error is returned when the content of the diagram is invalid or not compatible. |\r\n| 603 | DiagramImportBytesPartial | This warning is logged when errors have occurred while generating the diagram(s) and the generated diagram(s) might be incomplete. |\r\n| 604 | DiagramNameMissing | This error is returned when no name is specified when creating custom diagrams. |\r\n| 605 | DiagramTypeInvalid | This error is returned when the CustomDiagramSpecification contains an invalid diagram type. |\r\n| 606 | DiagramLockedByOwnership | This error is returned when attempting to link items to a diagram for which the ownership has been taken by a user. |\r\n| 702 | PhotoPageNameMissing | This error is returned when the Photo Page parameter is empty. |\r\n| 703 | PhotoBytesInvalid | This warning is logged when the bytes do not represent an image. |\r\n| 902 | ExternalDocumentNotAllowed | This error is returned when the company specified to attach an external document is not allowed to perform this operation. |\r\n| 903 | ExternalDocumentSizeLimitExceeded | This error is returned when the size of the external document exceeds the size limit currently imposed by Claims Connect. |\r\n| 904 | ExternalDocumentUnsafe | This error is returned when the external document being attached has an extension that is blocked |\r\n| 1101 | JournalEntryInvalid | This error is returned when the specified journal entry content is invalid (empty). |\r\n| 1201 | GeoEstimatorAccountNotFound | This warning is logged when no valid GeoEstimator account was found for the originating company of the claim. |\r\n| 1202 | GeoEstimatorInvalidAddress | String not found: GeoEstimatorInvalidAddress |\r\n| 1211 | EagleViewAccountNotFound | This warning is logged when no valid EagleView account was found for the originating company of the claim. |\r\n| 1212 | EagleViewAccountProductIDNotFound | This warning is logged when the specified ProductID could not be found for the EagleView account. |\r\n| 1213 | EagleViewAccountDeliveryIDNotFound | This warning is logged when the specified DeliveryID could not be found for the EagleView account. |\r\n| 1214 | EagleViewInvalidNumberOfStructures | This warning is logged when the specified NumberOfStructures is invalid (<= 0). |\r\n| 1215 | EagleViewInvalidAddress | String not found: EagleViewInvalidAddress |\r\n| 1221 | ConnectPointAccountNotFound | This warning is logged when no valid ConnectPoint account was found for the originating company of the claim. |\r\n| 1222 | ConnectPointInvalidAddress | String not found: ConnectPointInvalidAddress |\r\n| 1230 | AccurenceAccountNotFound | String not found: AccurenceAccountNotFound |\r\n| 1231 | AccurenceInvalidAddress | String not found: AccurenceInvalidAddress |\r\n| 1240 | AerialogicsAccountNotFound | This warning is logged when no valid Aerialogics account was found for the originating company of the claim. |\r\n| 1241 | AerialogicsInvalidAddress | This warning is logged when the address to be used with the Aerialogics order is invalid. |\r\n| 1300 | GroupAssignmentGroupIDSpecificationMissing | This error is returned when the group ID was not specified. |\r\n| 1310 | ClaimCoverageTypeMissing | This warning is logged when the Type of a Coverage in ClaimSpecification is not specified. |\r\n| 1311 | ClaimSubcoverageTypeMissing | This warning is logged when the Type of a Subcoverage in ClaimSpecification is not specified. |\r\n| 1312 | ClaimSubcoverageIncoherentSublimits | This warning is logged when the same subcoverage appears under 2 coverages of type FixedShared, but different sublimits have been specified. When this happens, the sublimit defined in the first instance is used. |\r\n| 1313 | ClaimSubcoverageSublimitGreaterThanCoverageLimit | This error is returned when one of the subcoverages has a sublimit greater that its parent coverage limit. |\r\n| 1314 | ClaimSubcoverageAlreadyExists | This warning is logged when 2 subcoverages have the same Type within the same coverage. |\r\n| 1315 | ClaimSubcoverageSublimitInvalid | This error is returned when an invalid Sublimit value has been set for a subcoverage. |\r\n| 1316 | ClaimCoverageNotFound | This error is returned when the specified claim coverage cannot be found. |\r\n| 1318 | AddClaimCoveragesNotAllowed | This error is returned when adding claim coverages is not allowed for the current company. |\r\n| 1319 | ClaimCoverageUpdateNotAllowed | This error is returned when trying to update coverages in a claim - this is currently not supported. |\r\n| 1320 | ClaimCoverageDeleteNotAllowed | This error is returned when trying to delete coverages in a claim - this is currently not supported. |\r\n| 1321 | ClaimSubcoverageUpdateNotAllowed | This error is returned when trying to update subcoverages in a claim - this is currently not supported. |\r\n| 1322 | ClaimSubcoverageDeleteNotAllowed | This error is returned when trying to delete subcoverages in a claim - this is currently not supported. |\r\n| 1420 | CalendarEventConflict | This error is returned when a conflict for the calendar event attendees occur. |\r\n| 1421 | CalendarsNotAllowed | This error is returned when the company is not allowed to use the Calendar feature. |\r\n| 1422 | CalendarEventStartTimeMissing | This error is returned if the StartTime of the event has not been specified. |\r\n| 1423 | CalendarEventStartTimeInvalid | This error is returned if the StartTime specified for the calendar event is invalid. |\r\n| 1424 | CalendarEventEndTimeMissing | This error is returned the the EndTime for the calendar event has not been specified. |\r\n| 1425 | CalendarEventEndTimeInvalid | This error is returned if the EndTime specified for the calendar event occurs before the StartTime. |\r\n| 1426 | CalendarEventSubjectMissing | This error is returned if the Subject of the event has not been specified. |\r\n| 1427 | CalendarEventFromUserGroupInvalid | This warning is logged when specifying a user that is not allowed to create calendar events. When this happens, the operation still is executed, but the user is ignored. |\r\n| 1428 | CalendarEventFromUserAccountStatusInvalid | This warning is logged when specifying a user which is currently disabled, blocked or expired. When this happens, the operation still is executed, but the user is ignored. |\r\n| 1500 | ClaimAssignmentIDMissing | This error is returned if the assignmentID has not been specified as a parameter or if 0 has been passed. |\r\n| 1502 | ParticipantAssignmentTypeCodeInvalid | This error is returned when the participantAssignmentTypeCode is invalid. |\r\n| 1504 | ClaimAssignmentNotInternal | This warning is logged was the assignee selected to be removed is not an internal assignement. When this happens, the operation still is executed but no assignees are removed from the claim. |\r\n| 1505 | ClaimAssignmentCloseNotAllowedEstimatesInProgress | This error is returned when an assignment is closed and it contains one or more in progress or ready for review estimates. In order for this error to be returned, the option âForce users to complete or cancel estimates before completing assignmentâ must be enabled. |\r\n| 1506 | RemoveClaimUserUserNotParticipant | This error is returned when the user specified is not a participant in the claim. |\r\n| 1507 | RemoveClaimUserUserIsOriginatorOrDefaultClaimContact | This error is returned when the user canât be removed because the user is the claim creator or the claim contact. |\r\n| 1508 | RemoveClaimUserUserIsPrimaryNoReplacement | This error is returned when the user canât be removed because heâs the primary adjuster and no other suitable user was found to transfer the primary adjuster role. |\r\n| 1509 | RemoveClaimUserUserIsPrimaryForAssignmentNoReplacement | This error is returned when the user canât be removed because he has a primary role and no other suitable user was found to transfer the primary role. |\r\n| 1510 | ClaimAssignmentAssigningOriginatorAssignmentNotAllowed | This error is returned when trying to assign an internal user to the originator assignment â this is not supported. |\r\n| 1511 | ClaimAssignmentClaimViewNotAllowed | This error is returned when attempting to assign a claim to a user who does not have the permission to view the specified claim. |\r\n| 1512 | ClaimAssignmentCompleteNotAllowedReinspectionChangesWithoutReason | This error is returned when trying to complete an assignment that has reinspection changes without reasons. |\r\n| 1514 | RepairOptionAssignmentNotEnabled | This error is returned when trying to use one of the âRepairOptionâ methods with a company that doesnât have the repair options feature enabled. |\r\n| 1515 | EstimateIDMissing | This error is returned when the estimateID has not been specified and is required. |\r\n| 1517 | RemoveClaimAssigneePaymentPresentInAssignment | This error or warning is returned when the assignee cannot be unassigned because it currently has payment(s). |\r\n| 1518 | ClaimAssignmentInvalid | This error is returned if the assignmentID specified is invalid for the current operation. |\r\n| 1519 | AddClaimAssigneeInsuredContactNotAllowed | This warning is returned when the assignee cannot be set as the insured contact due to permissions. |\r\n| 1520 | AddClaimInternalAssigneeInsuredContactNotAllowed | This warning is returned when the assignee cannot be set as the insured contact due to permissions. |\r\n| 1521 | RemoveClaimInternalAssigneeInsuredContact | This error is returned when the internal assignee specified is set as the insured contact of the claim and therefore cannot be removed. |\r\n| 1522 | RemoveClaimUserInsuredContact | This error is returned when the user specified is set as the insured contact of the claim and therefore cannot be removed. |\r\n| 1523 | RemoveClaimAssigneeInsuredContact | This error is returned when the assignee specified is set as the insured contact of the claim and therefore cannot be removed. |\r\n| 1524 | ClaimAssignmentAssignmentNotAllowed | This error is returned when attempting to sub-assign an assignment that prevents it. |\r\n| 1525 | ClaimAssignmentInvalidAssignmentClosed | This error is returned when attempting to modify an assignment that is completed or cancelled and the originator of the claim doesn't allow editing closed claims and completed assignments. |\r\n| 1550 | QuestionCodeMissing | This warning is logged when the question code is missing from the QuestionAnswer object. When this happens, the opertation still is executed but no question answer is added to the claim. |\r\n| 1551 | QuestionAnswerValueMissing | This warning is logged when the answer value is missing from the QuestionAnswer object. When this happens, the operation still is executed but no question answer is added to the claim. |\r\n| 1553 | QuestionMandatoryNotSpecified | This warning is logged when a mandatory question of a claim does not have an answer specified in the provided QuestionAnswer objects. When this happens, the operation is still executed. |\r\n| 1554 | QuestionAnswerExceedsMaxLength | This warning is logged when the answer value of the provided QuestionAnswer object exceeds the maximum length specified in the question. When this happens, the operation is still executed, but the answer value is truncated to the maximum length allowed. |\r\n| 1555 | QuestionListValueInvalid | This warning is logged when the answer code provided in the QuestionAnswer object does not correspond to any of the answer codes of the list type question. When this happens, the operation is still executed but no question answer is added to the claim. |\r\n| 1556 | QuestionAlreadySpecified | This warning is logged when the specified question code has already been provided in another QuestionAnswer object. When this happens, the operation is still executed but no question answer is added to the claim. |\r\n| 1557 | QuestionFormatInvalid | This warning is logged when the specified answer value is in an invalid format for the question selected, eg: specifying âabcâ for an integer question. When this happens, the operation is still executed but no question answer is added to the claim. |\r\n| 1558 | QuestionAnswerReadOnly | This warning is logged when the question is read-only and canât be updated. When this happens, the operation still is executed, but the question answer is ignored. |\r\n| 1559 | QuestionAnswerMultipleSameCode | This warning is logged when updating multiple questions that have the same code. |\r\n| 1600 | ClaimPaymentIDMissing | This error is returned when the paymentID is missing. |\r\n| 1602 | ClaimPaymentStatusNotAllowed | This error is returned when the payment status canât be changed to the new status |\r\n| 1603 | SetClaimPaymentStatusFromUserGroupInvalid | This warning is logged when the fromUserIDSpecification points to a user that doesnât have the permission to change the status of a payment. When this happens, the operation still is executed, but the fromUserIDSpecification is ignored. |\r\n| 1604 | SetClaimPaymentStatusFromUserAccountStatusInvalid | This warning is logged when the fromUserIDSpecification points to a user which is currently disabled, blocked or expired. When this happens, the operation still is executed, but the fromUserIDSpecification is ignored. |\r\n| 1606 | ClaimPaymentStatusNotAllowedClaimCheckedOut | This error is returned when the payment status canât be changed to the new status due to a user having ownership of the claim. |\r\n| 1800 | ClaimTaskDueDateNotSpecified | This error is returned when the due date is missing from the TaskSpecification object. |\r\n| 1801 | ClaimTaskUpdateNotAllowedForParticipant | This error is returned when the current user or company is not allowed to update the claim task. |\r\n| 1802 | ClaimTaskNameNotSpecified | This error is returned when the name is missing from the TaskSpecification object. |\r\n| 1900 | ClaimAssignmentStatusDateIgnored | This warning is logged when the eventDate passed to the SetClaimAssignmentStatus method is ignored because the originator of the claim doesnât allow user entered dates for statuses or because the status specified doesnât support user entered dates. |\r\n| 1901 | ClaimAssignmentStatusDateFuture | This error is returned when the eventDate passed to the SetClaimAssignmentStatus method is in the future. |\r\n| 1902 | ClaimAssignmentStatusDateInvalidBefore | This error is returned when the eventDate passed to the SetClaimAssignmentStatus method needs to be before another event date. |\r\n| 1903 | ClaimAssignmentStatusDateInvalidAfter | This error is returned when the eventDate passed to the SetClaimAssignmentStatus method needs to be after another event date. |\r\n| 1904 | ClaimAssignmentStatusScheduledJobStartDateMandatory | This error is returned when no scheduledJobStartDate has been passed to the SetClaimAssignmentStatusJobScheduled method when a scheduledJobCompleteDate has been passed. |\r\n| 1905 | ClaimQuestionnaireCodeNotFound | This error is returned when the Code provided in ClaimQuestionnaireSpecification doesnât match to a questionnaire the company is allowed to add. |\r\n| 1906 | ClaimQuestionnaireBytesInvalid | This error is returned when the content of the questionnaire prefill is invalid or not compatible. |\r\n"
    }
  ]
}